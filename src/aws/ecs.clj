(ns aws.ecs
  "AUTOGENERATED clojure.spec definitions"
  (:require [clojure.spec.alpha]
            [edn-to-cfn.specs.cfn :as cfn-specs]))

(do
 (clojure.core/defmethod
  cfn-specs/resource-type-spec
  :aws.ecs/service
  [___16342__auto__]
  (clojure.spec.alpha/keys
   :req
   [:aws.ecs/task-definition]
   :opt
   [:aws.ecs/placement-strategies
    :aws.ecs/desired-count
    :aws.ecs/deployment-configuration
    :aws.ecs/role
    :aws.ecs/load-balancers
    :aws.ecs/cluster
    :aws.ecs/network-configuration
    :aws.ecs/platform-version
    :aws.ecs/service-name
    :aws.ecs/launch-type
    :aws.ecs/placement-constraints
    :aws.ecs/health-check-grace-period-seconds]))
 (clojure.spec.alpha/def :aws.ecs/desired-count clojure.core/integer?)
 (clojure.spec.alpha/def :aws.ecs/role clojure.core/string?)
 (clojure.spec.alpha/def :aws.ecs/cluster clojure.core/string?)
 (clojure.spec.alpha/def :aws.ecs/task-definition clojure.core/string?)
 (clojure.spec.alpha/def
  :aws.ecs/platform-version
  clojure.core/string?)
 (clojure.spec.alpha/def :aws.ecs/service-name clojure.core/string?)
 (clojure.spec.alpha/def :aws.ecs/launch-type clojure.core/string?)
 (clojure.spec.alpha/def
  :aws.ecs/health-check-grace-period-seconds
  clojure.core/integer?))
(do
 (clojure.core/defmethod
  cfn-specs/resource-type-spec
  :aws.ecs/cluster
  [___16342__auto__]
  (clojure.spec.alpha/keys :req [] :opt [:aws.ecs/cluster-name]))
 (clojure.spec.alpha/def :aws.ecs/cluster-name clojure.core/string?))
(do
 (clojure.core/defmethod
  cfn-specs/resource-type-spec
  :aws.ecs/task-definition
  [___16342__auto__]
  (clojure.spec.alpha/keys
   :req
   []
   :opt
   [:aws.ecs/cpu
    :aws.ecs/task-role-arn
    :aws.ecs/family
    :aws.ecs/execution-role-arn
    :aws.ecs/memory
    :aws.ecs/requires-compatibilities
    :aws.ecs/network-mode
    :aws.ecs/placement-constraints
    :aws.ecs/volumes
    :aws.ecs/container-definitions]))
 (clojure.spec.alpha/def :aws.ecs/cpu clojure.core/string?)
 (clojure.spec.alpha/def :aws.ecs/task-role-arn clojure.core/string?)
 (clojure.spec.alpha/def :aws.ecs/family clojure.core/string?)
 (clojure.spec.alpha/def
  :aws.ecs/execution-role-arn
  clojure.core/string?)
 (clojure.spec.alpha/def :aws.ecs/memory clojure.core/string?)
 (clojure.spec.alpha/def :aws.ecs/network-mode clojure.core/string?))
(do
 (clojure.spec.alpha/def :aws.ecs/hard-limit clojure.core/integer?)
 (clojure.spec.alpha/def :aws.ecs/name clojure.core/string?)
 (clojure.spec.alpha/def :aws.ecs/soft-limit clojure.core/integer?)
 (clojure.spec.alpha/def
  :aws.ecs/ulimit
  (clojure.spec.alpha/keys
   :req
   [:aws.ecs/hard-limit :aws.ecs/name :aws.ecs/soft-limit]
   :opt
   [])))
(do
 (clojure.spec.alpha/def :aws.ecs/name clojure.core/string?)
 (clojure.spec.alpha/def :aws.ecs/value clojure.core/string?)
 (clojure.spec.alpha/def
  :aws.ecs/key-value-pair
  (clojure.spec.alpha/keys
   :req
   []
   :opt
   [:aws.ecs/name :aws.ecs/value])))
(do
 (clojure.spec.alpha/def
  :aws.ecs/maximum-percent
  clojure.core/integer?)
 (clojure.spec.alpha/def
  :aws.ecs/minimum-healthy-percent
  clojure.core/integer?)
 (clojure.spec.alpha/def
  :aws.ecs/deployment-configuration
  (clojure.spec.alpha/keys
   :req
   []
   :opt
   [:aws.ecs/maximum-percent :aws.ecs/minimum-healthy-percent])))
(do
 (clojure.spec.alpha/def
  :aws.ecs/network-configuration
  (clojure.spec.alpha/keys
   :req
   []
   :opt
   [:aws.ecs/awsvpc-configuration])))
(do
 (clojure.spec.alpha/def :aws.ecs/hostname clojure.core/string?)
 (clojure.spec.alpha/def :aws.ecs/ip-address clojure.core/string?)
 (clojure.spec.alpha/def
  :aws.ecs/host-entry
  (clojure.spec.alpha/keys
   :req
   [:aws.ecs/hostname :aws.ecs/ip-address]
   :opt
   [])))
(do
 (clojure.spec.alpha/def :aws.ecs/container-path clojure.core/string?)
 (clojure.spec.alpha/def :aws.ecs/host-path clojure.core/string?)
 (clojure.spec.alpha/def
  :aws.ecs/device
  (clojure.spec.alpha/keys
   :req
   [:aws.ecs/host-path]
   :opt
   [:aws.ecs/container-path :aws.ecs/permissions])))
(do
 (clojure.spec.alpha/def :aws.ecs/source-path clojure.core/string?)
 (clojure.spec.alpha/def
  :aws.ecs/host-volume-properties
  (clojure.spec.alpha/keys :req [] :opt [:aws.ecs/source-path])))
(do
 (clojure.spec.alpha/def
  :aws.ecs/kernel-capabilities
  (clojure.spec.alpha/keys :req [] :opt [:aws.ecs/add :aws.ecs/drop])))
(do
 (clojure.spec.alpha/def
  :aws.ecs/assign-public-ip
  clojure.core/string?)
 (clojure.spec.alpha/def
  :aws.ecs/aws-vpc-configuration
  (clojure.spec.alpha/keys
   :req
   [:aws.ecs/subnets]
   :opt
   [:aws.ecs/assign-public-ip :aws.ecs/security-groups])))
(do
 (clojure.spec.alpha/def :aws.ecs/expression clojure.core/string?)
 (clojure.spec.alpha/def :aws.ecs/type clojure.core/string?)
 (clojure.spec.alpha/def
  :aws.ecs/placement-constraint
  (clojure.spec.alpha/keys
   :req
   [:aws.ecs/type]
   :opt
   [:aws.ecs/expression])))
(do
 (clojure.spec.alpha/def :aws.ecs/container-port clojure.core/integer?)
 (clojure.spec.alpha/def :aws.ecs/host-port clojure.core/integer?)
 (clojure.spec.alpha/def :aws.ecs/protocol clojure.core/string?)
 (clojure.spec.alpha/def
  :aws.ecs/port-mapping
  (clojure.spec.alpha/keys
   :req
   []
   :opt
   [:aws.ecs/container-port :aws.ecs/host-port :aws.ecs/protocol])))
(do
 (clojure.spec.alpha/def :aws.ecs/cpu clojure.core/integer?)
 (clojure.spec.alpha/def :aws.ecs/user clojure.core/string?)
 (clojure.spec.alpha/def :aws.ecs/privileged clojure.core/boolean?)
 (clojure.spec.alpha/def :aws.ecs/hostname clojure.core/string?)
 (clojure.spec.alpha/def
  :aws.ecs/disable-networking
  clojure.core/boolean?)
 (clojure.spec.alpha/def :aws.ecs/memory clojure.core/integer?)
 (clojure.spec.alpha/def
  :aws.ecs/readonly-root-filesystem
  clojure.core/boolean?)
 (clojure.spec.alpha/def :aws.ecs/image clojure.core/string?)
 (clojure.spec.alpha/def :aws.ecs/name clojure.core/string?)
 (clojure.spec.alpha/def :aws.ecs/essential clojure.core/boolean?)
 (clojure.spec.alpha/def
  :aws.ecs/working-directory
  clojure.core/string?)
 (clojure.spec.alpha/def
  :aws.ecs/memory-reservation
  clojure.core/integer?)
 (clojure.spec.alpha/def
  :aws.ecs/container-definition
  (clojure.spec.alpha/keys
   :req
   []
   :opt
   [:aws.ecs/docker-security-options
    :aws.ecs/volumes-from
    :aws.ecs/cpu
    :aws.ecs/port-mappings
    :aws.ecs/user
    :aws.ecs/privileged
    :aws.ecs/log-configuration
    :aws.ecs/hostname
    :aws.ecs/disable-networking
    :aws.ecs/environment
    :aws.ecs/command
    :aws.ecs/entry-point
    :aws.ecs/linux-parameters
    :aws.ecs/memory
    :aws.ecs/ulimits
    :aws.ecs/readonly-root-filesystem
    :aws.ecs/extra-hosts
    :aws.ecs/image
    :aws.ecs/name
    :aws.ecs/docker-labels
    :aws.ecs/essential
    :aws.ecs/working-directory
    :aws.ecs/mount-points
    :aws.ecs/dns-servers
    :aws.ecs/memory-reservation
    :aws.ecs/links
    :aws.ecs/dns-search-domains])))
(do
 (clojure.spec.alpha/def :aws.ecs/container-name clojure.core/string?)
 (clojure.spec.alpha/def :aws.ecs/container-port clojure.core/integer?)
 (clojure.spec.alpha/def
  :aws.ecs/load-balancer-name
  clojure.core/string?)
 (clojure.spec.alpha/def
  :aws.ecs/target-group-arn
  clojure.core/string?)
 (clojure.spec.alpha/def
  :aws.ecs/load-balancer
  (clojure.spec.alpha/keys
   :req
   [:aws.ecs/container-port]
   :opt
   [:aws.ecs/container-name
    :aws.ecs/load-balancer-name
    :aws.ecs/target-group-arn])))
(do
 (clojure.spec.alpha/def :aws.ecs/expression clojure.core/string?)
 (clojure.spec.alpha/def :aws.ecs/type clojure.core/string?)
 (clojure.spec.alpha/def
  :aws.ecs/task-definition-placement-constraint
  (clojure.spec.alpha/keys
   :req
   [:aws.ecs/type]
   :opt
   [:aws.ecs/expression])))
(do
 (clojure.spec.alpha/def :aws.ecs/field clojure.core/string?)
 (clojure.spec.alpha/def :aws.ecs/type clojure.core/string?)
 (clojure.spec.alpha/def
  :aws.ecs/placement-strategy
  (clojure.spec.alpha/keys :req [:aws.ecs/type] :opt [:aws.ecs/field])))
(do
 (clojure.spec.alpha/def :aws.ecs/read-only clojure.core/boolean?)
 (clojure.spec.alpha/def
  :aws.ecs/source-container
  clojure.core/string?)
 (clojure.spec.alpha/def
  :aws.ecs/volume-from
  (clojure.spec.alpha/keys
   :req
   []
   :opt
   [:aws.ecs/read-only :aws.ecs/source-container])))
(do
 (clojure.spec.alpha/def :aws.ecs/name clojure.core/string?)
 (clojure.spec.alpha/def
  :aws.ecs/volume
  (clojure.spec.alpha/keys :req [] :opt [:aws.ecs/host :aws.ecs/name])))
(do
 (clojure.spec.alpha/def :aws.ecs/log-driver clojure.core/string?)
 (clojure.spec.alpha/def
  :aws.ecs/log-configuration
  (clojure.spec.alpha/keys
   :req
   [:aws.ecs/log-driver]
   :opt
   [:aws.ecs/options])))
(do
 (clojure.spec.alpha/def :aws.ecs/container-path clojure.core/string?)
 (clojure.spec.alpha/def :aws.ecs/read-only clojure.core/boolean?)
 (clojure.spec.alpha/def :aws.ecs/source-volume clojure.core/string?)
 (clojure.spec.alpha/def
  :aws.ecs/mount-point
  (clojure.spec.alpha/keys
   :req
   []
   :opt
   [:aws.ecs/container-path
    :aws.ecs/read-only
    :aws.ecs/source-volume])))
(do
 (clojure.spec.alpha/def
  :aws.ecs/init-process-enabled
  clojure.core/boolean?)
 (clojure.spec.alpha/def
  :aws.ecs/linux-parameters
  (clojure.spec.alpha/keys
   :req
   []
   :opt
   [:aws.ecs/capabilities
    :aws.ecs/devices
    :aws.ecs/init-process-enabled])))
