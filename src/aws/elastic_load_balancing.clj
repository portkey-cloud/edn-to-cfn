(ns aws.elastic-load-balancing
  "AUTOGENERATED clojure.spec definitions"
  (:require [clojure.spec.alpha]
            [edn-to-cfn.specs.cfn :as cfn-specs]))

(do
 (clojure.core/defmethod
  cfn-specs/resource-type-spec
  :aws.elastic-load-balancing/load-balancer
  [___16342__auto__]
  (clojure.spec.alpha/keys
   :req
   [:aws.elastic-load-balancing/listeners]
   :opt
   [:aws.elastic-load-balancing/health-check
    :aws.elastic-load-balancing/app-cookie-stickiness-policy
    :aws.elastic-load-balancing/subnets
    :aws.elastic-load-balancing/cross-zone
    :aws.elastic-load-balancing/access-logging-policy
    :aws.elastic-load-balancing/security-groups
    :aws.elastic-load-balancing/load-balancer-name
    :aws.elastic-load-balancing/lb-cookie-stickiness-policy
    :aws.elastic-load-balancing/tags
    :aws.elastic-load-balancing/connection-draining-policy
    :aws.elastic-load-balancing/scheme
    :aws.elastic-load-balancing/policies
    :aws.elastic-load-balancing/availability-zones
    :aws.elastic-load-balancing/connection-settings
    :aws.elastic-load-balancing/instances]))
 (clojure.spec.alpha/def
  :aws.elastic-load-balancing/cross-zone
  clojure.core/boolean?)
 (clojure.spec.alpha/def
  :aws.elastic-load-balancing/load-balancer-name
  clojure.core/string?)
 (clojure.spec.alpha/def
  :aws.elastic-load-balancing/scheme
  clojure.core/string?))
(do
 (clojure.spec.alpha/def
  :aws.elastic-load-balancing/emit-interval
  clojure.core/integer?)
 (clojure.spec.alpha/def
  :aws.elastic-load-balancing/enabled
  clojure.core/boolean?)
 (clojure.spec.alpha/def
  :aws.elastic-load-balancing/s3-bucket-name
  clojure.core/string?)
 (clojure.spec.alpha/def
  :aws.elastic-load-balancing/s3-bucket-prefix
  clojure.core/string?)
 (clojure.spec.alpha/def
  :aws.elastic-load-balancing/access-logging-policy
  (clojure.spec.alpha/keys
   :req
   [:aws.elastic-load-balancing/enabled
    :aws.elastic-load-balancing/s3-bucket-name]
   :opt
   [:aws.elastic-load-balancing/emit-interval
    :aws.elastic-load-balancing/s3-bucket-prefix])))
(do
 (clojure.spec.alpha/def
  :aws.elastic-load-balancing/instance-port
  clojure.core/string?)
 (clojure.spec.alpha/def
  :aws.elastic-load-balancing/instance-protocol
  clojure.core/string?)
 (clojure.spec.alpha/def
  :aws.elastic-load-balancing/load-balancer-port
  clojure.core/string?)
 (clojure.spec.alpha/def
  :aws.elastic-load-balancing/protocol
  clojure.core/string?)
 (clojure.spec.alpha/def
  :aws.elastic-load-balancing/ssl-certificate-id
  clojure.core/string?)
 (clojure.spec.alpha/def
  :aws.elastic-load-balancing/listeners
  (clojure.spec.alpha/keys
   :req
   [:aws.elastic-load-balancing/instance-port
    :aws.elastic-load-balancing/load-balancer-port
    :aws.elastic-load-balancing/protocol]
   :opt
   [:aws.elastic-load-balancing/instance-protocol
    :aws.elastic-load-balancing/policy-names
    :aws.elastic-load-balancing/ssl-certificate-id])))
(do
 (clojure.spec.alpha/def
  :aws.elastic-load-balancing/policy-name
  clojure.core/string?)
 (clojure.spec.alpha/def
  :aws.elastic-load-balancing/policy-type
  clojure.core/string?)
 (clojure.spec.alpha/def
  :aws.elastic-load-balancing/policies
  (clojure.spec.alpha/keys
   :req
   [:aws.elastic-load-balancing/attributes
    :aws.elastic-load-balancing/policy-name
    :aws.elastic-load-balancing/policy-type]
   :opt
   [:aws.elastic-load-balancing/instance-ports
    :aws.elastic-load-balancing/load-balancer-ports])))
(do
 (clojure.spec.alpha/def
  :aws.elastic-load-balancing/idle-timeout
  clojure.core/integer?)
 (clojure.spec.alpha/def
  :aws.elastic-load-balancing/connection-settings
  (clojure.spec.alpha/keys
   :req
   [:aws.elastic-load-balancing/idle-timeout]
   :opt
   [])))
(do
 (clojure.spec.alpha/def
  :aws.elastic-load-balancing/enabled
  clojure.core/boolean?)
 (clojure.spec.alpha/def
  :aws.elastic-load-balancing/timeout
  clojure.core/integer?)
 (clojure.spec.alpha/def
  :aws.elastic-load-balancing/connection-draining-policy
  (clojure.spec.alpha/keys
   :req
   [:aws.elastic-load-balancing/enabled]
   :opt
   [:aws.elastic-load-balancing/timeout])))
(do
 (clojure.spec.alpha/def
  :aws.elastic-load-balancing/cookie-expiration-period
  clojure.core/string?)
 (clojure.spec.alpha/def
  :aws.elastic-load-balancing/policy-name
  clojure.core/string?)
 (clojure.spec.alpha/def
  :aws.elastic-load-balancing/lb-cookie-stickiness-policy
  (clojure.spec.alpha/keys
   :req
   []
   :opt
   [:aws.elastic-load-balancing/cookie-expiration-period
    :aws.elastic-load-balancing/policy-name])))
(do
 (clojure.spec.alpha/def
  :aws.elastic-load-balancing/cookie-name
  clojure.core/string?)
 (clojure.spec.alpha/def
  :aws.elastic-load-balancing/policy-name
  clojure.core/string?)
 (clojure.spec.alpha/def
  :aws.elastic-load-balancing/app-cookie-stickiness-policy
  (clojure.spec.alpha/keys
   :req
   [:aws.elastic-load-balancing/cookie-name
    :aws.elastic-load-balancing/policy-name]
   :opt
   [])))
(do
 (clojure.spec.alpha/def
  :aws.elastic-load-balancing/healthy-threshold
  clojure.core/string?)
 (clojure.spec.alpha/def
  :aws.elastic-load-balancing/interval
  clojure.core/string?)
 (clojure.spec.alpha/def
  :aws.elastic-load-balancing/target
  clojure.core/string?)
 (clojure.spec.alpha/def
  :aws.elastic-load-balancing/timeout
  clojure.core/string?)
 (clojure.spec.alpha/def
  :aws.elastic-load-balancing/unhealthy-threshold
  clojure.core/string?)
 (clojure.spec.alpha/def
  :aws.elastic-load-balancing/health-check
  (clojure.spec.alpha/keys
   :req
   [:aws.elastic-load-balancing/healthy-threshold
    :aws.elastic-load-balancing/interval
    :aws.elastic-load-balancing/target
    :aws.elastic-load-balancing/timeout
    :aws.elastic-load-balancing/unhealthy-threshold]
   :opt
   [])))
