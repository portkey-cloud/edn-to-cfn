(ns aws.dms
  "AUTOGENERATED clojure.spec definitions"
  (:require [clojure.spec.alpha]))

(clojure.spec.alpha/def
 :aws.dms/replication-subnet-group
 (clojure.spec.alpha/keys
  :req
  [:aws.dms/replication-subnet-group-description :aws.dms/subnet-ids]
  :opt
  [:aws.dms/replication-subnet-group-identifier :aws.dms/tags]))
(clojure.spec.alpha/def
 :aws.dms/replication-instance
 (clojure.spec.alpha/keys
  :req
  [:aws.dms/replication-instance-class]
  :opt
  [:aws.dms/publicly-accessible
   :aws.dms/preferred-maintenance-window
   :aws.dms/auto-minor-version-upgrade
   :aws.dms/tags
   :aws.dms/vpc-security-group-ids
   :aws.dms/availability-zone
   :aws.dms/replication-instance-identifier
   :aws.dms/allow-major-version-upgrade
   :aws.dms/allocated-storage
   :aws.dms/replication-subnet-group-identifier
   :aws.dms/engine-version
   :aws.dms/kms-key-id
   :aws.dms/multi-az]))
(clojure.spec.alpha/def
 :aws.dms/certificate
 (clojure.spec.alpha/keys
  :req
  []
  :opt
  [:aws.dms/certificate-identifier
   :aws.dms/certificate-pem
   :aws.dms/certificate-wallet]))
(clojure.spec.alpha/def
 :aws.dms/endpoint
 (clojure.spec.alpha/keys
  :req
  [:aws.dms/engine-name :aws.dms/endpoint-type]
  :opt
  [:aws.dms/username
   :aws.dms/s3-settings
   :aws.dms/password
   :aws.dms/database-name
   :aws.dms/extra-connection-attributes
   :aws.dms/endpoint-identifier
   :aws.dms/tags
   :aws.dms/mongo-db-settings
   :aws.dms/port
   :aws.dms/kms-key-id
   :aws.dms/ssl-mode
   :aws.dms/dynamo-db-settings
   :aws.dms/certificate-arn
   :aws.dms/server-name]))
(clojure.spec.alpha/def
 :aws.dms/replication-task
 (clojure.spec.alpha/keys
  :req
  [:aws.dms/source-endpoint-arn
   :aws.dms/migration-type
   :aws.dms/replication-instance-arn
   :aws.dms/target-endpoint-arn
   :aws.dms/table-mappings]
  :opt
  [:aws.dms/cdc-start-time
   :aws.dms/replication-task-settings
   :aws.dms/tags
   :aws.dms/replication-task-identifier]))
(clojure.spec.alpha/def
 :aws.dms/event-subscription
 (clojure.spec.alpha/keys
  :req
  [:aws.dms/sns-topic-arn]
  :opt
  [:aws.dms/source-type
   :aws.dms/event-categories
   :aws.dms/enabled
   :aws.dms/subscription-name
   :aws.dms/source-ids
   :aws.dms/tags]))
(do
 (clojure.spec.alpha/def
  :aws.dms/service-access-role-arn
  clojure.core/string?)
 (clojure.spec.alpha/def
  :aws.dms/dynamo-db-settings
  (clojure.spec.alpha/keys
   :req
   []
   :opt
   [:aws.dms/service-access-role-arn])))
(do
 (clojure.spec.alpha/def :aws.dms/username clojure.core/string?)
 (clojure.spec.alpha/def :aws.dms/password clojure.core/string?)
 (clojure.spec.alpha/def :aws.dms/database-name clojure.core/string?)
 (clojure.spec.alpha/def :aws.dms/extract-doc-id clojure.core/string?)
 (clojure.spec.alpha/def :aws.dms/auth-mechanism clojure.core/string?)
 (clojure.spec.alpha/def :aws.dms/port clojure.core/integer?)
 (clojure.spec.alpha/def :aws.dms/auth-type clojure.core/string?)
 (clojure.spec.alpha/def :aws.dms/auth-source clojure.core/string?)
 (clojure.spec.alpha/def :aws.dms/server-name clojure.core/string?)
 (clojure.spec.alpha/def
  :aws.dms/docs-to-investigate
  clojure.core/string?)
 (clojure.spec.alpha/def :aws.dms/nesting-level clojure.core/string?)
 (clojure.spec.alpha/def
  :aws.dms/mongo-db-settings
  (clojure.spec.alpha/keys
   :req
   []
   :opt
   [:aws.dms/username
    :aws.dms/password
    :aws.dms/database-name
    :aws.dms/extract-doc-id
    :aws.dms/auth-mechanism
    :aws.dms/port
    :aws.dms/auth-type
    :aws.dms/auth-source
    :aws.dms/server-name
    :aws.dms/docs-to-investigate
    :aws.dms/nesting-level])))
(do
 (clojure.spec.alpha/def
  :aws.dms/external-table-definition
  clojure.core/string?)
 (clojure.spec.alpha/def :aws.dms/bucket-name clojure.core/string?)
 (clojure.spec.alpha/def :aws.dms/bucket-folder clojure.core/string?)
 (clojure.spec.alpha/def
  :aws.dms/csv-row-delimiter
  clojure.core/string?)
 (clojure.spec.alpha/def :aws.dms/csv-delimiter clojure.core/string?)
 (clojure.spec.alpha/def
  :aws.dms/service-access-role-arn
  clojure.core/string?)
 (clojure.spec.alpha/def
  :aws.dms/compression-type
  clojure.core/string?)
 (clojure.spec.alpha/def
  :aws.dms/s3-settings
  (clojure.spec.alpha/keys
   :req
   []
   :opt
   [:aws.dms/external-table-definition
    :aws.dms/bucket-name
    :aws.dms/bucket-folder
    :aws.dms/csv-row-delimiter
    :aws.dms/csv-delimiter
    :aws.dms/service-access-role-arn
    :aws.dms/compression-type])))
