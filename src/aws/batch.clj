(ns aws.batch
  "AUTOGENERATED clojure.spec definitions"
  (:require [clojure.spec.alpha]))

(clojure.spec.alpha/def
 :aws.batch/compute-environment
 (clojure.spec.alpha/keys
  :req
  [:aws.batch/type
   :aws.batch/service-role
   :aws.batch/compute-resources]
  :opt
  [:aws.batch/compute-environment-name :aws.batch/state]))
(clojure.spec.alpha/def
 :aws.batch/job-queue
 (clojure.spec.alpha/keys
  :req
  [:aws.batch/compute-environment-order :aws.batch/priority]
  :opt
  [:aws.batch/state :aws.batch/job-queue-name]))
(clojure.spec.alpha/def
 :aws.batch/job-definition
 (clojure.spec.alpha/keys
  :req
  [:aws.batch/type :aws.batch/container-properties]
  :opt
  [:aws.batch/parameters
   :aws.batch/job-definition-name
   :aws.batch/retry-strategy]))
(do
 (clojure.spec.alpha/def :aws.batch/read-only clojure.core/boolean?)
 (clojure.spec.alpha/def :aws.batch/source-volume clojure.core/string?)
 (clojure.spec.alpha/def
  :aws.batch/container-path
  clojure.core/string?)
 (clojure.spec.alpha/def
  :aws.batch/mount-points
  (clojure.spec.alpha/keys
   :req
   []
   :opt
   [:aws.batch/read-only
    :aws.batch/source-volume
    :aws.batch/container-path])))
(do
 (clojure.spec.alpha/def :aws.batch/value clojure.core/string?)
 (clojure.spec.alpha/def :aws.batch/name clojure.core/string?)
 (clojure.spec.alpha/def
  :aws.batch/environment
  (clojure.spec.alpha/keys
   :req
   []
   :opt
   [:aws.batch/value :aws.batch/name])))
(do
 (clojure.spec.alpha/def
  :aws.batch/spot-iam-fleet-role
  clojure.core/string?)
 (clojure.spec.alpha/def :aws.batch/minv-cpus clojure.core/integer?)
 (clojure.spec.alpha/def :aws.batch/type clojure.core/string?)
 (clojure.spec.alpha/def :aws.batch/image-id clojure.core/string?)
 (clojure.spec.alpha/def :aws.batch/instance-role clojure.core/string?)
 (clojure.spec.alpha/def :aws.batch/ec2-key-pair clojure.core/string?)
 (clojure.spec.alpha/def :aws.batch/maxv-cpus clojure.core/integer?)
 (clojure.spec.alpha/def :aws.batch/tags clojure.core/any?)
 (clojure.spec.alpha/def
  :aws.batch/bid-percentage
  clojure.core/integer?)
 (clojure.spec.alpha/def
  :aws.batch/desiredv-cpus
  clojure.core/integer?)
 (clojure.spec.alpha/def
  :aws.batch/compute-resources
  (clojure.spec.alpha/keys
   :req
   [:aws.batch/instance-types
    :aws.batch/minv-cpus
    :aws.batch/security-group-ids
    :aws.batch/type
    :aws.batch/subnets
    :aws.batch/instance-role
    :aws.batch/maxv-cpus]
   :opt
   [:aws.batch/spot-iam-fleet-role
    :aws.batch/image-id
    :aws.batch/ec2-key-pair
    :aws.batch/tags
    :aws.batch/bid-percentage
    :aws.batch/desiredv-cpus])))
(do
 (clojure.spec.alpha/def :aws.batch/soft-limit clojure.core/integer?)
 (clojure.spec.alpha/def :aws.batch/hard-limit clojure.core/integer?)
 (clojure.spec.alpha/def :aws.batch/name clojure.core/string?)
 (clojure.spec.alpha/def
  :aws.batch/ulimit
  (clojure.spec.alpha/keys
   :req
   [:aws.batch/soft-limit :aws.batch/hard-limit :aws.batch/name]
   :opt
   [])))
(do
 (clojure.spec.alpha/def :aws.batch/user clojure.core/string?)
 (clojure.spec.alpha/def :aws.batch/privileged clojure.core/boolean?)
 (clojure.spec.alpha/def :aws.batch/vcpus clojure.core/integer?)
 (clojure.spec.alpha/def :aws.batch/memory clojure.core/integer?)
 (clojure.spec.alpha/def
  :aws.batch/readonly-root-filesystem
  clojure.core/boolean?)
 (clojure.spec.alpha/def :aws.batch/image clojure.core/string?)
 (clojure.spec.alpha/def :aws.batch/job-role-arn clojure.core/string?)
 (clojure.spec.alpha/def
  :aws.batch/container-properties
  (clojure.spec.alpha/keys
   :req
   [:aws.batch/vcpus :aws.batch/memory :aws.batch/image]
   :opt
   [:aws.batch/user
    :aws.batch/privileged
    :aws.batch/environment
    :aws.batch/command
    :aws.batch/ulimits
    :aws.batch/readonly-root-filesystem
    :aws.batch/volumes
    :aws.batch/mount-points
    :aws.batch/job-role-arn])))
(do
 (clojure.spec.alpha/def :aws.batch/source-path clojure.core/string?)
 (clojure.spec.alpha/def
  :aws.batch/volumes-host
  (clojure.spec.alpha/keys :req [] :opt [:aws.batch/source-path])))
(do
 (clojure.spec.alpha/def
  :aws.batch/compute-environment
  clojure.core/string?)
 (clojure.spec.alpha/def :aws.batch/order clojure.core/integer?)
 (clojure.spec.alpha/def
  :aws.batch/compute-environment-order
  (clojure.spec.alpha/keys
   :req
   [:aws.batch/compute-environment :aws.batch/order]
   :opt
   [])))
(do
 (clojure.spec.alpha/def :aws.batch/attempts clojure.core/integer?)
 (clojure.spec.alpha/def
  :aws.batch/retry-strategy
  (clojure.spec.alpha/keys :req [] :opt [:aws.batch/attempts])))
(do
 (clojure.spec.alpha/def :aws.batch/name clojure.core/string?)
 (clojure.spec.alpha/def
  :aws.batch/volumes
  (clojure.spec.alpha/keys
   :req
   []
   :opt
   [:aws.batch/host :aws.batch/name])))
