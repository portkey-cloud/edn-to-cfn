(ns aws.code-deploy
  "AUTOGENERATED clojure.spec definitions"
  (:require [clojure.spec.alpha]
            [edn-to-cfn.specs.cfn :as cfn-specs]))

(do
 (clojure.core/defmethod
  cfn-specs/resource-type-spec
  :aws.code-deploy/deployment-group
  [___16342__auto__]
  (clojure.spec.alpha/keys
   :req
   [:aws.code-deploy/service-role-arn
    :aws.code-deploy/application-name]
   :opt
   [:aws.code-deploy/auto-rollback-configuration
    :aws.code-deploy/deployment-config-name
    :aws.code-deploy/ec2-tag-filters
    :aws.code-deploy/deployment
    :aws.code-deploy/on-premises-instance-tag-filters
    :aws.code-deploy/load-balancer-info
    :aws.code-deploy/deployment-group-name
    :aws.code-deploy/trigger-configurations
    :aws.code-deploy/deployment-style
    :aws.code-deploy/alarm-configuration
    :aws.code-deploy/auto-scaling-groups]))
 (clojure.spec.alpha/def
  :aws.code-deploy/deployment-config-name
  clojure.core/string?)
 (clojure.spec.alpha/def
  :aws.code-deploy/service-role-arn
  clojure.core/string?)
 (clojure.spec.alpha/def
  :aws.code-deploy/deployment-group-name
  clojure.core/string?)
 (clojure.spec.alpha/def
  :aws.code-deploy/application-name
  clojure.core/string?))
(do
 (clojure.core/defmethod
  cfn-specs/resource-type-spec
  :aws.code-deploy/application
  [___16342__auto__]
  (clojure.spec.alpha/keys
   :req
   []
   :opt
   [:aws.code-deploy/application-name
    :aws.code-deploy/compute-platform]))
 (clojure.spec.alpha/def
  :aws.code-deploy/application-name
  clojure.core/string?)
 (clojure.spec.alpha/def
  :aws.code-deploy/compute-platform
  clojure.core/string?))
(do
 (clojure.core/defmethod
  cfn-specs/resource-type-spec
  :aws.code-deploy/deployment-config
  [___16342__auto__]
  (clojure.spec.alpha/keys
   :req
   []
   :opt
   [:aws.code-deploy/deployment-config-name
    :aws.code-deploy/minimum-healthy-hosts]))
 (clojure.spec.alpha/def
  :aws.code-deploy/deployment-config-name
  clojure.core/string?))
(do
 (clojure.spec.alpha/def
  :aws.code-deploy/commit-id
  clojure.core/string?)
 (clojure.spec.alpha/def
  :aws.code-deploy/repository
  clojure.core/string?)
 (clojure.spec.alpha/def
  :aws.code-deploy/git-hub-location
  (clojure.spec.alpha/keys
   :req
   [:aws.code-deploy/commit-id :aws.code-deploy/repository]
   :opt
   [])))
(do
 (clojure.spec.alpha/def :aws.code-deploy/name clojure.core/string?)
 (clojure.spec.alpha/def
  :aws.code-deploy/target-group-info
  (clojure.spec.alpha/keys :req [] :opt [:aws.code-deploy/name])))
(do
 (clojure.spec.alpha/def
  :aws.code-deploy/revision-type
  clojure.core/string?)
 (clojure.spec.alpha/def
  :aws.code-deploy/revision-location
  (clojure.spec.alpha/keys
   :req
   []
   :opt
   [:aws.code-deploy/git-hub-location
    :aws.code-deploy/revision-type
    :aws.code-deploy/s3-location])))
(do
 (clojure.spec.alpha/def
  :aws.code-deploy/trigger-name
  clojure.core/string?)
 (clojure.spec.alpha/def
  :aws.code-deploy/trigger-target-arn
  clojure.core/string?)
 (clojure.spec.alpha/def
  :aws.code-deploy/trigger-config
  (clojure.spec.alpha/keys
   :req
   []
   :opt
   [:aws.code-deploy/trigger-events
    :aws.code-deploy/trigger-name
    :aws.code-deploy/trigger-target-arn])))
(do
 (clojure.spec.alpha/def :aws.code-deploy/type clojure.core/string?)
 (clojure.spec.alpha/def :aws.code-deploy/value clojure.core/integer?)
 (clojure.spec.alpha/def
  :aws.code-deploy/minimum-healthy-hosts
  (clojure.spec.alpha/keys
   :req
   [:aws.code-deploy/type :aws.code-deploy/value]
   :opt
   [])))
(do
 (clojure.spec.alpha/def :aws.code-deploy/bucket clojure.core/string?)
 (clojure.spec.alpha/def
  :aws.code-deploy/bundle-type
  clojure.core/string?)
 (clojure.spec.alpha/def :aws.code-deploy/e-tag clojure.core/string?)
 (clojure.spec.alpha/def :aws.code-deploy/key clojure.core/string?)
 (clojure.spec.alpha/def :aws.code-deploy/version clojure.core/string?)
 (clojure.spec.alpha/def
  :aws.code-deploy/s3-location
  (clojure.spec.alpha/keys
   :req
   [:aws.code-deploy/bucket :aws.code-deploy/key]
   :opt
   [:aws.code-deploy/bundle-type
    :aws.code-deploy/e-tag
    :aws.code-deploy/version])))
(do
 (clojure.spec.alpha/def :aws.code-deploy/key clojure.core/string?)
 (clojure.spec.alpha/def :aws.code-deploy/type clojure.core/string?)
 (clojure.spec.alpha/def :aws.code-deploy/value clojure.core/string?)
 (clojure.spec.alpha/def
  :aws.code-deploy/ec2-tag-filter
  (clojure.spec.alpha/keys
   :req
   []
   :opt
   [:aws.code-deploy/key
    :aws.code-deploy/type
    :aws.code-deploy/value])))
(do
 (clojure.spec.alpha/def :aws.code-deploy/key clojure.core/string?)
 (clojure.spec.alpha/def :aws.code-deploy/type clojure.core/string?)
 (clojure.spec.alpha/def :aws.code-deploy/value clojure.core/string?)
 (clojure.spec.alpha/def
  :aws.code-deploy/tag-filter
  (clojure.spec.alpha/keys
   :req
   []
   :opt
   [:aws.code-deploy/key
    :aws.code-deploy/type
    :aws.code-deploy/value])))
(do
 (clojure.spec.alpha/def
  :aws.code-deploy/description
  clojure.core/string?)
 (clojure.spec.alpha/def
  :aws.code-deploy/ignore-application-stop-failures
  clojure.core/boolean?)
 (clojure.spec.alpha/def
  :aws.code-deploy/deployment
  (clojure.spec.alpha/keys
   :req
   [:aws.code-deploy/revision]
   :opt
   [:aws.code-deploy/description
    :aws.code-deploy/ignore-application-stop-failures])))
(do
 (clojure.spec.alpha/def :aws.code-deploy/name clojure.core/string?)
 (clojure.spec.alpha/def
  :aws.code-deploy/elb-info
  (clojure.spec.alpha/keys :req [] :opt [:aws.code-deploy/name])))
(do
 (clojure.spec.alpha/def
  :aws.code-deploy/enabled
  clojure.core/boolean?)
 (clojure.spec.alpha/def
  :aws.code-deploy/ignore-poll-alarm-failure
  clojure.core/boolean?)
 (clojure.spec.alpha/def
  :aws.code-deploy/alarm-configuration
  (clojure.spec.alpha/keys
   :req
   []
   :opt
   [:aws.code-deploy/alarms
    :aws.code-deploy/enabled
    :aws.code-deploy/ignore-poll-alarm-failure])))
(do
 (clojure.spec.alpha/def
  :aws.code-deploy/deployment-option
  clojure.core/string?)
 (clojure.spec.alpha/def
  :aws.code-deploy/deployment-type
  clojure.core/string?)
 (clojure.spec.alpha/def
  :aws.code-deploy/deployment-style
  (clojure.spec.alpha/keys
   :req
   []
   :opt
   [:aws.code-deploy/deployment-option
    :aws.code-deploy/deployment-type])))
(do
 (clojure.spec.alpha/def
  :aws.code-deploy/load-balancer-info
  (clojure.spec.alpha/keys
   :req
   []
   :opt
   [:aws.code-deploy/elb-info-list
    :aws.code-deploy/target-group-info-list])))
(do
 (clojure.spec.alpha/def
  :aws.code-deploy/enabled
  clojure.core/boolean?)
 (clojure.spec.alpha/def
  :aws.code-deploy/auto-rollback-configuration
  (clojure.spec.alpha/keys
   :req
   []
   :opt
   [:aws.code-deploy/enabled :aws.code-deploy/events])))
(do
 (clojure.spec.alpha/def :aws.code-deploy/name clojure.core/string?)
 (clojure.spec.alpha/def
  :aws.code-deploy/alarm
  (clojure.spec.alpha/keys :req [] :opt [:aws.code-deploy/name])))
