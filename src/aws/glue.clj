(ns aws.glue
  "AUTOGENERATED clojure.spec definitions"
  (:require [clojure.spec.alpha]
            [edn-to-cfn.specs.cfn :as cfn-specs]))

(do
 (clojure.core/defmethod
  cfn-specs/resource-type-spec
  :aws.glue/connection
  [___16342__auto__]
  (clojure.spec.alpha/keys
   :req
   [:aws.glue/connection-input :aws.glue/catalog-id]
   :opt
   []))
 (clojure.spec.alpha/def :aws.glue/catalog-id clojure.core/string?))
(do
 (clojure.core/defmethod
  cfn-specs/resource-type-spec
  :aws.glue/classifier
  [___16342__auto__]
  (clojure.spec.alpha/keys :req [] :opt [:aws.glue/grok-classifier])))
(do
 (clojure.core/defmethod
  cfn-specs/resource-type-spec
  :aws.glue/table
  [___16342__auto__]
  (clojure.spec.alpha/keys
   :req
   [:aws.glue/table-input :aws.glue/database-name :aws.glue/catalog-id]
   :opt
   []))
 (clojure.spec.alpha/def :aws.glue/database-name clojure.core/string?)
 (clojure.spec.alpha/def :aws.glue/catalog-id clojure.core/string?))
(do
 (clojure.core/defmethod
  cfn-specs/resource-type-spec
  :aws.glue/crawler
  [___16342__auto__]
  (clojure.spec.alpha/keys
   :req
   [:aws.glue/database-name :aws.glue/role :aws.glue/targets]
   :opt
   [:aws.glue/classifiers
    :aws.glue/table-prefix
    :aws.glue/schema-change-policy
    :aws.glue/description
    :aws.glue/schedule
    :aws.glue/name]))
 (clojure.spec.alpha/def :aws.glue/database-name clojure.core/string?)
 (clojure.spec.alpha/def :aws.glue/role clojure.core/string?)
 (clojure.spec.alpha/def :aws.glue/table-prefix clojure.core/string?)
 (clojure.spec.alpha/def :aws.glue/description clojure.core/string?)
 (clojure.spec.alpha/def :aws.glue/name clojure.core/string?))
(do
 (clojure.core/defmethod
  cfn-specs/resource-type-spec
  :aws.glue/database
  [___16342__auto__]
  (clojure.spec.alpha/keys
   :req
   [:aws.glue/database-input :aws.glue/catalog-id]
   :opt
   []))
 (clojure.spec.alpha/def :aws.glue/catalog-id clojure.core/string?))
(do
 (clojure.core/defmethod
  cfn-specs/resource-type-spec
  :aws.glue/dev-endpoint
  [___16342__auto__]
  (clojure.spec.alpha/keys
   :req
   [:aws.glue/public-key :aws.glue/role-arn]
   :opt
   [:aws.glue/extra-jars-s3-path
    :aws.glue/endpoint-name
    :aws.glue/number-of-nodes
    :aws.glue/subnet-id
    :aws.glue/extra-python-libs-s3-path
    :aws.glue/security-group-ids]))
 (clojure.spec.alpha/def
  :aws.glue/extra-jars-s3-path
  clojure.core/string?)
 (clojure.spec.alpha/def :aws.glue/endpoint-name clojure.core/string?)
 (clojure.spec.alpha/def :aws.glue/public-key clojure.core/string?)
 (clojure.spec.alpha/def
  :aws.glue/number-of-nodes
  clojure.core/integer?)
 (clojure.spec.alpha/def :aws.glue/subnet-id clojure.core/string?)
 (clojure.spec.alpha/def
  :aws.glue/extra-python-libs-s3-path
  clojure.core/string?)
 (clojure.spec.alpha/def :aws.glue/role-arn clojure.core/string?))
(do
 (clojure.core/defmethod
  cfn-specs/resource-type-spec
  :aws.glue/job
  [___16342__auto__]
  (clojure.spec.alpha/keys
   :req
   [:aws.glue/role :aws.glue/command]
   :opt
   [:aws.glue/allocated-capacity
    :aws.glue/log-uri
    :aws.glue/default-arguments
    :aws.glue/connections
    :aws.glue/description
    :aws.glue/max-retries
    :aws.glue/execution-property
    :aws.glue/name]))
 (clojure.spec.alpha/def
  :aws.glue/allocated-capacity
  clojure.core/double?)
 (clojure.spec.alpha/def :aws.glue/log-uri clojure.core/string?)
 (clojure.spec.alpha/def :aws.glue/default-arguments clojure.core/any?)
 (clojure.spec.alpha/def :aws.glue/role clojure.core/string?)
 (clojure.spec.alpha/def :aws.glue/description clojure.core/string?)
 (clojure.spec.alpha/def :aws.glue/max-retries clojure.core/double?)
 (clojure.spec.alpha/def :aws.glue/name clojure.core/string?))
(do
 (clojure.core/defmethod
  cfn-specs/resource-type-spec
  :aws.glue/trigger
  [___16342__auto__]
  (clojure.spec.alpha/keys
   :req
   [:aws.glue/type :aws.glue/actions]
   :opt
   [:aws.glue/description
    :aws.glue/schedule
    :aws.glue/name
    :aws.glue/predicate]))
 (clojure.spec.alpha/def :aws.glue/type clojure.core/string?)
 (clojure.spec.alpha/def :aws.glue/description clojure.core/string?)
 (clojure.spec.alpha/def :aws.glue/schedule clojure.core/string?)
 (clojure.spec.alpha/def :aws.glue/name clojure.core/string?))
(do
 (clojure.core/defmethod
  cfn-specs/resource-type-spec
  :aws.glue/partition
  [___16342__auto__]
  (clojure.spec.alpha/keys
   :req
   [:aws.glue/table-name
    :aws.glue/database-name
    :aws.glue/catalog-id
    :aws.glue/partition-input]
   :opt
   []))
 (clojure.spec.alpha/def :aws.glue/table-name clojure.core/string?)
 (clojure.spec.alpha/def :aws.glue/database-name clojure.core/string?)
 (clojure.spec.alpha/def :aws.glue/catalog-id clojure.core/string?))
(do
 (clojure.spec.alpha/def
  :aws.glue/availability-zone
  clojure.core/string?)
 (clojure.spec.alpha/def :aws.glue/subnet-id clojure.core/string?)
 (clojure.spec.alpha/def
  :aws.glue/physical-connection-requirements
  (clojure.spec.alpha/keys
   :req
   []
   :opt
   [:aws.glue/availability-zone
    :aws.glue/security-group-id-list
    :aws.glue/subnet-id])))
(do
 (clojure.spec.alpha/def :aws.glue/comment clojure.core/string?)
 (clojure.spec.alpha/def :aws.glue/type clojure.core/string?)
 (clojure.spec.alpha/def :aws.glue/name clojure.core/string?)
 (clojure.spec.alpha/def
  :aws.glue/column
  (clojure.spec.alpha/keys
   :req
   [:aws.glue/name]
   :opt
   [:aws.glue/comment :aws.glue/type])))
(do
 (clojure.spec.alpha/def :aws.glue/parameters clojure.core/any?)
 (clojure.spec.alpha/def
  :aws.glue/serialization-library
  clojure.core/string?)
 (clojure.spec.alpha/def :aws.glue/name clojure.core/string?)
 (clojure.spec.alpha/def
  :aws.glue/serde-info
  (clojure.spec.alpha/keys
   :req
   []
   :opt
   [:aws.glue/parameters
    :aws.glue/serialization-library
    :aws.glue/name])))
(do
 (clojure.spec.alpha/def
  :aws.glue/connection-name
  clojure.core/string?)
 (clojure.spec.alpha/def :aws.glue/path clojure.core/string?)
 (clojure.spec.alpha/def
  :aws.glue/jdbc-target
  (clojure.spec.alpha/keys
   :req
   []
   :opt
   [:aws.glue/connection-name :aws.glue/path :aws.glue/exclusions])))
(do
 (clojure.spec.alpha/def
  :aws.glue/connections-list
  (clojure.spec.alpha/keys :req [] :opt [:aws.glue/connections])))
(do
 (clojure.spec.alpha/def
  :aws.glue/update-behavior
  clojure.core/string?)
 (clojure.spec.alpha/def
  :aws.glue/delete-behavior
  clojure.core/string?)
 (clojure.spec.alpha/def
  :aws.glue/schema-change-policy
  (clojure.spec.alpha/keys
   :req
   []
   :opt
   [:aws.glue/update-behavior :aws.glue/delete-behavior])))
(do
 (clojure.spec.alpha/def :aws.glue/logical clojure.core/string?)
 (clojure.spec.alpha/def
  :aws.glue/predicate
  (clojure.spec.alpha/keys
   :req
   []
   :opt
   [:aws.glue/logical :aws.glue/conditions])))
(do
 (clojure.spec.alpha/def :aws.glue/location-uri clojure.core/string?)
 (clojure.spec.alpha/def :aws.glue/description clojure.core/string?)
 (clojure.spec.alpha/def :aws.glue/parameters clojure.core/any?)
 (clojure.spec.alpha/def :aws.glue/name clojure.core/string?)
 (clojure.spec.alpha/def
  :aws.glue/database-input
  (clojure.spec.alpha/keys
   :req
   []
   :opt
   [:aws.glue/location-uri
    :aws.glue/description
    :aws.glue/parameters
    :aws.glue/name])))
(do
 (clojure.spec.alpha/def
  :aws.glue/custom-patterns
  clojure.core/string?)
 (clojure.spec.alpha/def :aws.glue/grok-pattern clojure.core/string?)
 (clojure.spec.alpha/def :aws.glue/classification clojure.core/string?)
 (clojure.spec.alpha/def :aws.glue/name clojure.core/string?)
 (clojure.spec.alpha/def
  :aws.glue/grok-classifier
  (clojure.spec.alpha/keys
   :req
   [:aws.glue/grok-pattern :aws.glue/classification]
   :opt
   [:aws.glue/custom-patterns :aws.glue/name])))
(do
 (clojure.spec.alpha/def :aws.glue/parameters clojure.core/any?)
 (clojure.spec.alpha/def
  :aws.glue/partition-input
  (clojure.spec.alpha/keys
   :req
   [:aws.glue/values]
   :opt
   [:aws.glue/parameters :aws.glue/storage-descriptor])))
(do
 (clojure.spec.alpha/def
  :aws.glue/skewed-column-value-location-maps
  clojure.core/any?)
 (clojure.spec.alpha/def
  :aws.glue/skewed-info
  (clojure.spec.alpha/keys
   :req
   []
   :opt
   [:aws.glue/skewed-column-names
    :aws.glue/skewed-column-values
    :aws.glue/skewed-column-value-location-maps])))
(do
 (clojure.spec.alpha/def :aws.glue/column clojure.core/string?)
 (clojure.spec.alpha/def :aws.glue/sort-order clojure.core/integer?)
 (clojure.spec.alpha/def
  :aws.glue/order
  (clojure.spec.alpha/keys
   :req
   [:aws.glue/column :aws.glue/sort-order]
   :opt
   [])))
(do
 (clojure.spec.alpha/def
  :aws.glue/script-location
  clojure.core/string?)
 (clojure.spec.alpha/def :aws.glue/name clojure.core/string?)
 (clojure.spec.alpha/def
  :aws.glue/job-command
  (clojure.spec.alpha/keys
   :req
   []
   :opt
   [:aws.glue/script-location :aws.glue/name])))
(do
 (clojure.spec.alpha/def :aws.glue/comment clojure.core/string?)
 (clojure.spec.alpha/def :aws.glue/type clojure.core/string?)
 (clojure.spec.alpha/def :aws.glue/name clojure.core/string?)
 (clojure.spec.alpha/def
  :aws.glue/column
  (clojure.spec.alpha/keys
   :req
   [:aws.glue/name]
   :opt
   [:aws.glue/comment :aws.glue/type])))
(do
 (clojure.spec.alpha/def
  :aws.glue/skewed-column-value-location-maps
  clojure.core/any?)
 (clojure.spec.alpha/def
  :aws.glue/skewed-info
  (clojure.spec.alpha/keys
   :req
   []
   :opt
   [:aws.glue/skewed-column-names
    :aws.glue/skewed-column-values
    :aws.glue/skewed-column-value-location-maps])))
(do
 (clojure.spec.alpha/def
  :aws.glue/view-expanded-text
  clojure.core/string?)
 (clojure.spec.alpha/def :aws.glue/parameters clojure.core/any?)
 (clojure.spec.alpha/def :aws.glue/description clojure.core/string?)
 (clojure.spec.alpha/def :aws.glue/owner clojure.core/string?)
 (clojure.spec.alpha/def :aws.glue/table-type clojure.core/string?)
 (clojure.spec.alpha/def :aws.glue/retention clojure.core/integer?)
 (clojure.spec.alpha/def :aws.glue/name clojure.core/string?)
 (clojure.spec.alpha/def
  :aws.glue/view-original-text
  clojure.core/string?)
 (clojure.spec.alpha/def
  :aws.glue/table-input
  (clojure.spec.alpha/keys
   :req
   []
   :opt
   [:aws.glue/view-expanded-text
    :aws.glue/parameters
    :aws.glue/storage-descriptor
    :aws.glue/partition-keys
    :aws.glue/description
    :aws.glue/owner
    :aws.glue/table-type
    :aws.glue/retention
    :aws.glue/name
    :aws.glue/view-original-text])))
(do
 (clojure.spec.alpha/def
  :aws.glue/targets
  (clojure.spec.alpha/keys
   :req
   []
   :opt
   [:aws.glue/s3-targets :aws.glue/jdbc-targets])))
(do
 (clojure.spec.alpha/def :aws.glue/path clojure.core/string?)
 (clojure.spec.alpha/def
  :aws.glue/s3-target
  (clojure.spec.alpha/keys
   :req
   []
   :opt
   [:aws.glue/path :aws.glue/exclusions])))
(do
 (clojure.spec.alpha/def :aws.glue/job-name clojure.core/string?)
 (clojure.spec.alpha/def :aws.glue/arguments clojure.core/any?)
 (clojure.spec.alpha/def
  :aws.glue/action
  (clojure.spec.alpha/keys
   :req
   []
   :opt
   [:aws.glue/job-name :aws.glue/arguments])))
(do
 (clojure.spec.alpha/def :aws.glue/column clojure.core/string?)
 (clojure.spec.alpha/def :aws.glue/sort-order clojure.core/integer?)
 (clojure.spec.alpha/def
  :aws.glue/order
  (clojure.spec.alpha/keys
   :req
   [:aws.glue/column]
   :opt
   [:aws.glue/sort-order])))
(do
 (clojure.spec.alpha/def :aws.glue/description clojure.core/string?)
 (clojure.spec.alpha/def
  :aws.glue/connection-type
  clojure.core/string?)
 (clojure.spec.alpha/def
  :aws.glue/connection-properties
  clojure.core/any?)
 (clojure.spec.alpha/def :aws.glue/name clojure.core/string?)
 (clojure.spec.alpha/def
  :aws.glue/connection-input
  (clojure.spec.alpha/keys
   :req
   [:aws.glue/connection-type :aws.glue/connection-properties]
   :opt
   [:aws.glue/description
    :aws.glue/match-criteria
    :aws.glue/physical-connection-requirements
    :aws.glue/name])))
(do
 (clojure.spec.alpha/def :aws.glue/state clojure.core/string?)
 (clojure.spec.alpha/def
  :aws.glue/logical-operator
  clojure.core/string?)
 (clojure.spec.alpha/def :aws.glue/job-name clojure.core/string?)
 (clojure.spec.alpha/def
  :aws.glue/condition
  (clojure.spec.alpha/keys
   :req
   []
   :opt
   [:aws.glue/state :aws.glue/logical-operator :aws.glue/job-name])))
(do
 (clojure.spec.alpha/def
  :aws.glue/max-concurrent-runs
  clojure.core/double?)
 (clojure.spec.alpha/def
  :aws.glue/execution-property
  (clojure.spec.alpha/keys
   :req
   []
   :opt
   [:aws.glue/max-concurrent-runs])))
(do
 (clojure.spec.alpha/def :aws.glue/parameters clojure.core/any?)
 (clojure.spec.alpha/def
  :aws.glue/serialization-library
  clojure.core/string?)
 (clojure.spec.alpha/def :aws.glue/name clojure.core/string?)
 (clojure.spec.alpha/def
  :aws.glue/serde-info
  (clojure.spec.alpha/keys
   :req
   []
   :opt
   [:aws.glue/parameters
    :aws.glue/serialization-library
    :aws.glue/name])))
(do
 (clojure.spec.alpha/def
  :aws.glue/schedule-expression
  clojure.core/string?)
 (clojure.spec.alpha/def
  :aws.glue/schedule
  (clojure.spec.alpha/keys
   :req
   []
   :opt
   [:aws.glue/schedule-expression])))
(do
 (clojure.spec.alpha/def
  :aws.glue/number-of-buckets
  clojure.core/integer?)
 (clojure.spec.alpha/def :aws.glue/parameters clojure.core/any?)
 (clojure.spec.alpha/def :aws.glue/location clojure.core/string?)
 (clojure.spec.alpha/def :aws.glue/compressed clojure.core/boolean?)
 (clojure.spec.alpha/def :aws.glue/output-format clojure.core/string?)
 (clojure.spec.alpha/def
  :aws.glue/stored-as-sub-directories
  clojure.core/boolean?)
 (clojure.spec.alpha/def :aws.glue/input-format clojure.core/string?)
 (clojure.spec.alpha/def
  :aws.glue/storage-descriptor
  (clojure.spec.alpha/keys
   :req
   []
   :opt
   [:aws.glue/number-of-buckets
    :aws.glue/parameters
    :aws.glue/location
    :aws.glue/compressed
    :aws.glue/serde-info
    :aws.glue/output-format
    :aws.glue/skewed-info
    :aws.glue/stored-as-sub-directories
    :aws.glue/bucket-columns
    :aws.glue/input-format
    :aws.glue/columns
    :aws.glue/sort-columns])))
(do
 (clojure.spec.alpha/def
  :aws.glue/number-of-buckets
  clojure.core/integer?)
 (clojure.spec.alpha/def :aws.glue/parameters clojure.core/any?)
 (clojure.spec.alpha/def :aws.glue/location clojure.core/string?)
 (clojure.spec.alpha/def :aws.glue/compressed clojure.core/boolean?)
 (clojure.spec.alpha/def :aws.glue/output-format clojure.core/string?)
 (clojure.spec.alpha/def
  :aws.glue/stored-as-sub-directories
  clojure.core/boolean?)
 (clojure.spec.alpha/def :aws.glue/input-format clojure.core/string?)
 (clojure.spec.alpha/def
  :aws.glue/storage-descriptor
  (clojure.spec.alpha/keys
   :req
   []
   :opt
   [:aws.glue/number-of-buckets
    :aws.glue/parameters
    :aws.glue/location
    :aws.glue/compressed
    :aws.glue/serde-info
    :aws.glue/output-format
    :aws.glue/skewed-info
    :aws.glue/stored-as-sub-directories
    :aws.glue/bucket-columns
    :aws.glue/input-format
    :aws.glue/columns
    :aws.glue/sort-columns])))
