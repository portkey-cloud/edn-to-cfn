(ns aws.waf
  "AUTOGENERATED clojure.spec definitions"
  (:require [clojure.spec.alpha]))

(clojure.spec.alpha/def
 :aws.waf/web-acl
 (clojure.spec.alpha/keys
  :req
  [:aws.waf/default-action :aws.waf/metric-name :aws.waf/name]
  :opt
  [:aws.waf/rules]))
(clojure.spec.alpha/def
 :aws.waf/rule
 (clojure.spec.alpha/keys
  :req
  [:aws.waf/metric-name :aws.waf/name]
  :opt
  [:aws.waf/predicates]))
(clojure.spec.alpha/def
 :aws.waf/size-constraint-set
 (clojure.spec.alpha/keys
  :req
  [:aws.waf/name :aws.waf/size-constraints]
  :opt
  []))
(clojure.spec.alpha/def
 :aws.waf/ip-set
 (clojure.spec.alpha/keys
  :req
  [:aws.waf/name]
  :opt
  [:aws.waf/ip-set-descriptors]))
(clojure.spec.alpha/def
 :aws.waf/byte-match-set
 (clojure.spec.alpha/keys
  :req
  [:aws.waf/name]
  :opt
  [:aws.waf/byte-match-tuples]))
(clojure.spec.alpha/def
 :aws.waf/xss-match-set
 (clojure.spec.alpha/keys
  :req
  [:aws.waf/name :aws.waf/xss-match-tuples]
  :opt
  []))
(clojure.spec.alpha/def
 :aws.waf/sql-injection-match-set
 (clojure.spec.alpha/keys
  :req
  [:aws.waf/name]
  :opt
  [:aws.waf/sql-injection-match-tuples]))
(do
 (clojure.spec.alpha/def
  :aws.waf/text-transformation
  clojure.core/string?)
 (clojure.spec.alpha/def
  :aws.waf/sql-injection-match-tuple
  (clojure.spec.alpha/keys
   :req
   [:aws.waf/field-to-match :aws.waf/text-transformation]
   :opt
   [])))
(do
 (clojure.spec.alpha/def :aws.waf/type clojure.core/string?)
 (clojure.spec.alpha/def :aws.waf/value clojure.core/string?)
 (clojure.spec.alpha/def
  :aws.waf/ip-set-descriptor
  (clojure.spec.alpha/keys
   :req
   [:aws.waf/type :aws.waf/value]
   :opt
   [])))
(do
 (clojure.spec.alpha/def
  :aws.waf/comparison-operator
  clojure.core/string?)
 (clojure.spec.alpha/def :aws.waf/size clojure.core/integer?)
 (clojure.spec.alpha/def
  :aws.waf/text-transformation
  clojure.core/string?)
 (clojure.spec.alpha/def
  :aws.waf/size-constraint
  (clojure.spec.alpha/keys
   :req
   [:aws.waf/comparison-operator
    :aws.waf/field-to-match
    :aws.waf/size
    :aws.waf/text-transformation]
   :opt
   [])))
(do
 (clojure.spec.alpha/def :aws.waf/priority clojure.core/integer?)
 (clojure.spec.alpha/def :aws.waf/rule-id clojure.core/string?)
 (clojure.spec.alpha/def
  :aws.waf/activated-rule
  (clojure.spec.alpha/keys
   :req
   [:aws.waf/action :aws.waf/priority :aws.waf/rule-id]
   :opt
   [])))
(do
 (clojure.spec.alpha/def
  :aws.waf/text-transformation
  clojure.core/string?)
 (clojure.spec.alpha/def
  :aws.waf/xss-match-tuple
  (clojure.spec.alpha/keys
   :req
   [:aws.waf/field-to-match :aws.waf/text-transformation]
   :opt
   [])))
(do
 (clojure.spec.alpha/def
  :aws.waf/positional-constraint
  clojure.core/string?)
 (clojure.spec.alpha/def :aws.waf/target-string clojure.core/string?)
 (clojure.spec.alpha/def
  :aws.waf/target-string-base64
  clojure.core/string?)
 (clojure.spec.alpha/def
  :aws.waf/text-transformation
  clojure.core/string?)
 (clojure.spec.alpha/def
  :aws.waf/byte-match-tuple
  (clojure.spec.alpha/keys
   :req
   [:aws.waf/field-to-match
    :aws.waf/positional-constraint
    :aws.waf/text-transformation]
   :opt
   [:aws.waf/target-string :aws.waf/target-string-base64])))
(do
 (clojure.spec.alpha/def :aws.waf/data-id clojure.core/string?)
 (clojure.spec.alpha/def :aws.waf/negated clojure.core/boolean?)
 (clojure.spec.alpha/def :aws.waf/type clojure.core/string?)
 (clojure.spec.alpha/def
  :aws.waf/predicate
  (clojure.spec.alpha/keys
   :req
   [:aws.waf/data-id :aws.waf/negated :aws.waf/type]
   :opt
   [])))
(do
 (clojure.spec.alpha/def :aws.waf/data clojure.core/string?)
 (clojure.spec.alpha/def :aws.waf/type clojure.core/string?)
 (clojure.spec.alpha/def
  :aws.waf/field-to-match
  (clojure.spec.alpha/keys :req [:aws.waf/type] :opt [:aws.waf/data])))
(do
 (clojure.spec.alpha/def :aws.waf/type clojure.core/string?)
 (clojure.spec.alpha/def
  :aws.waf/waf-action
  (clojure.spec.alpha/keys :req [:aws.waf/type] :opt [])))
(do
 (clojure.spec.alpha/def :aws.waf/data clojure.core/string?)
 (clojure.spec.alpha/def :aws.waf/type clojure.core/string?)
 (clojure.spec.alpha/def
  :aws.waf/field-to-match
  (clojure.spec.alpha/keys :req [:aws.waf/type] :opt [:aws.waf/data])))
(do
 (clojure.spec.alpha/def :aws.waf/data clojure.core/string?)
 (clojure.spec.alpha/def :aws.waf/type clojure.core/string?)
 (clojure.spec.alpha/def
  :aws.waf/field-to-match
  (clojure.spec.alpha/keys :req [:aws.waf/type] :opt [:aws.waf/data])))
(do
 (clojure.spec.alpha/def :aws.waf/data clojure.core/string?)
 (clojure.spec.alpha/def :aws.waf/type clojure.core/string?)
 (clojure.spec.alpha/def
  :aws.waf/field-to-match
  (clojure.spec.alpha/keys :req [:aws.waf/type] :opt [:aws.waf/data])))
