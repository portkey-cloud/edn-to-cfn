(ns aws.s3
  "AUTOGENERATED clojure.spec definitions"
  (:require [clojure.spec.alpha]
            [edn-to-cfn.specs.cfn :as cfn-specs]))

(do
 (clojure.core/defmethod
  cfn-specs/resource-type-spec
  :aws.s3/bucket-policy
  [___16342__auto__]
  (clojure.spec.alpha/keys
   :req
   [:aws.s3/bucket :aws.s3/policy-document]
   :opt
   []))
 (clojure.spec.alpha/def :aws.s3/bucket clojure.core/string?)
 (clojure.spec.alpha/def :aws.s3/policy-document clojure.core/any?))
(do
 (clojure.core/defmethod
  cfn-specs/resource-type-spec
  :aws.s3/bucket
  [___16342__auto__]
  (clojure.spec.alpha/keys
   :req
   []
   :opt
   [:aws.s3/versioning-configuration
    :aws.s3/inventory-configurations
    :aws.s3/analytics-configurations
    :aws.s3/replication-configuration
    :aws.s3/tags
    :aws.s3/bucket-encryption
    :aws.s3/access-control
    :aws.s3/metrics-configurations
    :aws.s3/lifecycle-configuration
    :aws.s3/logging-configuration
    :aws.s3/website-configuration
    :aws.s3/notification-configuration
    :aws.s3/bucket-name
    :aws.s3/cors-configuration
    :aws.s3/accelerate-configuration]))
 (clojure.spec.alpha/def :aws.s3/access-control clojure.core/string?)
 (clojure.spec.alpha/def :aws.s3/bucket-name clojure.core/string?))
(do
 (clojure.spec.alpha/def
  :aws.s3/notification-configuration
  (clojure.spec.alpha/keys
   :req
   []
   :opt
   [:aws.s3/lambda-configurations
    :aws.s3/queue-configurations
    :aws.s3/topic-configurations])))
(do
 (clojure.spec.alpha/def :aws.s3/id clojure.core/string?)
 (clojure.spec.alpha/def :aws.s3/prefix clojure.core/string?)
 (clojure.spec.alpha/def
  :aws.s3/metrics-configuration
  (clojure.spec.alpha/keys
   :req
   [:aws.s3/id]
   :opt
   [:aws.s3/prefix :aws.s3/tag-filters])))
(do
 (clojure.spec.alpha/def
  :aws.s3/replica-kms-key-id
  clojure.core/string?)
 (clojure.spec.alpha/def
  :aws.s3/encryption-configuration
  (clojure.spec.alpha/keys :req [:aws.s3/replica-kms-key-id] :opt [])))
(do
 (clojure.spec.alpha/def
  :aws.s3/s3-key-filter
  (clojure.spec.alpha/keys :req [:aws.s3/rules] :opt [])))
(do
 (clojure.spec.alpha/def
  :aws.s3/routing-rule
  (clojure.spec.alpha/keys
   :req
   [:aws.s3/redirect-rule]
   :opt
   [:aws.s3/routing-rule-condition])))
(do
 (clojure.spec.alpha/def :aws.s3/status clojure.core/string?)
 (clojure.spec.alpha/def
  :aws.s3/sse-kms-encrypted-objects
  (clojure.spec.alpha/keys :req [:aws.s3/status] :opt [])))
(do
 (clojure.spec.alpha/def
  :aws.s3/kms-master-key-id
  clojure.core/string?)
 (clojure.spec.alpha/def :aws.s3/sse-algorithm clojure.core/string?)
 (clojure.spec.alpha/def
  :aws.s3/server-side-encryption-by-default
  (clojure.spec.alpha/keys
   :req
   [:aws.s3/sse-algorithm]
   :opt
   [:aws.s3/kms-master-key-id])))
(do
 (clojure.spec.alpha/def
  :aws.s3/notification-filter
  (clojure.spec.alpha/keys :req [:aws.s3/s3-key] :opt [])))
(do
 (clojure.spec.alpha/def
  :aws.s3/source-selection-criteria
  (clojure.spec.alpha/keys
   :req
   [:aws.s3/sse-kms-encrypted-objects]
   :opt
   [])))
(do
 (clojure.spec.alpha/def :aws.s3/id clojure.core/string?)
 (clojure.spec.alpha/def :aws.s3/prefix clojure.core/string?)
 (clojure.spec.alpha/def :aws.s3/status clojure.core/string?)
 (clojure.spec.alpha/def
  :aws.s3/replication-rule
  (clojure.spec.alpha/keys
   :req
   [:aws.s3/destination :aws.s3/prefix :aws.s3/status]
   :opt
   [:aws.s3/id :aws.s3/source-selection-criteria])))
(do
 (clojure.spec.alpha/def
  :aws.s3/acceleration-status
  clojure.core/string?)
 (clojure.spec.alpha/def
  :aws.s3/accelerate-configuration
  (clojure.spec.alpha/keys :req [:aws.s3/acceleration-status] :opt [])))
(do
 (clojure.spec.alpha/def :aws.s3/storage-class clojure.core/string?)
 (clojure.spec.alpha/def :aws.s3/transition-date clojure.core/inst?)
 (clojure.spec.alpha/def
  :aws.s3/transition-in-days
  clojure.core/integer?)
 (clojure.spec.alpha/def
  :aws.s3/transition
  (clojure.spec.alpha/keys
   :req
   [:aws.s3/storage-class]
   :opt
   [:aws.s3/transition-date :aws.s3/transition-in-days])))
(do
 (clojure.spec.alpha/def :aws.s3/name clojure.core/string?)
 (clojure.spec.alpha/def :aws.s3/value clojure.core/string?)
 (clojure.spec.alpha/def
  :aws.s3/filter-rule
  (clojure.spec.alpha/keys :req [:aws.s3/name :aws.s3/value] :opt [])))
(do
 (clojure.spec.alpha/def
  :aws.s3/http-error-code-returned-equals
  clojure.core/string?)
 (clojure.spec.alpha/def
  :aws.s3/key-prefix-equals
  clojure.core/string?)
 (clojure.spec.alpha/def
  :aws.s3/routing-rule-condition
  (clojure.spec.alpha/keys
   :req
   []
   :opt
   [:aws.s3/http-error-code-returned-equals
    :aws.s3/key-prefix-equals])))
(do
 (clojure.spec.alpha/def
  :aws.s3/output-schema-version
  clojure.core/string?)
 (clojure.spec.alpha/def
  :aws.s3/data-export
  (clojure.spec.alpha/keys
   :req
   [:aws.s3/destination :aws.s3/output-schema-version]
   :opt
   [])))
(do
 (clojure.spec.alpha/def
  :aws.s3/storage-class-analysis
  (clojure.spec.alpha/keys :req [] :opt [:aws.s3/data-export])))
(do
 (clojure.spec.alpha/def :aws.s3/enabled clojure.core/boolean?)
 (clojure.spec.alpha/def :aws.s3/id clojure.core/string?)
 (clojure.spec.alpha/def
  :aws.s3/included-object-versions
  clojure.core/string?)
 (clojure.spec.alpha/def :aws.s3/prefix clojure.core/string?)
 (clojure.spec.alpha/def
  :aws.s3/schedule-frequency
  clojure.core/string?)
 (clojure.spec.alpha/def
  :aws.s3/inventory-configuration
  (clojure.spec.alpha/keys
   :req
   [:aws.s3/destination
    :aws.s3/enabled
    :aws.s3/id
    :aws.s3/included-object-versions
    :aws.s3/schedule-frequency]
   :opt
   [:aws.s3/optional-fields :aws.s3/prefix])))
(do
 (clojure.spec.alpha/def :aws.s3/owner clojure.core/string?)
 (clojure.spec.alpha/def
  :aws.s3/access-control-translation
  (clojure.spec.alpha/keys :req [:aws.s3/owner] :opt [])))
(do
 (clojure.spec.alpha/def :aws.s3/role clojure.core/string?)
 (clojure.spec.alpha/def
  :aws.s3/replication-configuration
  (clojure.spec.alpha/keys :req [:aws.s3/role :aws.s3/rules] :opt [])))
(do
 (clojure.spec.alpha/def :aws.s3/key clojure.core/string?)
 (clojure.spec.alpha/def :aws.s3/value clojure.core/string?)
 (clojure.spec.alpha/def
  :aws.s3/tag-filter
  (clojure.spec.alpha/keys :req [:aws.s3/key :aws.s3/value] :opt [])))
(do
 (clojure.spec.alpha/def :aws.s3/host-name clojure.core/string?)
 (clojure.spec.alpha/def
  :aws.s3/http-redirect-code
  clojure.core/string?)
 (clojure.spec.alpha/def :aws.s3/protocol clojure.core/string?)
 (clojure.spec.alpha/def
  :aws.s3/replace-key-prefix-with
  clojure.core/string?)
 (clojure.spec.alpha/def :aws.s3/replace-key-with clojure.core/string?)
 (clojure.spec.alpha/def
  :aws.s3/redirect-rule
  (clojure.spec.alpha/keys
   :req
   []
   :opt
   [:aws.s3/host-name
    :aws.s3/http-redirect-code
    :aws.s3/protocol
    :aws.s3/replace-key-prefix-with
    :aws.s3/replace-key-with])))
(do
 (clojure.spec.alpha/def
  :aws.s3/lifecycle-configuration
  (clojure.spec.alpha/keys :req [:aws.s3/rules] :opt [])))
(do
 (clojure.spec.alpha/def :aws.s3/error-document clojure.core/string?)
 (clojure.spec.alpha/def :aws.s3/index-document clojure.core/string?)
 (clojure.spec.alpha/def
  :aws.s3/website-configuration
  (clojure.spec.alpha/keys
   :req
   []
   :opt
   [:aws.s3/error-document
    :aws.s3/index-document
    :aws.s3/redirect-all-requests-to
    :aws.s3/routing-rules])))
(do
 (clojure.spec.alpha/def :aws.s3/account clojure.core/string?)
 (clojure.spec.alpha/def :aws.s3/bucket clojure.core/string?)
 (clojure.spec.alpha/def :aws.s3/storage-class clojure.core/string?)
 (clojure.spec.alpha/def
  :aws.s3/replication-destination
  (clojure.spec.alpha/keys
   :req
   [:aws.s3/bucket]
   :opt
   [:aws.s3/access-control-translation
    :aws.s3/account
    :aws.s3/encryption-configuration
    :aws.s3/storage-class])))
(do
 (clojure.spec.alpha/def :aws.s3/storage-class clojure.core/string?)
 (clojure.spec.alpha/def
  :aws.s3/transition-in-days
  clojure.core/integer?)
 (clojure.spec.alpha/def
  :aws.s3/noncurrent-version-transition
  (clojure.spec.alpha/keys
   :req
   [:aws.s3/storage-class :aws.s3/transition-in-days]
   :opt
   [])))
(do
 (clojure.spec.alpha/def :aws.s3/status clojure.core/string?)
 (clojure.spec.alpha/def
  :aws.s3/versioning-configuration
  (clojure.spec.alpha/keys :req [:aws.s3/status] :opt [])))
(do
 (clojure.spec.alpha/def
  :aws.s3/destination-bucket-name
  clojure.core/string?)
 (clojure.spec.alpha/def :aws.s3/log-file-prefix clojure.core/string?)
 (clojure.spec.alpha/def
  :aws.s3/logging-configuration
  (clojure.spec.alpha/keys
   :req
   []
   :opt
   [:aws.s3/destination-bucket-name :aws.s3/log-file-prefix])))
(do
 (clojure.spec.alpha/def :aws.s3/id clojure.core/string?)
 (clojure.spec.alpha/def :aws.s3/max-age clojure.core/integer?)
 (clojure.spec.alpha/def
  :aws.s3/cors-rule
  (clojure.spec.alpha/keys
   :req
   [:aws.s3/allowed-methods :aws.s3/allowed-origins]
   :opt
   [:aws.s3/allowed-headers
    :aws.s3/exposed-headers
    :aws.s3/id
    :aws.s3/max-age])))
(do
 (clojure.spec.alpha/def
  :aws.s3/days-after-initiation
  clojure.core/integer?)
 (clojure.spec.alpha/def
  :aws.s3/abort-incomplete-multipart-upload
  (clojure.spec.alpha/keys
   :req
   [:aws.s3/days-after-initiation]
   :opt
   [])))
(do
 (clojure.spec.alpha/def
  :aws.s3/cors-configuration
  (clojure.spec.alpha/keys :req [:aws.s3/cors-rules] :opt [])))
(do
 (clojure.spec.alpha/def
  :aws.s3/bucket-account-id
  clojure.core/string?)
 (clojure.spec.alpha/def :aws.s3/bucket-arn clojure.core/string?)
 (clojure.spec.alpha/def :aws.s3/format clojure.core/string?)
 (clojure.spec.alpha/def :aws.s3/prefix clojure.core/string?)
 (clojure.spec.alpha/def
  :aws.s3/destination
  (clojure.spec.alpha/keys
   :req
   [:aws.s3/bucket-arn :aws.s3/format]
   :opt
   [:aws.s3/bucket-account-id :aws.s3/prefix])))
(do
 (clojure.spec.alpha/def
  :aws.s3/bucket-encryption
  (clojure.spec.alpha/keys
   :req
   [:aws.s3/server-side-encryption-configuration]
   :opt
   [])))
(do
 (clojure.spec.alpha/def :aws.s3/event clojure.core/string?)
 (clojure.spec.alpha/def :aws.s3/queue clojure.core/string?)
 (clojure.spec.alpha/def
  :aws.s3/queue-configuration
  (clojure.spec.alpha/keys
   :req
   [:aws.s3/event :aws.s3/queue]
   :opt
   [:aws.s3/filter])))
(do
 (clojure.spec.alpha/def :aws.s3/host-name clojure.core/string?)
 (clojure.spec.alpha/def :aws.s3/protocol clojure.core/string?)
 (clojure.spec.alpha/def
  :aws.s3/redirect-all-requests-to
  (clojure.spec.alpha/keys
   :req
   [:aws.s3/host-name]
   :opt
   [:aws.s3/protocol])))
(do
 (clojure.spec.alpha/def :aws.s3/event clojure.core/string?)
 (clojure.spec.alpha/def :aws.s3/topic clojure.core/string?)
 (clojure.spec.alpha/def
  :aws.s3/topic-configuration
  (clojure.spec.alpha/keys
   :req
   [:aws.s3/event :aws.s3/topic]
   :opt
   [:aws.s3/filter])))
(do
 (clojure.spec.alpha/def :aws.s3/id clojure.core/string?)
 (clojure.spec.alpha/def :aws.s3/prefix clojure.core/string?)
 (clojure.spec.alpha/def
  :aws.s3/analytics-configuration
  (clojure.spec.alpha/keys
   :req
   [:aws.s3/id :aws.s3/storage-class-analysis]
   :opt
   [:aws.s3/prefix :aws.s3/tag-filters])))
(do
 (clojure.spec.alpha/def
  :aws.s3/server-side-encryption-rule
  (clojure.spec.alpha/keys
   :req
   []
   :opt
   [:aws.s3/server-side-encryption-by-default])))
(do
 (clojure.spec.alpha/def :aws.s3/event clojure.core/string?)
 (clojure.spec.alpha/def :aws.s3/function clojure.core/string?)
 (clojure.spec.alpha/def
  :aws.s3/lambda-configuration
  (clojure.spec.alpha/keys
   :req
   [:aws.s3/event :aws.s3/function]
   :opt
   [:aws.s3/filter])))
(do
 (clojure.spec.alpha/def :aws.s3/prefix clojure.core/string?)
 (clojure.spec.alpha/def
  :aws.s3/noncurrent-version-expiration-in-days
  clojure.core/integer?)
 (clojure.spec.alpha/def
  :aws.s3/expiration-in-days
  clojure.core/integer?)
 (clojure.spec.alpha/def :aws.s3/status clojure.core/string?)
 (clojure.spec.alpha/def :aws.s3/expiration-date clojure.core/inst?)
 (clojure.spec.alpha/def :aws.s3/id clojure.core/string?)
 (clojure.spec.alpha/def
  :aws.s3/rule
  (clojure.spec.alpha/keys
   :req
   [:aws.s3/status]
   :opt
   [:aws.s3/prefix
    :aws.s3/transition
    :aws.s3/noncurrent-version-expiration-in-days
    :aws.s3/expiration-in-days
    :aws.s3/transitions
    :aws.s3/tag-filters
    :aws.s3/expiration-date
    :aws.s3/abort-incomplete-multipart-upload
    :aws.s3/noncurrent-version-transitions
    :aws.s3/id
    :aws.s3/noncurrent-version-transition])))
