(ns aws.elastic-load-balancing-v2
  "AUTOGENERATED clojure.spec definitions"
  (:require [clojure.spec.alpha]))

(clojure.spec.alpha/def
 :aws.elastic-load-balancing-v2/listener-rule
 (clojure.spec.alpha/keys
  :req
  [:aws.elastic-load-balancing-v2/actions
   :aws.elastic-load-balancing-v2/conditions
   :aws.elastic-load-balancing-v2/listener-arn
   :aws.elastic-load-balancing-v2/priority]
  :opt
  []))
(clojure.spec.alpha/def
 :aws.elastic-load-balancing-v2/load-balancer
 (clojure.spec.alpha/keys
  :req
  []
  :opt
  [:aws.elastic-load-balancing-v2/load-balancer-attributes
   :aws.elastic-load-balancing-v2/type
   :aws.elastic-load-balancing-v2/subnets
   :aws.elastic-load-balancing-v2/security-groups
   :aws.elastic-load-balancing-v2/subnet-mappings
   :aws.elastic-load-balancing-v2/tags
   :aws.elastic-load-balancing-v2/ip-address-type
   :aws.elastic-load-balancing-v2/scheme
   :aws.elastic-load-balancing-v2/name]))
(clojure.spec.alpha/def
 :aws.elastic-load-balancing-v2/listener-certificate
 (clojure.spec.alpha/keys
  :req
  [:aws.elastic-load-balancing-v2/certificates
   :aws.elastic-load-balancing-v2/listener-arn]
  :opt
  []))
(clojure.spec.alpha/def
 :aws.elastic-load-balancing-v2/target-group
 (clojure.spec.alpha/keys
  :req
  [:aws.elastic-load-balancing-v2/protocol
   :aws.elastic-load-balancing-v2/port
   :aws.elastic-load-balancing-v2/vpc-id]
  :opt
  [:aws.elastic-load-balancing-v2/healthy-threshold-count
   :aws.elastic-load-balancing-v2/health-check-timeout-seconds
   :aws.elastic-load-balancing-v2/target-type
   :aws.elastic-load-balancing-v2/tags
   :aws.elastic-load-balancing-v2/unhealthy-threshold-count
   :aws.elastic-load-balancing-v2/health-check-interval-seconds
   :aws.elastic-load-balancing-v2/health-check-port
   :aws.elastic-load-balancing-v2/health-check-protocol
   :aws.elastic-load-balancing-v2/targets
   :aws.elastic-load-balancing-v2/name
   :aws.elastic-load-balancing-v2/matcher
   :aws.elastic-load-balancing-v2/target-group-attributes
   :aws.elastic-load-balancing-v2/health-check-path]))
(clojure.spec.alpha/def
 :aws.elastic-load-balancing-v2/listener
 (clojure.spec.alpha/keys
  :req
  [:aws.elastic-load-balancing-v2/default-actions
   :aws.elastic-load-balancing-v2/load-balancer-arn
   :aws.elastic-load-balancing-v2/port
   :aws.elastic-load-balancing-v2/protocol]
  :opt
  [:aws.elastic-load-balancing-v2/certificates
   :aws.elastic-load-balancing-v2/ssl-policy]))
(do
 (clojure.spec.alpha/def
  :aws.elastic-load-balancing-v2/availability-zone
  clojure.core/string?)
 (clojure.spec.alpha/def
  :aws.elastic-load-balancing-v2/id
  clojure.core/string?)
 (clojure.spec.alpha/def
  :aws.elastic-load-balancing-v2/port
  clojure.core/integer?)
 (clojure.spec.alpha/def
  :aws.elastic-load-balancing-v2/target-description
  (clojure.spec.alpha/keys
   :req
   [:aws.elastic-load-balancing-v2/id]
   :opt
   [:aws.elastic-load-balancing-v2/availability-zone
    :aws.elastic-load-balancing-v2/port])))
(do
 (clojure.spec.alpha/def
  :aws.elastic-load-balancing-v2/certificate-arn
  clojure.core/string?)
 (clojure.spec.alpha/def
  :aws.elastic-load-balancing-v2/certificate
  (clojure.spec.alpha/keys
   :req
   []
   :opt
   [:aws.elastic-load-balancing-v2/certificate-arn])))
(do
 (clojure.spec.alpha/def
  :aws.elastic-load-balancing-v2/certificate-arn
  clojure.core/string?)
 (clojure.spec.alpha/def
  :aws.elastic-load-balancing-v2/certificate
  (clojure.spec.alpha/keys
   :req
   []
   :opt
   [:aws.elastic-load-balancing-v2/certificate-arn])))
(do
 (clojure.spec.alpha/def
  :aws.elastic-load-balancing-v2/field
  clojure.core/string?)
 (clojure.spec.alpha/def
  :aws.elastic-load-balancing-v2/rule-condition
  (clojure.spec.alpha/keys
   :req
   []
   :opt
   [:aws.elastic-load-balancing-v2/field
    :aws.elastic-load-balancing-v2/values])))
(do
 (clojure.spec.alpha/def
  :aws.elastic-load-balancing-v2/http-code
  clojure.core/string?)
 (clojure.spec.alpha/def
  :aws.elastic-load-balancing-v2/matcher
  (clojure.spec.alpha/keys
   :req
   [:aws.elastic-load-balancing-v2/http-code]
   :opt
   [])))
(do
 (clojure.spec.alpha/def
  :aws.elastic-load-balancing-v2/key
  clojure.core/string?)
 (clojure.spec.alpha/def
  :aws.elastic-load-balancing-v2/value
  clojure.core/string?)
 (clojure.spec.alpha/def
  :aws.elastic-load-balancing-v2/target-group-attribute
  (clojure.spec.alpha/keys
   :req
   []
   :opt
   [:aws.elastic-load-balancing-v2/key
    :aws.elastic-load-balancing-v2/value])))
(do
 (clojure.spec.alpha/def
  :aws.elastic-load-balancing-v2/allocation-id
  clojure.core/string?)
 (clojure.spec.alpha/def
  :aws.elastic-load-balancing-v2/subnet-id
  clojure.core/string?)
 (clojure.spec.alpha/def
  :aws.elastic-load-balancing-v2/subnet-mapping
  (clojure.spec.alpha/keys
   :req
   [:aws.elastic-load-balancing-v2/allocation-id
    :aws.elastic-load-balancing-v2/subnet-id]
   :opt
   [])))
(do
 (clojure.spec.alpha/def
  :aws.elastic-load-balancing-v2/key
  clojure.core/string?)
 (clojure.spec.alpha/def
  :aws.elastic-load-balancing-v2/value
  clojure.core/string?)
 (clojure.spec.alpha/def
  :aws.elastic-load-balancing-v2/load-balancer-attribute
  (clojure.spec.alpha/keys
   :req
   []
   :opt
   [:aws.elastic-load-balancing-v2/key
    :aws.elastic-load-balancing-v2/value])))
(do
 (clojure.spec.alpha/def
  :aws.elastic-load-balancing-v2/target-group-arn
  clojure.core/string?)
 (clojure.spec.alpha/def
  :aws.elastic-load-balancing-v2/type
  clojure.core/string?)
 (clojure.spec.alpha/def
  :aws.elastic-load-balancing-v2/action
  (clojure.spec.alpha/keys
   :req
   [:aws.elastic-load-balancing-v2/target-group-arn
    :aws.elastic-load-balancing-v2/type]
   :opt
   [])))
(do
 (clojure.spec.alpha/def
  :aws.elastic-load-balancing-v2/target-group-arn
  clojure.core/string?)
 (clojure.spec.alpha/def
  :aws.elastic-load-balancing-v2/type
  clojure.core/string?)
 (clojure.spec.alpha/def
  :aws.elastic-load-balancing-v2/action
  (clojure.spec.alpha/keys
   :req
   [:aws.elastic-load-balancing-v2/target-group-arn
    :aws.elastic-load-balancing-v2/type]
   :opt
   [])))
