(ns aws.game-lift
  "AUTOGENERATED clojure.spec definitions"
  (:require [clojure.spec.alpha]))

(clojure.spec.alpha/def
 :aws.game-lift/alias
 (clojure.spec.alpha/keys
  :req
  [:aws.game-lift/name :aws.game-lift/routing-strategy]
  :opt
  [:aws.game-lift/description]))
(clojure.spec.alpha/def
 :aws.game-lift/fleet
 (clojure.spec.alpha/keys
  :req
  [:aws.game-lift/ec2-instance-type
   :aws.game-lift/server-launch-path
   :aws.game-lift/desired-ec2-instances
   :aws.game-lift/name
   :aws.game-lift/build-id]
  :opt
  [:aws.game-lift/ec2-inbound-permissions
   :aws.game-lift/description
   :aws.game-lift/server-launch-parameters
   :aws.game-lift/min-size
   :aws.game-lift/max-size
   :aws.game-lift/log-paths]))
(clojure.spec.alpha/def
 :aws.game-lift/build
 (clojure.spec.alpha/keys
  :req
  []
  :opt
  [:aws.game-lift/name
   :aws.game-lift/storage-location
   :aws.game-lift/version]))
(do
 (clojure.spec.alpha/def :aws.game-lift/bucket clojure.core/string?)
 (clojure.spec.alpha/def :aws.game-lift/key clojure.core/string?)
 (clojure.spec.alpha/def :aws.game-lift/role-arn clojure.core/string?)
 (clojure.spec.alpha/def
  :aws.game-lift/s3-location
  (clojure.spec.alpha/keys
   :req
   [:aws.game-lift/bucket :aws.game-lift/key :aws.game-lift/role-arn]
   :opt
   [])))
(do
 (clojure.spec.alpha/def
  :aws.game-lift/from-port
  clojure.core/integer?)
 (clojure.spec.alpha/def :aws.game-lift/ip-range clojure.core/string?)
 (clojure.spec.alpha/def :aws.game-lift/protocol clojure.core/string?)
 (clojure.spec.alpha/def :aws.game-lift/to-port clojure.core/integer?)
 (clojure.spec.alpha/def
  :aws.game-lift/ip-permission
  (clojure.spec.alpha/keys
   :req
   [:aws.game-lift/from-port
    :aws.game-lift/ip-range
    :aws.game-lift/protocol
    :aws.game-lift/to-port]
   :opt
   [])))
(do
 (clojure.spec.alpha/def :aws.game-lift/fleet-id clojure.core/string?)
 (clojure.spec.alpha/def :aws.game-lift/message clojure.core/string?)
 (clojure.spec.alpha/def :aws.game-lift/type clojure.core/string?)
 (clojure.spec.alpha/def
  :aws.game-lift/routing-strategy
  (clojure.spec.alpha/keys
   :req
   [:aws.game-lift/type]
   :opt
   [:aws.game-lift/fleet-id :aws.game-lift/message])))
