(ns aws.emr
  "AUTOGENERATED clojure.spec definitions"
  (:require [clojure.spec.alpha]))

(clojure.spec.alpha/def
 :aws.emr/instance-fleet-config
 (clojure.spec.alpha/keys
  :req
  [:aws.emr/cluster-id :aws.emr/instance-fleet-type]
  :opt
  [:aws.emr/instance-type-configs
   :aws.emr/launch-specifications
   :aws.emr/name
   :aws.emr/target-on-demand-capacity
   :aws.emr/target-spot-capacity]))
(clojure.spec.alpha/def
 :aws.emr/instance-group-config
 (clojure.spec.alpha/keys
  :req
  [:aws.emr/instance-role
   :aws.emr/instance-count
   :aws.emr/instance-type
   :aws.emr/job-flow-id]
  :opt
  [:aws.emr/bid-price
   :aws.emr/ebs-configuration
   :aws.emr/configurations
   :aws.emr/auto-scaling-policy
   :aws.emr/name
   :aws.emr/market]))
(clojure.spec.alpha/def
 :aws.emr/cluster
 (clojure.spec.alpha/keys
  :req
  [:aws.emr/service-role
   :aws.emr/job-flow-role
   :aws.emr/name
   :aws.emr/instances]
  :opt
  [:aws.emr/auto-scaling-role
   :aws.emr/custom-ami-id
   :aws.emr/log-uri
   :aws.emr/scale-down-behavior
   :aws.emr/configurations
   :aws.emr/tags
   :aws.emr/visible-to-all-users
   :aws.emr/additional-info
   :aws.emr/applications
   :aws.emr/ebs-root-volume-size
   :aws.emr/security-configuration
   :aws.emr/release-label
   :aws.emr/bootstrap-actions]))
(clojure.spec.alpha/def
 :aws.emr/security-configuration
 (clojure.spec.alpha/keys
  :req
  [:aws.emr/security-configuration]
  :opt
  [:aws.emr/name]))
(clojure.spec.alpha/def
 :aws.emr/step
 (clojure.spec.alpha/keys
  :req
  [:aws.emr/action-on-failure
   :aws.emr/hadoop-jar-step
   :aws.emr/job-flow-id
   :aws.emr/name]
  :opt
  []))
(do
 (clojure.spec.alpha/def
  :aws.emr/availability-zone
  clojure.core/string?)
 (clojure.spec.alpha/def
  :aws.emr/placement-type
  (clojure.spec.alpha/keys :req [:aws.emr/availability-zone] :opt [])))
(do
 (clojure.spec.alpha/def :aws.emr/description clojure.core/string?)
 (clojure.spec.alpha/def :aws.emr/name clojure.core/string?)
 (clojure.spec.alpha/def
  :aws.emr/scaling-rule
  (clojure.spec.alpha/keys
   :req
   [:aws.emr/action :aws.emr/name :aws.emr/trigger]
   :opt
   [:aws.emr/description])))
(do
 (clojure.spec.alpha/def :aws.emr/bid-price clojure.core/string?)
 (clojure.spec.alpha/def
  :aws.emr/bid-price-as-percentage-of-on-demand-price
  clojure.core/double?)
 (clojure.spec.alpha/def :aws.emr/instance-type clojure.core/string?)
 (clojure.spec.alpha/def
  :aws.emr/weighted-capacity
  clojure.core/integer?)
 (clojure.spec.alpha/def
  :aws.emr/instance-type-config
  (clojure.spec.alpha/keys
   :req
   [:aws.emr/instance-type]
   :opt
   [:aws.emr/bid-price
    :aws.emr/bid-price-as-percentage-of-on-demand-price
    :aws.emr/configurations
    :aws.emr/ebs-configuration
    :aws.emr/weighted-capacity])))
(do
 (clojure.spec.alpha/def :aws.emr/iops clojure.core/integer?)
 (clojure.spec.alpha/def :aws.emr/size-in-gb clojure.core/integer?)
 (clojure.spec.alpha/def :aws.emr/volume-type clojure.core/string?)
 (clojure.spec.alpha/def
  :aws.emr/volume-specification
  (clojure.spec.alpha/keys
   :req
   [:aws.emr/size-in-gb :aws.emr/volume-type]
   :opt
   [:aws.emr/iops])))
(do
 (clojure.spec.alpha/def
  :aws.emr/volumes-per-instance
  clojure.core/integer?)
 (clojure.spec.alpha/def
  :aws.emr/ebs-block-device-config
  (clojure.spec.alpha/keys
   :req
   [:aws.emr/volume-specification]
   :opt
   [:aws.emr/volumes-per-instance])))
(do
 (clojure.spec.alpha/def :aws.emr/adjustment-type clojure.core/string?)
 (clojure.spec.alpha/def :aws.emr/cool-down clojure.core/integer?)
 (clojure.spec.alpha/def
  :aws.emr/scaling-adjustment
  clojure.core/integer?)
 (clojure.spec.alpha/def
  :aws.emr/simple-scaling-policy-configuration
  (clojure.spec.alpha/keys
   :req
   [:aws.emr/scaling-adjustment]
   :opt
   [:aws.emr/adjustment-type :aws.emr/cool-down])))
(do
 (clojure.spec.alpha/def :aws.emr/name clojure.core/string?)
 (clojure.spec.alpha/def :aws.emr/version clojure.core/string?)
 (clojure.spec.alpha/def
  :aws.emr/application
  (clojure.spec.alpha/keys
   :req
   []
   :opt
   [:aws.emr/additional-info
    :aws.emr/args
    :aws.emr/name
    :aws.emr/version])))
(do
 (clojure.spec.alpha/def :aws.emr/bid-price clojure.core/string?)
 (clojure.spec.alpha/def
  :aws.emr/bid-price-as-percentage-of-on-demand-price
  clojure.core/double?)
 (clojure.spec.alpha/def :aws.emr/instance-type clojure.core/string?)
 (clojure.spec.alpha/def
  :aws.emr/weighted-capacity
  clojure.core/integer?)
 (clojure.spec.alpha/def
  :aws.emr/instance-type-config
  (clojure.spec.alpha/keys
   :req
   [:aws.emr/instance-type]
   :opt
   [:aws.emr/bid-price
    :aws.emr/bid-price-as-percentage-of-on-demand-price
    :aws.emr/configurations
    :aws.emr/ebs-configuration
    :aws.emr/weighted-capacity])))
(do
 (clojure.spec.alpha/def
  :aws.emr/emr-managed-slave-security-group
  clojure.core/string?)
 (clojure.spec.alpha/def :aws.emr/hadoop-version clojure.core/string?)
 (clojure.spec.alpha/def :aws.emr/ec2-key-name clojure.core/string?)
 (clojure.spec.alpha/def
  :aws.emr/service-access-security-group
  clojure.core/string?)
 (clojure.spec.alpha/def
  :aws.emr/emr-managed-master-security-group
  clojure.core/string?)
 (clojure.spec.alpha/def :aws.emr/ec2-subnet-id clojure.core/string?)
 (clojure.spec.alpha/def
  :aws.emr/termination-protected
  clojure.core/boolean?)
 (clojure.spec.alpha/def
  :aws.emr/job-flow-instances-config
  (clojure.spec.alpha/keys
   :req
   []
   :opt
   [:aws.emr/emr-managed-slave-security-group
    :aws.emr/core-instance-fleet
    :aws.emr/master-instance-fleet
    :aws.emr/placement
    :aws.emr/hadoop-version
    :aws.emr/core-instance-group
    :aws.emr/ec2-key-name
    :aws.emr/service-access-security-group
    :aws.emr/additional-slave-security-groups
    :aws.emr/emr-managed-master-security-group
    :aws.emr/ec2-subnet-id
    :aws.emr/master-instance-group
    :aws.emr/termination-protected
    :aws.emr/additional-master-security-groups])))
(do
 (clojure.spec.alpha/def
  :aws.emr/instance-fleet-provisioning-specifications
  (clojure.spec.alpha/keys :req [:aws.emr/spot-specification] :opt [])))
(do
 (clojure.spec.alpha/def :aws.emr/iops clojure.core/integer?)
 (clojure.spec.alpha/def :aws.emr/size-in-gb clojure.core/integer?)
 (clojure.spec.alpha/def :aws.emr/volume-type clojure.core/string?)
 (clojure.spec.alpha/def
  :aws.emr/volume-specification
  (clojure.spec.alpha/keys
   :req
   [:aws.emr/size-in-gb :aws.emr/volume-type]
   :opt
   [:aws.emr/iops])))
(do
 (clojure.spec.alpha/def :aws.emr/unit clojure.core/string?)
 (clojure.spec.alpha/def :aws.emr/period clojure.core/integer?)
 (clojure.spec.alpha/def :aws.emr/threshold clojure.core/double?)
 (clojure.spec.alpha/def
  :aws.emr/comparison-operator
  clojure.core/string?)
 (clojure.spec.alpha/def :aws.emr/namespace clojure.core/string?)
 (clojure.spec.alpha/def :aws.emr/metric-name clojure.core/string?)
 (clojure.spec.alpha/def
  :aws.emr/evaluation-periods
  clojure.core/integer?)
 (clojure.spec.alpha/def :aws.emr/statistic clojure.core/string?)
 (clojure.spec.alpha/def
  :aws.emr/cloud-watch-alarm-definition
  (clojure.spec.alpha/keys
   :req
   [:aws.emr/period
    :aws.emr/threshold
    :aws.emr/comparison-operator
    :aws.emr/metric-name]
   :opt
   [:aws.emr/unit
    :aws.emr/dimensions
    :aws.emr/namespace
    :aws.emr/evaluation-periods
    :aws.emr/statistic])))
(do
 (clojure.spec.alpha/def :aws.emr/name clojure.core/string?)
 (clojure.spec.alpha/def
  :aws.emr/bootstrap-action-config
  (clojure.spec.alpha/keys
   :req
   [:aws.emr/name :aws.emr/script-bootstrap-action]
   :opt
   [])))
(do
 (clojure.spec.alpha/def
  :aws.emr/auto-scaling-policy
  (clojure.spec.alpha/keys
   :req
   [:aws.emr/constraints :aws.emr/rules]
   :opt
   [])))
(do
 (clojure.spec.alpha/def :aws.emr/market clojure.core/string?)
 (clojure.spec.alpha/def
  :aws.emr/scaling-action
  (clojure.spec.alpha/keys
   :req
   [:aws.emr/simple-scaling-policy-configuration]
   :opt
   [:aws.emr/market])))
(do
 (clojure.spec.alpha/def
  :aws.emr/volumes-per-instance
  clojure.core/integer?)
 (clojure.spec.alpha/def
  :aws.emr/ebs-block-device-config
  (clojure.spec.alpha/keys
   :req
   [:aws.emr/volume-specification]
   :opt
   [:aws.emr/volumes-per-instance])))
(do
 (clojure.spec.alpha/def :aws.emr/max-capacity clojure.core/integer?)
 (clojure.spec.alpha/def :aws.emr/min-capacity clojure.core/integer?)
 (clojure.spec.alpha/def
  :aws.emr/scaling-constraints
  (clojure.spec.alpha/keys
   :req
   [:aws.emr/max-capacity :aws.emr/min-capacity]
   :opt
   [])))
(do
 (clojure.spec.alpha/def :aws.emr/bid-price clojure.core/string?)
 (clojure.spec.alpha/def :aws.emr/instance-count clojure.core/integer?)
 (clojure.spec.alpha/def :aws.emr/instance-type clojure.core/string?)
 (clojure.spec.alpha/def :aws.emr/market clojure.core/string?)
 (clojure.spec.alpha/def :aws.emr/name clojure.core/string?)
 (clojure.spec.alpha/def
  :aws.emr/instance-group-config
  (clojure.spec.alpha/keys
   :req
   [:aws.emr/instance-count :aws.emr/instance-type]
   :opt
   [:aws.emr/auto-scaling-policy
    :aws.emr/bid-price
    :aws.emr/configurations
    :aws.emr/ebs-configuration
    :aws.emr/market
    :aws.emr/name])))
(do
 (clojure.spec.alpha/def
  :aws.emr/scaling-trigger
  (clojure.spec.alpha/keys
   :req
   [:aws.emr/cloud-watch-alarm-definition]
   :opt
   [])))
(do
 (clojure.spec.alpha/def
  :aws.emr/auto-scaling-policy
  (clojure.spec.alpha/keys
   :req
   [:aws.emr/constraints :aws.emr/rules]
   :opt
   [])))
(do
 (clojure.spec.alpha/def :aws.emr/adjustment-type clojure.core/string?)
 (clojure.spec.alpha/def :aws.emr/cool-down clojure.core/integer?)
 (clojure.spec.alpha/def
  :aws.emr/scaling-adjustment
  clojure.core/integer?)
 (clojure.spec.alpha/def
  :aws.emr/simple-scaling-policy-configuration
  (clojure.spec.alpha/keys
   :req
   [:aws.emr/scaling-adjustment]
   :opt
   [:aws.emr/adjustment-type :aws.emr/cool-down])))
(do
 (clojure.spec.alpha/def :aws.emr/name clojure.core/string?)
 (clojure.spec.alpha/def
  :aws.emr/target-on-demand-capacity
  clojure.core/integer?)
 (clojure.spec.alpha/def
  :aws.emr/target-spot-capacity
  clojure.core/integer?)
 (clojure.spec.alpha/def
  :aws.emr/instance-fleet-config
  (clojure.spec.alpha/keys
   :req
   []
   :opt
   [:aws.emr/instance-type-configs
    :aws.emr/launch-specifications
    :aws.emr/name
    :aws.emr/target-on-demand-capacity
    :aws.emr/target-spot-capacity])))
(do
 (clojure.spec.alpha/def
  :aws.emr/volumes-per-instance
  clojure.core/integer?)
 (clojure.spec.alpha/def
  :aws.emr/ebs-block-device-config
  (clojure.spec.alpha/keys
   :req
   [:aws.emr/volume-specification]
   :opt
   [:aws.emr/volumes-per-instance])))
(do
 (clojure.spec.alpha/def :aws.emr/ebs-optimized clojure.core/boolean?)
 (clojure.spec.alpha/def
  :aws.emr/ebs-configuration
  (clojure.spec.alpha/keys
   :req
   []
   :opt
   [:aws.emr/ebs-block-device-configs :aws.emr/ebs-optimized])))
(do
 (clojure.spec.alpha/def :aws.emr/path clojure.core/string?)
 (clojure.spec.alpha/def
  :aws.emr/script-bootstrap-action-config
  (clojure.spec.alpha/keys :req [:aws.emr/path] :opt [:aws.emr/args])))
(do
 (clojure.spec.alpha/def
  :aws.emr/block-duration-minutes
  clojure.core/integer?)
 (clojure.spec.alpha/def :aws.emr/timeout-action clojure.core/string?)
 (clojure.spec.alpha/def
  :aws.emr/timeout-duration-minutes
  clojure.core/integer?)
 (clojure.spec.alpha/def
  :aws.emr/spot-provisioning-specification
  (clojure.spec.alpha/keys
   :req
   [:aws.emr/timeout-action :aws.emr/timeout-duration-minutes]
   :opt
   [:aws.emr/block-duration-minutes])))
(do
 (clojure.spec.alpha/def :aws.emr/market clojure.core/string?)
 (clojure.spec.alpha/def
  :aws.emr/scaling-action
  (clojure.spec.alpha/keys
   :req
   [:aws.emr/simple-scaling-policy-configuration]
   :opt
   [:aws.emr/market])))
(do
 (clojure.spec.alpha/def
  :aws.emr/block-duration-minutes
  clojure.core/integer?)
 (clojure.spec.alpha/def :aws.emr/timeout-action clojure.core/string?)
 (clojure.spec.alpha/def
  :aws.emr/timeout-duration-minutes
  clojure.core/integer?)
 (clojure.spec.alpha/def
  :aws.emr/spot-provisioning-specification
  (clojure.spec.alpha/keys
   :req
   [:aws.emr/timeout-action :aws.emr/timeout-duration-minutes]
   :opt
   [:aws.emr/block-duration-minutes])))
(do
 (clojure.spec.alpha/def :aws.emr/iops clojure.core/integer?)
 (clojure.spec.alpha/def :aws.emr/size-in-gb clojure.core/integer?)
 (clojure.spec.alpha/def :aws.emr/volume-type clojure.core/string?)
 (clojure.spec.alpha/def
  :aws.emr/volume-specification
  (clojure.spec.alpha/keys
   :req
   [:aws.emr/size-in-gb :aws.emr/volume-type]
   :opt
   [:aws.emr/iops])))
(do
 (clojure.spec.alpha/def :aws.emr/key clojure.core/string?)
 (clojure.spec.alpha/def :aws.emr/value clojure.core/string?)
 (clojure.spec.alpha/def
  :aws.emr/key-value
  (clojure.spec.alpha/keys :req [] :opt [:aws.emr/key :aws.emr/value])))
(do
 (clojure.spec.alpha/def :aws.emr/ebs-optimized clojure.core/boolean?)
 (clojure.spec.alpha/def
  :aws.emr/ebs-configuration
  (clojure.spec.alpha/keys
   :req
   []
   :opt
   [:aws.emr/ebs-block-device-configs :aws.emr/ebs-optimized])))
(do
 (clojure.spec.alpha/def :aws.emr/key clojure.core/string?)
 (clojure.spec.alpha/def :aws.emr/value clojure.core/string?)
 (clojure.spec.alpha/def
  :aws.emr/metric-dimension
  (clojure.spec.alpha/keys :req [:aws.emr/key :aws.emr/value] :opt [])))
(do
 (clojure.spec.alpha/def :aws.emr/ebs-optimized clojure.core/boolean?)
 (clojure.spec.alpha/def
  :aws.emr/ebs-configuration
  (clojure.spec.alpha/keys
   :req
   []
   :opt
   [:aws.emr/ebs-block-device-configs :aws.emr/ebs-optimized])))
(do
 (clojure.spec.alpha/def :aws.emr/description clojure.core/string?)
 (clojure.spec.alpha/def :aws.emr/name clojure.core/string?)
 (clojure.spec.alpha/def
  :aws.emr/scaling-rule
  (clojure.spec.alpha/keys
   :req
   [:aws.emr/action :aws.emr/name :aws.emr/trigger]
   :opt
   [:aws.emr/description])))
(do
 (clojure.spec.alpha/def :aws.emr/key clojure.core/string?)
 (clojure.spec.alpha/def :aws.emr/value clojure.core/string?)
 (clojure.spec.alpha/def
  :aws.emr/metric-dimension
  (clojure.spec.alpha/keys :req [:aws.emr/key :aws.emr/value] :opt [])))
(do
 (clojure.spec.alpha/def :aws.emr/max-capacity clojure.core/integer?)
 (clojure.spec.alpha/def :aws.emr/min-capacity clojure.core/integer?)
 (clojure.spec.alpha/def
  :aws.emr/scaling-constraints
  (clojure.spec.alpha/keys
   :req
   [:aws.emr/max-capacity :aws.emr/min-capacity]
   :opt
   [])))
(do
 (clojure.spec.alpha/def :aws.emr/jar clojure.core/string?)
 (clojure.spec.alpha/def :aws.emr/main-class clojure.core/string?)
 (clojure.spec.alpha/def
  :aws.emr/hadoop-jar-step-config
  (clojure.spec.alpha/keys
   :req
   [:aws.emr/jar]
   :opt
   [:aws.emr/args :aws.emr/main-class :aws.emr/step-properties])))
(do
 (clojure.spec.alpha/def
  :aws.emr/instance-fleet-provisioning-specifications
  (clojure.spec.alpha/keys :req [:aws.emr/spot-specification] :opt [])))
(do
 (clojure.spec.alpha/def :aws.emr/classification clojure.core/string?)
 (clojure.spec.alpha/def
  :aws.emr/configuration
  (clojure.spec.alpha/keys
   :req
   []
   :opt
   [:aws.emr/classification
    :aws.emr/configuration-properties
    :aws.emr/configurations])))
(do
 (clojure.spec.alpha/def :aws.emr/classification clojure.core/string?)
 (clojure.spec.alpha/def
  :aws.emr/configuration
  (clojure.spec.alpha/keys
   :req
   []
   :opt
   [:aws.emr/classification
    :aws.emr/configuration-properties
    :aws.emr/configurations])))
(do
 (clojure.spec.alpha/def :aws.emr/classification clojure.core/string?)
 (clojure.spec.alpha/def
  :aws.emr/configuration
  (clojure.spec.alpha/keys
   :req
   []
   :opt
   [:aws.emr/classification
    :aws.emr/configuration-properties
    :aws.emr/configurations])))
(do
 (clojure.spec.alpha/def :aws.emr/unit clojure.core/string?)
 (clojure.spec.alpha/def :aws.emr/period clojure.core/integer?)
 (clojure.spec.alpha/def :aws.emr/threshold clojure.core/double?)
 (clojure.spec.alpha/def
  :aws.emr/comparison-operator
  clojure.core/string?)
 (clojure.spec.alpha/def :aws.emr/namespace clojure.core/string?)
 (clojure.spec.alpha/def :aws.emr/metric-name clojure.core/string?)
 (clojure.spec.alpha/def
  :aws.emr/evaluation-periods
  clojure.core/integer?)
 (clojure.spec.alpha/def :aws.emr/statistic clojure.core/string?)
 (clojure.spec.alpha/def
  :aws.emr/cloud-watch-alarm-definition
  (clojure.spec.alpha/keys
   :req
   [:aws.emr/period
    :aws.emr/threshold
    :aws.emr/comparison-operator
    :aws.emr/metric-name]
   :opt
   [:aws.emr/unit
    :aws.emr/dimensions
    :aws.emr/namespace
    :aws.emr/evaluation-periods
    :aws.emr/statistic])))
(do
 (clojure.spec.alpha/def
  :aws.emr/scaling-trigger
  (clojure.spec.alpha/keys
   :req
   [:aws.emr/cloud-watch-alarm-definition]
   :opt
   [])))
