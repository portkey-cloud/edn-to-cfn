(ns aws.lambda
  "AUTOGENERATED clojure.spec definitions"
  (:require [clojure.spec.alpha]))

(clojure.spec.alpha/def
 :aws.lambda/event-source-mapping
 (clojure.spec.alpha/keys
  :req
  [:aws.lambda/event-source-arn
   :aws.lambda/function-name
   :aws.lambda/starting-position]
  :opt
  [:aws.lambda/batch-size :aws.lambda/enabled]))
(clojure.spec.alpha/def
 :aws.lambda/permission
 (clojure.spec.alpha/keys
  :req
  [:aws.lambda/action :aws.lambda/function-name :aws.lambda/principal]
  :opt
  [:aws.lambda/event-source-token
   :aws.lambda/source-account
   :aws.lambda/source-arn]))
(clojure.spec.alpha/def
 :aws.lambda/function
 (clojure.spec.alpha/keys
  :req
  [:aws.lambda/handler
   :aws.lambda/runtime
   :aws.lambda/role
   :aws.lambda/code]
  :opt
  [:aws.lambda/reserved-concurrent-executions
   :aws.lambda/tracing-config
   :aws.lambda/function-name
   :aws.lambda/timeout
   :aws.lambda/dead-letter-config
   :aws.lambda/kms-key-arn
   :aws.lambda/tags
   :aws.lambda/memory-size
   :aws.lambda/description
   :aws.lambda/environment
   :aws.lambda/vpc-config]))
(clojure.spec.alpha/def
 :aws.lambda/alias
 (clojure.spec.alpha/keys
  :req
  [:aws.lambda/function-name
   :aws.lambda/function-version
   :aws.lambda/name]
  :opt
  [:aws.lambda/description :aws.lambda/routing-config]))
(clojure.spec.alpha/def
 :aws.lambda/version
 (clojure.spec.alpha/keys
  :req
  [:aws.lambda/function-name]
  :opt
  [:aws.lambda/code-sha256 :aws.lambda/description]))
(do
 (clojure.spec.alpha/def :aws.lambda/s3-bucket clojure.core/string?)
 (clojure.spec.alpha/def :aws.lambda/s3-key clojure.core/string?)
 (clojure.spec.alpha/def
  :aws.lambda/s3-object-version
  clojure.core/string?)
 (clojure.spec.alpha/def :aws.lambda/zip-file clojure.core/string?)
 (clojure.spec.alpha/def
  :aws.lambda/code
  (clojure.spec.alpha/keys
   :req
   []
   :opt
   [:aws.lambda/s3-bucket
    :aws.lambda/s3-key
    :aws.lambda/s3-object-version
    :aws.lambda/zip-file])))
(do
 (clojure.spec.alpha/def
  :aws.lambda/environment
  (clojure.spec.alpha/keys :req [] :opt [:aws.lambda/variables])))
(do
 (clojure.spec.alpha/def
  :aws.lambda/alias-routing-configuration
  (clojure.spec.alpha/keys
   :req
   [:aws.lambda/additional-version-weights]
   :opt
   [])))
(do
 (clojure.spec.alpha/def :aws.lambda/target-arn clojure.core/string?)
 (clojure.spec.alpha/def
  :aws.lambda/dead-letter-config
  (clojure.spec.alpha/keys :req [] :opt [:aws.lambda/target-arn])))
(do
 (clojure.spec.alpha/def
  :aws.lambda/vpc-config
  (clojure.spec.alpha/keys
   :req
   [:aws.lambda/security-group-ids :aws.lambda/subnet-ids]
   :opt
   [])))
(do
 (clojure.spec.alpha/def :aws.lambda/mode clojure.core/string?)
 (clojure.spec.alpha/def
  :aws.lambda/tracing-config
  (clojure.spec.alpha/keys :req [] :opt [:aws.lambda/mode])))
(do
 (clojure.spec.alpha/def
  :aws.lambda/function-version
  clojure.core/string?)
 (clojure.spec.alpha/def
  :aws.lambda/function-weight
  clojure.core/double?)
 (clojure.spec.alpha/def
  :aws.lambda/version-weight
  (clojure.spec.alpha/keys
   :req
   [:aws.lambda/function-version :aws.lambda/function-weight]
   :opt
   [])))
