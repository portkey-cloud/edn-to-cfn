(ns portkey.cloudformation.s3
  "AUTOGENERATED clojure.spec definitions"
  (:require [clojure.spec.alpha]
            [portkey.cloudformation]))

(do
 (clojure.core/defmethod
  portkey.cloudformation/resource-type-spec
  :portkey.cloudformation.s3/bucket-policy
  [___15594__auto__]
  (clojure.spec.alpha/keys
   :req
   [:portkey.cloudformation.s3/bucket
    :portkey.cloudformation.s3/policy-document]
   :opt
   []))
 (clojure.spec.alpha/def
  :portkey.cloudformation.s3/bucket
  clojure.core/string?)
 (clojure.spec.alpha/def
  :portkey.cloudformation.s3/policy-document
  clojure.core/any?))
(do
 (clojure.core/defmethod
  portkey.cloudformation/resource-type-spec
  :portkey.cloudformation.s3/bucket
  [___15594__auto__]
  (clojure.spec.alpha/keys
   :req
   []
   :opt
   [:portkey.cloudformation.s3/versioning-configuration
    :portkey.cloudformation.s3/inventory-configurations
    :portkey.cloudformation.s3/analytics-configurations
    :portkey.cloudformation.s3/replication-configuration
    :portkey.cloudformation.s3/tags
    :portkey.cloudformation.s3/bucket-encryption
    :portkey.cloudformation.s3/access-control
    :portkey.cloudformation.s3/metrics-configurations
    :portkey.cloudformation.s3/lifecycle-configuration
    :portkey.cloudformation.s3/logging-configuration
    :portkey.cloudformation.s3/website-configuration
    :portkey.cloudformation.s3/notification-configuration
    :portkey.cloudformation.s3/bucket-name
    :portkey.cloudformation.s3/cors-configuration
    :portkey.cloudformation.s3/accelerate-configuration]))
 (clojure.spec.alpha/def
  :portkey.cloudformation.s3/access-control
  clojure.core/string?)
 (clojure.spec.alpha/def
  :portkey.cloudformation.s3/bucket-name
  clojure.core/string?))
(do
 (clojure.spec.alpha/def
  :portkey.cloudformation.s3/notification-configuration
  (clojure.spec.alpha/keys
   :req
   []
   :opt
   [:portkey.cloudformation.s3/lambda-configurations
    :portkey.cloudformation.s3/queue-configurations
    :portkey.cloudformation.s3/topic-configurations])))
(do
 (clojure.spec.alpha/def
  :portkey.cloudformation.s3/id
  clojure.core/string?)
 (clojure.spec.alpha/def
  :portkey.cloudformation.s3/prefix
  clojure.core/string?)
 (clojure.spec.alpha/def
  :portkey.cloudformation.s3/metrics-configuration
  (clojure.spec.alpha/keys
   :req
   [:portkey.cloudformation.s3/id]
   :opt
   [:portkey.cloudformation.s3/prefix
    :portkey.cloudformation.s3/tag-filters])))
(do
 (clojure.spec.alpha/def
  :portkey.cloudformation.s3/replica-kms-key-id
  clojure.core/string?)
 (clojure.spec.alpha/def
  :portkey.cloudformation.s3/encryption-configuration
  (clojure.spec.alpha/keys
   :req
   [:portkey.cloudformation.s3/replica-kms-key-id]
   :opt
   [])))
(do
 (clojure.spec.alpha/def
  :portkey.cloudformation.s3/s3-key-filter
  (clojure.spec.alpha/keys
   :req
   [:portkey.cloudformation.s3/rules]
   :opt
   [])))
(do
 (clojure.spec.alpha/def
  :portkey.cloudformation.s3/routing-rule
  (clojure.spec.alpha/keys
   :req
   [:portkey.cloudformation.s3/redirect-rule]
   :opt
   [:portkey.cloudformation.s3/routing-rule-condition])))
(do
 (clojure.spec.alpha/def
  :portkey.cloudformation.s3/status
  clojure.core/string?)
 (clojure.spec.alpha/def
  :portkey.cloudformation.s3/sse-kms-encrypted-objects
  (clojure.spec.alpha/keys
   :req
   [:portkey.cloudformation.s3/status]
   :opt
   [])))
(do
 (clojure.spec.alpha/def
  :portkey.cloudformation.s3/kms-master-key-id
  clojure.core/string?)
 (clojure.spec.alpha/def
  :portkey.cloudformation.s3/sse-algorithm
  clojure.core/string?)
 (clojure.spec.alpha/def
  :portkey.cloudformation.s3/server-side-encryption-by-default
  (clojure.spec.alpha/keys
   :req
   [:portkey.cloudformation.s3/sse-algorithm]
   :opt
   [:portkey.cloudformation.s3/kms-master-key-id])))
(do
 (clojure.spec.alpha/def
  :portkey.cloudformation.s3/notification-filter
  (clojure.spec.alpha/keys
   :req
   [:portkey.cloudformation.s3/s3-key]
   :opt
   [])))
(do
 (clojure.spec.alpha/def
  :portkey.cloudformation.s3/source-selection-criteria
  (clojure.spec.alpha/keys
   :req
   [:portkey.cloudformation.s3/sse-kms-encrypted-objects]
   :opt
   [])))
(do
 (clojure.spec.alpha/def
  :portkey.cloudformation.s3/id
  clojure.core/string?)
 (clojure.spec.alpha/def
  :portkey.cloudformation.s3/prefix
  clojure.core/string?)
 (clojure.spec.alpha/def
  :portkey.cloudformation.s3/status
  clojure.core/string?)
 (clojure.spec.alpha/def
  :portkey.cloudformation.s3/replication-rule
  (clojure.spec.alpha/keys
   :req
   [:portkey.cloudformation.s3/destination
    :portkey.cloudformation.s3/prefix
    :portkey.cloudformation.s3/status]
   :opt
   [:portkey.cloudformation.s3/id
    :portkey.cloudformation.s3/source-selection-criteria])))
(do
 (clojure.spec.alpha/def
  :portkey.cloudformation.s3/acceleration-status
  clojure.core/string?)
 (clojure.spec.alpha/def
  :portkey.cloudformation.s3/accelerate-configuration
  (clojure.spec.alpha/keys
   :req
   [:portkey.cloudformation.s3/acceleration-status]
   :opt
   [])))
(do
 (clojure.spec.alpha/def
  :portkey.cloudformation.s3/storage-class
  clojure.core/string?)
 (clojure.spec.alpha/def
  :portkey.cloudformation.s3/transition-date
  clojure.core/inst?)
 (clojure.spec.alpha/def
  :portkey.cloudformation.s3/transition-in-days
  clojure.core/integer?)
 (clojure.spec.alpha/def
  :portkey.cloudformation.s3/transition
  (clojure.spec.alpha/keys
   :req
   [:portkey.cloudformation.s3/storage-class]
   :opt
   [:portkey.cloudformation.s3/transition-date
    :portkey.cloudformation.s3/transition-in-days])))
(do
 (clojure.spec.alpha/def
  :portkey.cloudformation.s3/name
  clojure.core/string?)
 (clojure.spec.alpha/def
  :portkey.cloudformation.s3/value
  clojure.core/string?)
 (clojure.spec.alpha/def
  :portkey.cloudformation.s3/filter-rule
  (clojure.spec.alpha/keys
   :req
   [:portkey.cloudformation.s3/name :portkey.cloudformation.s3/value]
   :opt
   [])))
(do
 (clojure.spec.alpha/def
  :portkey.cloudformation.s3/http-error-code-returned-equals
  clojure.core/string?)
 (clojure.spec.alpha/def
  :portkey.cloudformation.s3/key-prefix-equals
  clojure.core/string?)
 (clojure.spec.alpha/def
  :portkey.cloudformation.s3/routing-rule-condition
  (clojure.spec.alpha/keys
   :req
   []
   :opt
   [:portkey.cloudformation.s3/http-error-code-returned-equals
    :portkey.cloudformation.s3/key-prefix-equals])))
(do
 (clojure.spec.alpha/def
  :portkey.cloudformation.s3/output-schema-version
  clojure.core/string?)
 (clojure.spec.alpha/def
  :portkey.cloudformation.s3/data-export
  (clojure.spec.alpha/keys
   :req
   [:portkey.cloudformation.s3/destination
    :portkey.cloudformation.s3/output-schema-version]
   :opt
   [])))
(do
 (clojure.spec.alpha/def
  :portkey.cloudformation.s3/storage-class-analysis
  (clojure.spec.alpha/keys
   :req
   []
   :opt
   [:portkey.cloudformation.s3/data-export])))
(do
 (clojure.spec.alpha/def
  :portkey.cloudformation.s3/enabled
  clojure.core/boolean?)
 (clojure.spec.alpha/def
  :portkey.cloudformation.s3/id
  clojure.core/string?)
 (clojure.spec.alpha/def
  :portkey.cloudformation.s3/included-object-versions
  clojure.core/string?)
 (clojure.spec.alpha/def
  :portkey.cloudformation.s3/prefix
  clojure.core/string?)
 (clojure.spec.alpha/def
  :portkey.cloudformation.s3/schedule-frequency
  clojure.core/string?)
 (clojure.spec.alpha/def
  :portkey.cloudformation.s3/inventory-configuration
  (clojure.spec.alpha/keys
   :req
   [:portkey.cloudformation.s3/destination
    :portkey.cloudformation.s3/enabled
    :portkey.cloudformation.s3/id
    :portkey.cloudformation.s3/included-object-versions
    :portkey.cloudformation.s3/schedule-frequency]
   :opt
   [:portkey.cloudformation.s3/optional-fields
    :portkey.cloudformation.s3/prefix])))
(do
 (clojure.spec.alpha/def
  :portkey.cloudformation.s3/owner
  clojure.core/string?)
 (clojure.spec.alpha/def
  :portkey.cloudformation.s3/access-control-translation
  (clojure.spec.alpha/keys
   :req
   [:portkey.cloudformation.s3/owner]
   :opt
   [])))
(do
 (clojure.spec.alpha/def
  :portkey.cloudformation.s3/role
  clojure.core/string?)
 (clojure.spec.alpha/def
  :portkey.cloudformation.s3/replication-configuration
  (clojure.spec.alpha/keys
   :req
   [:portkey.cloudformation.s3/role :portkey.cloudformation.s3/rules]
   :opt
   [])))
(do
 (clojure.spec.alpha/def
  :portkey.cloudformation.s3/key
  clojure.core/string?)
 (clojure.spec.alpha/def
  :portkey.cloudformation.s3/value
  clojure.core/string?)
 (clojure.spec.alpha/def
  :portkey.cloudformation.s3/tag-filter
  (clojure.spec.alpha/keys
   :req
   [:portkey.cloudformation.s3/key :portkey.cloudformation.s3/value]
   :opt
   [])))
(do
 (clojure.spec.alpha/def
  :portkey.cloudformation.s3/host-name
  clojure.core/string?)
 (clojure.spec.alpha/def
  :portkey.cloudformation.s3/http-redirect-code
  clojure.core/string?)
 (clojure.spec.alpha/def
  :portkey.cloudformation.s3/protocol
  clojure.core/string?)
 (clojure.spec.alpha/def
  :portkey.cloudformation.s3/replace-key-prefix-with
  clojure.core/string?)
 (clojure.spec.alpha/def
  :portkey.cloudformation.s3/replace-key-with
  clojure.core/string?)
 (clojure.spec.alpha/def
  :portkey.cloudformation.s3/redirect-rule
  (clojure.spec.alpha/keys
   :req
   []
   :opt
   [:portkey.cloudformation.s3/host-name
    :portkey.cloudformation.s3/http-redirect-code
    :portkey.cloudformation.s3/protocol
    :portkey.cloudformation.s3/replace-key-prefix-with
    :portkey.cloudformation.s3/replace-key-with])))
(do
 (clojure.spec.alpha/def
  :portkey.cloudformation.s3/lifecycle-configuration
  (clojure.spec.alpha/keys
   :req
   [:portkey.cloudformation.s3/rules]
   :opt
   [])))
(do
 (clojure.spec.alpha/def
  :portkey.cloudformation.s3/error-document
  clojure.core/string?)
 (clojure.spec.alpha/def
  :portkey.cloudformation.s3/index-document
  clojure.core/string?)
 (clojure.spec.alpha/def
  :portkey.cloudformation.s3/website-configuration
  (clojure.spec.alpha/keys
   :req
   []
   :opt
   [:portkey.cloudformation.s3/error-document
    :portkey.cloudformation.s3/index-document
    :portkey.cloudformation.s3/redirect-all-requests-to
    :portkey.cloudformation.s3/routing-rules])))
(do
 (clojure.spec.alpha/def
  :portkey.cloudformation.s3/account
  clojure.core/string?)
 (clojure.spec.alpha/def
  :portkey.cloudformation.s3/bucket
  clojure.core/string?)
 (clojure.spec.alpha/def
  :portkey.cloudformation.s3/storage-class
  clojure.core/string?)
 (clojure.spec.alpha/def
  :portkey.cloudformation.s3/replication-destination
  (clojure.spec.alpha/keys
   :req
   [:portkey.cloudformation.s3/bucket]
   :opt
   [:portkey.cloudformation.s3/access-control-translation
    :portkey.cloudformation.s3/account
    :portkey.cloudformation.s3/encryption-configuration
    :portkey.cloudformation.s3/storage-class])))
(do
 (clojure.spec.alpha/def
  :portkey.cloudformation.s3/storage-class
  clojure.core/string?)
 (clojure.spec.alpha/def
  :portkey.cloudformation.s3/transition-in-days
  clojure.core/integer?)
 (clojure.spec.alpha/def
  :portkey.cloudformation.s3/noncurrent-version-transition
  (clojure.spec.alpha/keys
   :req
   [:portkey.cloudformation.s3/storage-class
    :portkey.cloudformation.s3/transition-in-days]
   :opt
   [])))
(do
 (clojure.spec.alpha/def
  :portkey.cloudformation.s3/status
  clojure.core/string?)
 (clojure.spec.alpha/def
  :portkey.cloudformation.s3/versioning-configuration
  (clojure.spec.alpha/keys
   :req
   [:portkey.cloudformation.s3/status]
   :opt
   [])))
(do
 (clojure.spec.alpha/def
  :portkey.cloudformation.s3/destination-bucket-name
  clojure.core/string?)
 (clojure.spec.alpha/def
  :portkey.cloudformation.s3/log-file-prefix
  clojure.core/string?)
 (clojure.spec.alpha/def
  :portkey.cloudformation.s3/logging-configuration
  (clojure.spec.alpha/keys
   :req
   []
   :opt
   [:portkey.cloudformation.s3/destination-bucket-name
    :portkey.cloudformation.s3/log-file-prefix])))
(do
 (clojure.spec.alpha/def
  :portkey.cloudformation.s3/id
  clojure.core/string?)
 (clojure.spec.alpha/def
  :portkey.cloudformation.s3/max-age
  clojure.core/integer?)
 (clojure.spec.alpha/def
  :portkey.cloudformation.s3/cors-rule
  (clojure.spec.alpha/keys
   :req
   [:portkey.cloudformation.s3/allowed-methods
    :portkey.cloudformation.s3/allowed-origins]
   :opt
   [:portkey.cloudformation.s3/allowed-headers
    :portkey.cloudformation.s3/exposed-headers
    :portkey.cloudformation.s3/id
    :portkey.cloudformation.s3/max-age])))
(do
 (clojure.spec.alpha/def
  :portkey.cloudformation.s3/days-after-initiation
  clojure.core/integer?)
 (clojure.spec.alpha/def
  :portkey.cloudformation.s3/abort-incomplete-multipart-upload
  (clojure.spec.alpha/keys
   :req
   [:portkey.cloudformation.s3/days-after-initiation]
   :opt
   [])))
(do
 (clojure.spec.alpha/def
  :portkey.cloudformation.s3/cors-configuration
  (clojure.spec.alpha/keys
   :req
   [:portkey.cloudformation.s3/cors-rules]
   :opt
   [])))
(do
 (clojure.spec.alpha/def
  :portkey.cloudformation.s3/bucket-account-id
  clojure.core/string?)
 (clojure.spec.alpha/def
  :portkey.cloudformation.s3/bucket-arn
  clojure.core/string?)
 (clojure.spec.alpha/def
  :portkey.cloudformation.s3/format
  clojure.core/string?)
 (clojure.spec.alpha/def
  :portkey.cloudformation.s3/prefix
  clojure.core/string?)
 (clojure.spec.alpha/def
  :portkey.cloudformation.s3/destination
  (clojure.spec.alpha/keys
   :req
   [:portkey.cloudformation.s3/bucket-arn
    :portkey.cloudformation.s3/format]
   :opt
   [:portkey.cloudformation.s3/bucket-account-id
    :portkey.cloudformation.s3/prefix])))
(do
 (clojure.spec.alpha/def
  :portkey.cloudformation.s3/bucket-encryption
  (clojure.spec.alpha/keys
   :req
   [:portkey.cloudformation.s3/server-side-encryption-configuration]
   :opt
   [])))
(do
 (clojure.spec.alpha/def
  :portkey.cloudformation.s3/event
  clojure.core/string?)
 (clojure.spec.alpha/def
  :portkey.cloudformation.s3/queue
  clojure.core/string?)
 (clojure.spec.alpha/def
  :portkey.cloudformation.s3/queue-configuration
  (clojure.spec.alpha/keys
   :req
   [:portkey.cloudformation.s3/event :portkey.cloudformation.s3/queue]
   :opt
   [:portkey.cloudformation.s3/filter])))
(do
 (clojure.spec.alpha/def
  :portkey.cloudformation.s3/host-name
  clojure.core/string?)
 (clojure.spec.alpha/def
  :portkey.cloudformation.s3/protocol
  clojure.core/string?)
 (clojure.spec.alpha/def
  :portkey.cloudformation.s3/redirect-all-requests-to
  (clojure.spec.alpha/keys
   :req
   [:portkey.cloudformation.s3/host-name]
   :opt
   [:portkey.cloudformation.s3/protocol])))
(do
 (clojure.spec.alpha/def
  :portkey.cloudformation.s3/event
  clojure.core/string?)
 (clojure.spec.alpha/def
  :portkey.cloudformation.s3/topic
  clojure.core/string?)
 (clojure.spec.alpha/def
  :portkey.cloudformation.s3/topic-configuration
  (clojure.spec.alpha/keys
   :req
   [:portkey.cloudformation.s3/event :portkey.cloudformation.s3/topic]
   :opt
   [:portkey.cloudformation.s3/filter])))
(do
 (clojure.spec.alpha/def
  :portkey.cloudformation.s3/id
  clojure.core/string?)
 (clojure.spec.alpha/def
  :portkey.cloudformation.s3/prefix
  clojure.core/string?)
 (clojure.spec.alpha/def
  :portkey.cloudformation.s3/analytics-configuration
  (clojure.spec.alpha/keys
   :req
   [:portkey.cloudformation.s3/id
    :portkey.cloudformation.s3/storage-class-analysis]
   :opt
   [:portkey.cloudformation.s3/prefix
    :portkey.cloudformation.s3/tag-filters])))
(do
 (clojure.spec.alpha/def
  :portkey.cloudformation.s3/server-side-encryption-rule
  (clojure.spec.alpha/keys
   :req
   []
   :opt
   [:portkey.cloudformation.s3/server-side-encryption-by-default])))
(do
 (clojure.spec.alpha/def
  :portkey.cloudformation.s3/event
  clojure.core/string?)
 (clojure.spec.alpha/def
  :portkey.cloudformation.s3/function
  clojure.core/string?)
 (clojure.spec.alpha/def
  :portkey.cloudformation.s3/lambda-configuration
  (clojure.spec.alpha/keys
   :req
   [:portkey.cloudformation.s3/event
    :portkey.cloudformation.s3/function]
   :opt
   [:portkey.cloudformation.s3/filter])))
(do
 (clojure.spec.alpha/def
  :portkey.cloudformation.s3/prefix
  clojure.core/string?)
 (clojure.spec.alpha/def
  :portkey.cloudformation.s3/noncurrent-version-expiration-in-days
  clojure.core/integer?)
 (clojure.spec.alpha/def
  :portkey.cloudformation.s3/expiration-in-days
  clojure.core/integer?)
 (clojure.spec.alpha/def
  :portkey.cloudformation.s3/status
  clojure.core/string?)
 (clojure.spec.alpha/def
  :portkey.cloudformation.s3/expiration-date
  clojure.core/inst?)
 (clojure.spec.alpha/def
  :portkey.cloudformation.s3/id
  clojure.core/string?)
 (clojure.spec.alpha/def
  :portkey.cloudformation.s3/rule
  (clojure.spec.alpha/keys
   :req
   [:portkey.cloudformation.s3/status]
   :opt
   [:portkey.cloudformation.s3/prefix
    :portkey.cloudformation.s3/transition
    :portkey.cloudformation.s3/noncurrent-version-expiration-in-days
    :portkey.cloudformation.s3/expiration-in-days
    :portkey.cloudformation.s3/transitions
    :portkey.cloudformation.s3/tag-filters
    :portkey.cloudformation.s3/expiration-date
    :portkey.cloudformation.s3/abort-incomplete-multipart-upload
    :portkey.cloudformation.s3/noncurrent-version-transitions
    :portkey.cloudformation.s3/id
    :portkey.cloudformation.s3/noncurrent-version-transition])))
