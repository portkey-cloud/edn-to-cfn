(ns portkey.cloudformation.batch
  "AUTOGENERATED clojure.spec definitions"
  (:require [clojure.spec.alpha]
            [portkey.cloudformation]))

(do
 (clojure.core/defmethod
  portkey.cloudformation/resource-type-spec
  :portkey.cloudformation.batch/compute-environment
  [___19567__auto__]
  (clojure.spec.alpha/keys
   :req
   [:portkey.cloudformation/id
    :portkey.cloudformation/type
    :portkey.cloudformation.batch/type
    :portkey.cloudformation.batch/service-role
    :portkey.cloudformation.batch/compute-resources]
   :opt
   [:portkey.cloudformation.batch/compute-environment-name
    :portkey.cloudformation.batch/state]))
 (clojure.spec.alpha/def
  :portkey.cloudformation.batch/type
  (portkey.cloudformation/ref-or-spec clojure.core/string?))
 (clojure.spec.alpha/def
  :portkey.cloudformation.batch/service-role
  (portkey.cloudformation/ref-or-spec clojure.core/string?))
 (clojure.spec.alpha/def
  :portkey.cloudformation.batch/compute-environment-name
  (portkey.cloudformation/ref-or-spec clojure.core/string?))
 (clojure.spec.alpha/def
  :portkey.cloudformation.batch/state
  (portkey.cloudformation/ref-or-spec clojure.core/string?)))
(do
 (clojure.core/defmethod
  portkey.cloudformation/resource-type-spec
  :portkey.cloudformation.batch/job-queue
  [___19567__auto__]
  (clojure.spec.alpha/keys
   :req
   [:portkey.cloudformation/id
    :portkey.cloudformation/type
    :portkey.cloudformation.batch/compute-environment-order
    :portkey.cloudformation.batch/priority]
   :opt
   [:portkey.cloudformation.batch/state
    :portkey.cloudformation.batch/job-queue-name]))
 (clojure.spec.alpha/def
  :portkey.cloudformation.batch/priority
  (portkey.cloudformation/ref-or-spec clojure.core/integer?))
 (clojure.spec.alpha/def
  :portkey.cloudformation.batch/state
  (portkey.cloudformation/ref-or-spec clojure.core/string?))
 (clojure.spec.alpha/def
  :portkey.cloudformation.batch/job-queue-name
  (portkey.cloudformation/ref-or-spec clojure.core/string?)))
(do
 (clojure.core/defmethod
  portkey.cloudformation/resource-type-spec
  :portkey.cloudformation.batch/job-definition
  [___19567__auto__]
  (clojure.spec.alpha/keys
   :req
   [:portkey.cloudformation/id
    :portkey.cloudformation/type
    :portkey.cloudformation.batch/type
    :portkey.cloudformation.batch/container-properties]
   :opt
   [:portkey.cloudformation.batch/parameters
    :portkey.cloudformation.batch/job-definition-name
    :portkey.cloudformation.batch/retry-strategy]))
 (clojure.spec.alpha/def
  :portkey.cloudformation.batch/type
  (portkey.cloudformation/ref-or-spec clojure.core/string?))
 (clojure.spec.alpha/def
  :portkey.cloudformation.batch/parameters
  (portkey.cloudformation/ref-or-spec clojure.core/any?))
 (clojure.spec.alpha/def
  :portkey.cloudformation.batch/job-definition-name
  (portkey.cloudformation/ref-or-spec clojure.core/string?)))
(do
 (clojure.spec.alpha/def
  :portkey.cloudformation.batch/read-only
  (portkey.cloudformation/ref-or-spec clojure.core/boolean?))
 (clojure.spec.alpha/def
  :portkey.cloudformation.batch/source-volume
  (portkey.cloudformation/ref-or-spec clojure.core/string?))
 (clojure.spec.alpha/def
  :portkey.cloudformation.batch/container-path
  (portkey.cloudformation/ref-or-spec clojure.core/string?))
 (clojure.spec.alpha/def
  :portkey.cloudformation.batch/mount-points
  (clojure.spec.alpha/keys
   :req
   []
   :opt
   [:portkey.cloudformation.batch/read-only
    :portkey.cloudformation.batch/source-volume
    :portkey.cloudformation.batch/container-path])))
(do
 (clojure.spec.alpha/def
  :portkey.cloudformation.batch/value
  (portkey.cloudformation/ref-or-spec clojure.core/string?))
 (clojure.spec.alpha/def
  :portkey.cloudformation.batch/name
  (portkey.cloudformation/ref-or-spec clojure.core/string?))
 (clojure.spec.alpha/def
  :portkey.cloudformation.batch/environment
  (clojure.spec.alpha/keys
   :req
   []
   :opt
   [:portkey.cloudformation.batch/value
    :portkey.cloudformation.batch/name])))
(do
 (clojure.spec.alpha/def
  :portkey.cloudformation.batch/spot-iam-fleet-role
  (portkey.cloudformation/ref-or-spec clojure.core/string?))
 (clojure.spec.alpha/def
  :portkey.cloudformation.batch/minv-cpus
  (portkey.cloudformation/ref-or-spec clojure.core/integer?))
 (clojure.spec.alpha/def
  :portkey.cloudformation.batch/type
  (portkey.cloudformation/ref-or-spec clojure.core/string?))
 (clojure.spec.alpha/def
  :portkey.cloudformation.batch/image-id
  (portkey.cloudformation/ref-or-spec clojure.core/string?))
 (clojure.spec.alpha/def
  :portkey.cloudformation.batch/instance-role
  (portkey.cloudformation/ref-or-spec clojure.core/string?))
 (clojure.spec.alpha/def
  :portkey.cloudformation.batch/ec2-key-pair
  (portkey.cloudformation/ref-or-spec clojure.core/string?))
 (clojure.spec.alpha/def
  :portkey.cloudformation.batch/maxv-cpus
  (portkey.cloudformation/ref-or-spec clojure.core/integer?))
 (clojure.spec.alpha/def
  :portkey.cloudformation.batch/tags
  (portkey.cloudformation/ref-or-spec clojure.core/any?))
 (clojure.spec.alpha/def
  :portkey.cloudformation.batch/bid-percentage
  (portkey.cloudformation/ref-or-spec clojure.core/integer?))
 (clojure.spec.alpha/def
  :portkey.cloudformation.batch/desiredv-cpus
  (portkey.cloudformation/ref-or-spec clojure.core/integer?))
 (clojure.spec.alpha/def
  :portkey.cloudformation.batch/compute-resources
  (clojure.spec.alpha/keys
   :req
   [:portkey.cloudformation.batch/instance-types
    :portkey.cloudformation.batch/minv-cpus
    :portkey.cloudformation.batch/security-group-ids
    :portkey.cloudformation.batch/type
    :portkey.cloudformation.batch/subnets
    :portkey.cloudformation.batch/instance-role
    :portkey.cloudformation.batch/maxv-cpus]
   :opt
   [:portkey.cloudformation.batch/spot-iam-fleet-role
    :portkey.cloudformation.batch/image-id
    :portkey.cloudformation.batch/ec2-key-pair
    :portkey.cloudformation.batch/tags
    :portkey.cloudformation.batch/bid-percentage
    :portkey.cloudformation.batch/desiredv-cpus])))
(do
 (clojure.spec.alpha/def
  :portkey.cloudformation.batch/soft-limit
  (portkey.cloudformation/ref-or-spec clojure.core/integer?))
 (clojure.spec.alpha/def
  :portkey.cloudformation.batch/hard-limit
  (portkey.cloudformation/ref-or-spec clojure.core/integer?))
 (clojure.spec.alpha/def
  :portkey.cloudformation.batch/name
  (portkey.cloudformation/ref-or-spec clojure.core/string?))
 (clojure.spec.alpha/def
  :portkey.cloudformation.batch/ulimit
  (clojure.spec.alpha/keys
   :req
   [:portkey.cloudformation.batch/soft-limit
    :portkey.cloudformation.batch/hard-limit
    :portkey.cloudformation.batch/name]
   :opt
   [])))
(do
 (clojure.spec.alpha/def
  :portkey.cloudformation.batch/user
  (portkey.cloudformation/ref-or-spec clojure.core/string?))
 (clojure.spec.alpha/def
  :portkey.cloudformation.batch/privileged
  (portkey.cloudformation/ref-or-spec clojure.core/boolean?))
 (clojure.spec.alpha/def
  :portkey.cloudformation.batch/vcpus
  (portkey.cloudformation/ref-or-spec clojure.core/integer?))
 (clojure.spec.alpha/def
  :portkey.cloudformation.batch/memory
  (portkey.cloudformation/ref-or-spec clojure.core/integer?))
 (clojure.spec.alpha/def
  :portkey.cloudformation.batch/readonly-root-filesystem
  (portkey.cloudformation/ref-or-spec clojure.core/boolean?))
 (clojure.spec.alpha/def
  :portkey.cloudformation.batch/image
  (portkey.cloudformation/ref-or-spec clojure.core/string?))
 (clojure.spec.alpha/def
  :portkey.cloudformation.batch/job-role-arn
  (portkey.cloudformation/ref-or-spec clojure.core/string?))
 (clojure.spec.alpha/def
  :portkey.cloudformation.batch/container-properties
  (clojure.spec.alpha/keys
   :req
   [:portkey.cloudformation.batch/vcpus
    :portkey.cloudformation.batch/memory
    :portkey.cloudformation.batch/image]
   :opt
   [:portkey.cloudformation.batch/user
    :portkey.cloudformation.batch/privileged
    :portkey.cloudformation.batch/environment
    :portkey.cloudformation.batch/command
    :portkey.cloudformation.batch/ulimits
    :portkey.cloudformation.batch/readonly-root-filesystem
    :portkey.cloudformation.batch/volumes
    :portkey.cloudformation.batch/mount-points
    :portkey.cloudformation.batch/job-role-arn])))
(do
 (clojure.spec.alpha/def
  :portkey.cloudformation.batch/source-path
  (portkey.cloudformation/ref-or-spec clojure.core/string?))
 (clojure.spec.alpha/def
  :portkey.cloudformation.batch/volumes-host
  (clojure.spec.alpha/keys
   :req
   []
   :opt
   [:portkey.cloudformation.batch/source-path])))
(do
 (clojure.spec.alpha/def
  :portkey.cloudformation.batch/compute-environment
  (portkey.cloudformation/ref-or-spec clojure.core/string?))
 (clojure.spec.alpha/def
  :portkey.cloudformation.batch/order
  (portkey.cloudformation/ref-or-spec clojure.core/integer?))
 (clojure.spec.alpha/def
  :portkey.cloudformation.batch/compute-environment-order
  (clojure.spec.alpha/keys
   :req
   [:portkey.cloudformation.batch/compute-environment
    :portkey.cloudformation.batch/order]
   :opt
   [])))
(do
 (clojure.spec.alpha/def
  :portkey.cloudformation.batch/attempts
  (portkey.cloudformation/ref-or-spec clojure.core/integer?))
 (clojure.spec.alpha/def
  :portkey.cloudformation.batch/retry-strategy
  (clojure.spec.alpha/keys
   :req
   []
   :opt
   [:portkey.cloudformation.batch/attempts])))
(do
 (clojure.spec.alpha/def
  :portkey.cloudformation.batch/name
  (portkey.cloudformation/ref-or-spec clojure.core/string?))
 (clojure.spec.alpha/def
  :portkey.cloudformation.batch/volumes
  (clojure.spec.alpha/keys
   :req
   []
   :opt
   [:portkey.cloudformation.batch/host
    :portkey.cloudformation.batch/name])))
