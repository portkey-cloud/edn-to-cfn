(ns portkey.cloudformation.cognito
  "AUTOGENERATED clojure.spec definitions"
  (:require [clojure.spec.alpha]
            [portkey.cloudformation]))

(do
 (clojure.core/defmethod
  portkey.cloudformation/resource-type-spec
  :portkey.cloudformation.cognito/user-pool-group
  [___19567__auto__]
  (clojure.spec.alpha/keys
   :req
   [:portkey.cloudformation/id
    :portkey.cloudformation/type
    :portkey.cloudformation.cognito/user-pool-id]
   :opt
   [:portkey.cloudformation.cognito/group-name
    :portkey.cloudformation.cognito/description
    :portkey.cloudformation.cognito/precedence
    :portkey.cloudformation.cognito/role-arn]))
 (clojure.spec.alpha/def
  :portkey.cloudformation.cognito/group-name
  (portkey.cloudformation/ref-or-spec clojure.core/string?))
 (clojure.spec.alpha/def
  :portkey.cloudformation.cognito/description
  (portkey.cloudformation/ref-or-spec clojure.core/string?))
 (clojure.spec.alpha/def
  :portkey.cloudformation.cognito/user-pool-id
  (portkey.cloudformation/ref-or-spec clojure.core/string?))
 (clojure.spec.alpha/def
  :portkey.cloudformation.cognito/precedence
  (portkey.cloudformation/ref-or-spec clojure.core/double?))
 (clojure.spec.alpha/def
  :portkey.cloudformation.cognito/role-arn
  (portkey.cloudformation/ref-or-spec clojure.core/string?)))
(do
 (clojure.core/defmethod
  portkey.cloudformation/resource-type-spec
  :portkey.cloudformation.cognito/identity-pool
  [___19567__auto__]
  (clojure.spec.alpha/keys
   :req
   [:portkey.cloudformation/id
    :portkey.cloudformation/type
    :portkey.cloudformation.cognito/allow-unauthenticated-identities]
   :opt
   [:portkey.cloudformation.cognito/push-sync
    :portkey.cloudformation.cognito/supported-login-providers
    :portkey.cloudformation.cognito/developer-provider-name
    :portkey.cloudformation.cognito/cognito-streams
    :portkey.cloudformation.cognito/open-id-connect-provider-ar-ns
    :portkey.cloudformation.cognito/identity-pool-name
    :portkey.cloudformation.cognito/cognito-identity-providers
    :portkey.cloudformation.cognito/saml-provider-ar-ns
    :portkey.cloudformation.cognito/cognito-events]))
 (clojure.spec.alpha/def
  :portkey.cloudformation.cognito/supported-login-providers
  (portkey.cloudformation/ref-or-spec clojure.core/any?))
 (clojure.spec.alpha/def
  :portkey.cloudformation.cognito/developer-provider-name
  (portkey.cloudformation/ref-or-spec clojure.core/string?))
 (clojure.spec.alpha/def
  :portkey.cloudformation.cognito/allow-unauthenticated-identities
  (portkey.cloudformation/ref-or-spec clojure.core/boolean?))
 (clojure.spec.alpha/def
  :portkey.cloudformation.cognito/identity-pool-name
  (portkey.cloudformation/ref-or-spec clojure.core/string?))
 (clojure.spec.alpha/def
  :portkey.cloudformation.cognito/cognito-events
  (portkey.cloudformation/ref-or-spec clojure.core/any?)))
(do
 (clojure.core/defmethod
  portkey.cloudformation/resource-type-spec
  :portkey.cloudformation.cognito/user-pool-user
  [___19567__auto__]
  (clojure.spec.alpha/keys
   :req
   [:portkey.cloudformation/id
    :portkey.cloudformation/type
    :portkey.cloudformation.cognito/user-pool-id]
   :opt
   [:portkey.cloudformation.cognito/validation-data
    :portkey.cloudformation.cognito/username
    :portkey.cloudformation.cognito/message-action
    :portkey.cloudformation.cognito/desired-delivery-mediums
    :portkey.cloudformation.cognito/force-alias-creation
    :portkey.cloudformation.cognito/user-attributes]))
 (clojure.spec.alpha/def
  :portkey.cloudformation.cognito/user-pool-id
  (portkey.cloudformation/ref-or-spec clojure.core/string?))
 (clojure.spec.alpha/def
  :portkey.cloudformation.cognito/username
  (portkey.cloudformation/ref-or-spec clojure.core/string?))
 (clojure.spec.alpha/def
  :portkey.cloudformation.cognito/message-action
  (portkey.cloudformation/ref-or-spec clojure.core/string?))
 (clojure.spec.alpha/def
  :portkey.cloudformation.cognito/force-alias-creation
  (portkey.cloudformation/ref-or-spec clojure.core/boolean?)))
(do
 (clojure.core/defmethod
  portkey.cloudformation/resource-type-spec
  :portkey.cloudformation.cognito/user-pool-client
  [___19567__auto__]
  (clojure.spec.alpha/keys
   :req
   [:portkey.cloudformation/id
    :portkey.cloudformation/type
    :portkey.cloudformation.cognito/user-pool-id]
   :opt
   [:portkey.cloudformation.cognito/generate-secret
    :portkey.cloudformation.cognito/client-name
    :portkey.cloudformation.cognito/explicit-auth-flows
    :portkey.cloudformation.cognito/refresh-token-validity
    :portkey.cloudformation.cognito/read-attributes
    :portkey.cloudformation.cognito/write-attributes]))
 (clojure.spec.alpha/def
  :portkey.cloudformation.cognito/generate-secret
  (portkey.cloudformation/ref-or-spec clojure.core/boolean?))
 (clojure.spec.alpha/def
  :portkey.cloudformation.cognito/client-name
  (portkey.cloudformation/ref-or-spec clojure.core/string?))
 (clojure.spec.alpha/def
  :portkey.cloudformation.cognito/user-pool-id
  (portkey.cloudformation/ref-or-spec clojure.core/string?))
 (clojure.spec.alpha/def
  :portkey.cloudformation.cognito/refresh-token-validity
  (portkey.cloudformation/ref-or-spec clojure.core/double?)))
(do
 (clojure.core/defmethod
  portkey.cloudformation/resource-type-spec
  :portkey.cloudformation.cognito/identity-pool-role-attachment
  [___19567__auto__]
  (clojure.spec.alpha/keys
   :req
   [:portkey.cloudformation/id
    :portkey.cloudformation/type
    :portkey.cloudformation.cognito/identity-pool-id]
   :opt
   [:portkey.cloudformation.cognito/role-mappings
    :portkey.cloudformation.cognito/roles]))
 (clojure.spec.alpha/def
  :portkey.cloudformation.cognito/role-mappings
  (portkey.cloudformation/ref-or-spec clojure.core/any?))
 (clojure.spec.alpha/def
  :portkey.cloudformation.cognito/identity-pool-id
  (portkey.cloudformation/ref-or-spec clojure.core/string?))
 (clojure.spec.alpha/def
  :portkey.cloudformation.cognito/roles
  (portkey.cloudformation/ref-or-spec clojure.core/any?)))
(do
 (clojure.core/defmethod
  portkey.cloudformation/resource-type-spec
  :portkey.cloudformation.cognito/user-pool-user-to-group-attachment
  [___19567__auto__]
  (clojure.spec.alpha/keys
   :req
   [:portkey.cloudformation/id
    :portkey.cloudformation/type
    :portkey.cloudformation.cognito/group-name
    :portkey.cloudformation.cognito/user-pool-id
    :portkey.cloudformation.cognito/username]
   :opt
   []))
 (clojure.spec.alpha/def
  :portkey.cloudformation.cognito/group-name
  (portkey.cloudformation/ref-or-spec clojure.core/string?))
 (clojure.spec.alpha/def
  :portkey.cloudformation.cognito/user-pool-id
  (portkey.cloudformation/ref-or-spec clojure.core/string?))
 (clojure.spec.alpha/def
  :portkey.cloudformation.cognito/username
  (portkey.cloudformation/ref-or-spec clojure.core/string?)))
(do
 (clojure.core/defmethod
  portkey.cloudformation/resource-type-spec
  :portkey.cloudformation.cognito/user-pool
  [___19567__auto__]
  (clojure.spec.alpha/keys
   :req
   [:portkey.cloudformation/id :portkey.cloudformation/type]
   :opt
   [:portkey.cloudformation.cognito/sms-configuration
    :portkey.cloudformation.cognito/schema
    :portkey.cloudformation.cognito/mfa-configuration
    :portkey.cloudformation.cognito/admin-create-user-config
    :portkey.cloudformation.cognito/sms-verification-message
    :portkey.cloudformation.cognito/user-pool-name
    :portkey.cloudformation.cognito/username-attributes
    :portkey.cloudformation.cognito/email-verification-message
    :portkey.cloudformation.cognito/auto-verified-attributes
    :portkey.cloudformation.cognito/device-configuration
    :portkey.cloudformation.cognito/lambda-config
    :portkey.cloudformation.cognito/policies
    :portkey.cloudformation.cognito/email-verification-subject
    :portkey.cloudformation.cognito/user-pool-tags
    :portkey.cloudformation.cognito/email-configuration
    :portkey.cloudformation.cognito/sms-authentication-message
    :portkey.cloudformation.cognito/alias-attributes]))
 (clojure.spec.alpha/def
  :portkey.cloudformation.cognito/mfa-configuration
  (portkey.cloudformation/ref-or-spec clojure.core/string?))
 (clojure.spec.alpha/def
  :portkey.cloudformation.cognito/sms-verification-message
  (portkey.cloudformation/ref-or-spec clojure.core/string?))
 (clojure.spec.alpha/def
  :portkey.cloudformation.cognito/user-pool-name
  (portkey.cloudformation/ref-or-spec clojure.core/string?))
 (clojure.spec.alpha/def
  :portkey.cloudformation.cognito/email-verification-message
  (portkey.cloudformation/ref-or-spec clojure.core/string?))
 (clojure.spec.alpha/def
  :portkey.cloudformation.cognito/email-verification-subject
  (portkey.cloudformation/ref-or-spec clojure.core/string?))
 (clojure.spec.alpha/def
  :portkey.cloudformation.cognito/user-pool-tags
  (portkey.cloudformation/ref-or-spec clojure.core/any?))
 (clojure.spec.alpha/def
  :portkey.cloudformation.cognito/sms-authentication-message
  (portkey.cloudformation/ref-or-spec clojure.core/string?)))
(do
 (clojure.spec.alpha/def
  :portkey.cloudformation.cognito/device-only-remembered-on-user-prompt
  (portkey.cloudformation/ref-or-spec clojure.core/boolean?))
 (clojure.spec.alpha/def
  :portkey.cloudformation.cognito/challenge-required-on-new-device
  (portkey.cloudformation/ref-or-spec clojure.core/boolean?))
 (clojure.spec.alpha/def
  :portkey.cloudformation.cognito/device-configuration
  (clojure.spec.alpha/keys
   :req
   []
   :opt
   [:portkey.cloudformation.cognito/device-only-remembered-on-user-prompt
    :portkey.cloudformation.cognito/challenge-required-on-new-device])))
(do
 (clojure.spec.alpha/def
  :portkey.cloudformation.cognito/type
  (portkey.cloudformation/ref-or-spec clojure.core/string?))
 (clojure.spec.alpha/def
  :portkey.cloudformation.cognito/ambiguous-role-resolution
  (portkey.cloudformation/ref-or-spec clojure.core/string?))
 (clojure.spec.alpha/def
  :portkey.cloudformation.cognito/role-mapping
  (clojure.spec.alpha/keys
   :req
   [:portkey.cloudformation.cognito/type]
   :opt
   [:portkey.cloudformation.cognito/ambiguous-role-resolution
    :portkey.cloudformation.cognito/rules-configuration])))
(do
 (clojure.spec.alpha/def
  :portkey.cloudformation.cognito/value
  (portkey.cloudformation/ref-or-spec clojure.core/string?))
 (clojure.spec.alpha/def
  :portkey.cloudformation.cognito/name
  (portkey.cloudformation/ref-or-spec clojure.core/string?))
 (clojure.spec.alpha/def
  :portkey.cloudformation.cognito/attribute-type
  (clojure.spec.alpha/keys
   :req
   []
   :opt
   [:portkey.cloudformation.cognito/value
    :portkey.cloudformation.cognito/name])))
(do
 (clojure.spec.alpha/def
  :portkey.cloudformation.cognito/match-type
  (portkey.cloudformation/ref-or-spec clojure.core/string?))
 (clojure.spec.alpha/def
  :portkey.cloudformation.cognito/value
  (portkey.cloudformation/ref-or-spec clojure.core/string?))
 (clojure.spec.alpha/def
  :portkey.cloudformation.cognito/claim
  (portkey.cloudformation/ref-or-spec clojure.core/string?))
 (clojure.spec.alpha/def
  :portkey.cloudformation.cognito/role-arn
  (portkey.cloudformation/ref-or-spec clojure.core/string?))
 (clojure.spec.alpha/def
  :portkey.cloudformation.cognito/mapping-rule
  (clojure.spec.alpha/keys
   :req
   [:portkey.cloudformation.cognito/match-type
    :portkey.cloudformation.cognito/value
    :portkey.cloudformation.cognito/claim
    :portkey.cloudformation.cognito/role-arn]
   :opt
   [])))
(do
 (clojure.spec.alpha/def
  :portkey.cloudformation.cognito/min-length
  (portkey.cloudformation/ref-or-spec clojure.core/string?))
 (clojure.spec.alpha/def
  :portkey.cloudformation.cognito/max-length
  (portkey.cloudformation/ref-or-spec clojure.core/string?))
 (clojure.spec.alpha/def
  :portkey.cloudformation.cognito/string-attribute-constraints
  (clojure.spec.alpha/keys
   :req
   []
   :opt
   [:portkey.cloudformation.cognito/min-length
    :portkey.cloudformation.cognito/max-length])))
(do
 (clojure.spec.alpha/def
  :portkey.cloudformation.cognito/external-id
  (portkey.cloudformation/ref-or-spec clojure.core/string?))
 (clojure.spec.alpha/def
  :portkey.cloudformation.cognito/sns-caller-arn
  (portkey.cloudformation/ref-or-spec clojure.core/string?))
 (clojure.spec.alpha/def
  :portkey.cloudformation.cognito/sms-configuration
  (clojure.spec.alpha/keys
   :req
   []
   :opt
   [:portkey.cloudformation.cognito/external-id
    :portkey.cloudformation.cognito/sns-caller-arn])))
(do
 (clojure.spec.alpha/def
  :portkey.cloudformation.cognito/server-side-token-check
  (portkey.cloudformation/ref-or-spec clojure.core/boolean?))
 (clojure.spec.alpha/def
  :portkey.cloudformation.cognito/provider-name
  (portkey.cloudformation/ref-or-spec clojure.core/string?))
 (clojure.spec.alpha/def
  :portkey.cloudformation.cognito/client-id
  (portkey.cloudformation/ref-or-spec clojure.core/string?))
 (clojure.spec.alpha/def
  :portkey.cloudformation.cognito/cognito-identity-provider
  (clojure.spec.alpha/keys
   :req
   []
   :opt
   [:portkey.cloudformation.cognito/server-side-token-check
    :portkey.cloudformation.cognito/provider-name
    :portkey.cloudformation.cognito/client-id])))
(do
 (clojure.spec.alpha/def
  :portkey.cloudformation.cognito/min-value
  (portkey.cloudformation/ref-or-spec clojure.core/string?))
 (clojure.spec.alpha/def
  :portkey.cloudformation.cognito/max-value
  (portkey.cloudformation/ref-or-spec clojure.core/string?))
 (clojure.spec.alpha/def
  :portkey.cloudformation.cognito/number-attribute-constraints
  (clojure.spec.alpha/keys
   :req
   []
   :opt
   [:portkey.cloudformation.cognito/min-value
    :portkey.cloudformation.cognito/max-value])))
(do
 (clojure.spec.alpha/def
  :portkey.cloudformation.cognito/role-arn
  (portkey.cloudformation/ref-or-spec clojure.core/string?))
 (clojure.spec.alpha/def
  :portkey.cloudformation.cognito/push-sync
  (clojure.spec.alpha/keys
   :req
   []
   :opt
   [:portkey.cloudformation.cognito/application-arns
    :portkey.cloudformation.cognito/role-arn])))
(do
 (clojure.spec.alpha/def
  :portkey.cloudformation.cognito/rules-configuration-type
  (clojure.spec.alpha/keys
   :req
   [:portkey.cloudformation.cognito/rules]
   :opt
   [])))
(do
 (clojure.spec.alpha/def
  :portkey.cloudformation.cognito/require-numbers
  (portkey.cloudformation/ref-or-spec clojure.core/boolean?))
 (clojure.spec.alpha/def
  :portkey.cloudformation.cognito/minimum-length
  (portkey.cloudformation/ref-or-spec clojure.core/integer?))
 (clojure.spec.alpha/def
  :portkey.cloudformation.cognito/require-uppercase
  (portkey.cloudformation/ref-or-spec clojure.core/boolean?))
 (clojure.spec.alpha/def
  :portkey.cloudformation.cognito/require-lowercase
  (portkey.cloudformation/ref-or-spec clojure.core/boolean?))
 (clojure.spec.alpha/def
  :portkey.cloudformation.cognito/require-symbols
  (portkey.cloudformation/ref-or-spec clojure.core/boolean?))
 (clojure.spec.alpha/def
  :portkey.cloudformation.cognito/password-policy
  (clojure.spec.alpha/keys
   :req
   []
   :opt
   [:portkey.cloudformation.cognito/require-numbers
    :portkey.cloudformation.cognito/minimum-length
    :portkey.cloudformation.cognito/require-uppercase
    :portkey.cloudformation.cognito/require-lowercase
    :portkey.cloudformation.cognito/require-symbols])))
(do
 (clojure.spec.alpha/def
  :portkey.cloudformation.cognito/policies
  (clojure.spec.alpha/keys
   :req
   []
   :opt
   [:portkey.cloudformation.cognito/password-policy])))
(do
 (clojure.spec.alpha/def
  :portkey.cloudformation.cognito/developer-only-attribute
  (portkey.cloudformation/ref-or-spec clojure.core/boolean?))
 (clojure.spec.alpha/def
  :portkey.cloudformation.cognito/mutable
  (portkey.cloudformation/ref-or-spec clojure.core/boolean?))
 (clojure.spec.alpha/def
  :portkey.cloudformation.cognito/attribute-data-type
  (portkey.cloudformation/ref-or-spec clojure.core/string?))
 (clojure.spec.alpha/def
  :portkey.cloudformation.cognito/required
  (portkey.cloudformation/ref-or-spec clojure.core/boolean?))
 (clojure.spec.alpha/def
  :portkey.cloudformation.cognito/name
  (portkey.cloudformation/ref-or-spec clojure.core/string?))
 (clojure.spec.alpha/def
  :portkey.cloudformation.cognito/schema-attribute
  (clojure.spec.alpha/keys
   :req
   []
   :opt
   [:portkey.cloudformation.cognito/developer-only-attribute
    :portkey.cloudformation.cognito/mutable
    :portkey.cloudformation.cognito/attribute-data-type
    :portkey.cloudformation.cognito/string-attribute-constraints
    :portkey.cloudformation.cognito/required
    :portkey.cloudformation.cognito/number-attribute-constraints
    :portkey.cloudformation.cognito/name])))
(do
 (clojure.spec.alpha/def
  :portkey.cloudformation.cognito/email-message
  (portkey.cloudformation/ref-or-spec clojure.core/string?))
 (clojure.spec.alpha/def
  :portkey.cloudformation.cognito/sms-message
  (portkey.cloudformation/ref-or-spec clojure.core/string?))
 (clojure.spec.alpha/def
  :portkey.cloudformation.cognito/email-subject
  (portkey.cloudformation/ref-or-spec clojure.core/string?))
 (clojure.spec.alpha/def
  :portkey.cloudformation.cognito/invite-message-template
  (clojure.spec.alpha/keys
   :req
   []
   :opt
   [:portkey.cloudformation.cognito/email-message
    :portkey.cloudformation.cognito/sms-message
    :portkey.cloudformation.cognito/email-subject])))
(do
 (clojure.spec.alpha/def
  :portkey.cloudformation.cognito/create-auth-challenge
  (portkey.cloudformation/ref-or-spec clojure.core/string?))
 (clojure.spec.alpha/def
  :portkey.cloudformation.cognito/pre-authentication
  (portkey.cloudformation/ref-or-spec clojure.core/string?))
 (clojure.spec.alpha/def
  :portkey.cloudformation.cognito/define-auth-challenge
  (portkey.cloudformation/ref-or-spec clojure.core/string?))
 (clojure.spec.alpha/def
  :portkey.cloudformation.cognito/pre-sign-up
  (portkey.cloudformation/ref-or-spec clojure.core/string?))
 (clojure.spec.alpha/def
  :portkey.cloudformation.cognito/post-authentication
  (portkey.cloudformation/ref-or-spec clojure.core/string?))
 (clojure.spec.alpha/def
  :portkey.cloudformation.cognito/post-confirmation
  (portkey.cloudformation/ref-or-spec clojure.core/string?))
 (clojure.spec.alpha/def
  :portkey.cloudformation.cognito/custom-message
  (portkey.cloudformation/ref-or-spec clojure.core/string?))
 (clojure.spec.alpha/def
  :portkey.cloudformation.cognito/verify-auth-challenge-response
  (portkey.cloudformation/ref-or-spec clojure.core/string?))
 (clojure.spec.alpha/def
  :portkey.cloudformation.cognito/lambda-config
  (clojure.spec.alpha/keys
   :req
   []
   :opt
   [:portkey.cloudformation.cognito/create-auth-challenge
    :portkey.cloudformation.cognito/pre-authentication
    :portkey.cloudformation.cognito/define-auth-challenge
    :portkey.cloudformation.cognito/pre-sign-up
    :portkey.cloudformation.cognito/post-authentication
    :portkey.cloudformation.cognito/post-confirmation
    :portkey.cloudformation.cognito/custom-message
    :portkey.cloudformation.cognito/verify-auth-challenge-response])))
(do
 (clojure.spec.alpha/def
  :portkey.cloudformation.cognito/streaming-status
  (portkey.cloudformation/ref-or-spec clojure.core/string?))
 (clojure.spec.alpha/def
  :portkey.cloudformation.cognito/stream-name
  (portkey.cloudformation/ref-or-spec clojure.core/string?))
 (clojure.spec.alpha/def
  :portkey.cloudformation.cognito/role-arn
  (portkey.cloudformation/ref-or-spec clojure.core/string?))
 (clojure.spec.alpha/def
  :portkey.cloudformation.cognito/cognito-streams
  (clojure.spec.alpha/keys
   :req
   []
   :opt
   [:portkey.cloudformation.cognito/streaming-status
    :portkey.cloudformation.cognito/stream-name
    :portkey.cloudformation.cognito/role-arn])))
(do
 (clojure.spec.alpha/def
  :portkey.cloudformation.cognito/unused-account-validity-days
  (portkey.cloudformation/ref-or-spec clojure.core/double?))
 (clojure.spec.alpha/def
  :portkey.cloudformation.cognito/allow-admin-create-user-only
  (portkey.cloudformation/ref-or-spec clojure.core/boolean?))
 (clojure.spec.alpha/def
  :portkey.cloudformation.cognito/admin-create-user-config
  (clojure.spec.alpha/keys
   :req
   []
   :opt
   [:portkey.cloudformation.cognito/invite-message-template
    :portkey.cloudformation.cognito/unused-account-validity-days
    :portkey.cloudformation.cognito/allow-admin-create-user-only])))
(do
 (clojure.spec.alpha/def
  :portkey.cloudformation.cognito/reply-to-email-address
  (portkey.cloudformation/ref-or-spec clojure.core/string?))
 (clojure.spec.alpha/def
  :portkey.cloudformation.cognito/source-arn
  (portkey.cloudformation/ref-or-spec clojure.core/string?))
 (clojure.spec.alpha/def
  :portkey.cloudformation.cognito/email-configuration
  (clojure.spec.alpha/keys
   :req
   []
   :opt
   [:portkey.cloudformation.cognito/reply-to-email-address
    :portkey.cloudformation.cognito/source-arn])))
