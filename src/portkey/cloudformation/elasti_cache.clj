(ns portkey.cloudformation.elasti-cache
  "AUTOGENERATED clojure.spec definitions"
  (:require [clojure.spec.alpha]
            [portkey.cloudformation]))

(do
 (clojure.core/defmethod
  portkey.cloudformation/resource-type-spec
  :portkey.cloudformation.elasti-cache/replication-group
  [___19567__auto__]
  (clojure.spec.alpha/keys
   :req
   [:portkey.cloudformation/id
    :portkey.cloudformation/type
    :portkey.cloudformation.elasti-cache/replication-group-description]
   :opt
   [:portkey.cloudformation.elasti-cache/cache-node-type
    :portkey.cloudformation.elasti-cache/cache-subnet-group-name
    :portkey.cloudformation.elasti-cache/num-node-groups
    :portkey.cloudformation.elasti-cache/auth-token
    :portkey.cloudformation.elasti-cache/snapshot-arns
    :portkey.cloudformation.elasti-cache/security-group-ids
    :portkey.cloudformation.elasti-cache/preferred-maintenance-window
    :portkey.cloudformation.elasti-cache/auto-minor-version-upgrade
    :portkey.cloudformation.elasti-cache/replicas-per-node-group
    :portkey.cloudformation.elasti-cache/tags
    :portkey.cloudformation.elasti-cache/preferred-cache-cluster-a-zs
    :portkey.cloudformation.elasti-cache/at-rest-encryption-enabled
    :portkey.cloudformation.elasti-cache/transit-encryption-enabled
    :portkey.cloudformation.elasti-cache/primary-cluster-id
    :portkey.cloudformation.elasti-cache/engine-version
    :portkey.cloudformation.elasti-cache/notification-topic-arn
    :portkey.cloudformation.elasti-cache/port
    :portkey.cloudformation.elasti-cache/snapshot-window
    :portkey.cloudformation.elasti-cache/node-group-configuration
    :portkey.cloudformation.elasti-cache/snapshotting-cluster-id
    :portkey.cloudformation.elasti-cache/replication-group-id
    :portkey.cloudformation.elasti-cache/cache-parameter-group-name
    :portkey.cloudformation.elasti-cache/snapshot-retention-limit
    :portkey.cloudformation.elasti-cache/automatic-failover-enabled
    :portkey.cloudformation.elasti-cache/num-cache-clusters
    :portkey.cloudformation.elasti-cache/engine
    :portkey.cloudformation.elasti-cache/cache-security-group-names
    :portkey.cloudformation.elasti-cache/snapshot-name]))
 (clojure.spec.alpha/def
  :portkey.cloudformation.elasti-cache/cache-node-type
  (portkey.cloudformation/ref-or-spec clojure.core/string?))
 (clojure.spec.alpha/def
  :portkey.cloudformation.elasti-cache/cache-subnet-group-name
  (portkey.cloudformation/ref-or-spec clojure.core/string?))
 (clojure.spec.alpha/def
  :portkey.cloudformation.elasti-cache/num-node-groups
  (portkey.cloudformation/ref-or-spec clojure.core/integer?))
 (clojure.spec.alpha/def
  :portkey.cloudformation.elasti-cache/auth-token
  (portkey.cloudformation/ref-or-spec clojure.core/string?))
 (clojure.spec.alpha/def
  :portkey.cloudformation.elasti-cache/preferred-maintenance-window
  (portkey.cloudformation/ref-or-spec clojure.core/string?))
 (clojure.spec.alpha/def
  :portkey.cloudformation.elasti-cache/auto-minor-version-upgrade
  (portkey.cloudformation/ref-or-spec clojure.core/boolean?))
 (clojure.spec.alpha/def
  :portkey.cloudformation.elasti-cache/replicas-per-node-group
  (portkey.cloudformation/ref-or-spec clojure.core/integer?))
 (clojure.spec.alpha/def
  :portkey.cloudformation.elasti-cache/at-rest-encryption-enabled
  (portkey.cloudformation/ref-or-spec clojure.core/boolean?))
 (clojure.spec.alpha/def
  :portkey.cloudformation.elasti-cache/transit-encryption-enabled
  (portkey.cloudformation/ref-or-spec clojure.core/boolean?))
 (clojure.spec.alpha/def
  :portkey.cloudformation.elasti-cache/primary-cluster-id
  (portkey.cloudformation/ref-or-spec clojure.core/string?))
 (clojure.spec.alpha/def
  :portkey.cloudformation.elasti-cache/engine-version
  (portkey.cloudformation/ref-or-spec clojure.core/string?))
 (clojure.spec.alpha/def
  :portkey.cloudformation.elasti-cache/notification-topic-arn
  (portkey.cloudformation/ref-or-spec clojure.core/string?))
 (clojure.spec.alpha/def
  :portkey.cloudformation.elasti-cache/port
  (portkey.cloudformation/ref-or-spec clojure.core/integer?))
 (clojure.spec.alpha/def
  :portkey.cloudformation.elasti-cache/snapshot-window
  (portkey.cloudformation/ref-or-spec clojure.core/string?))
 (clojure.spec.alpha/def
  :portkey.cloudformation.elasti-cache/snapshotting-cluster-id
  (portkey.cloudformation/ref-or-spec clojure.core/string?))
 (clojure.spec.alpha/def
  :portkey.cloudformation.elasti-cache/replication-group-id
  (portkey.cloudformation/ref-or-spec clojure.core/string?))
 (clojure.spec.alpha/def
  :portkey.cloudformation.elasti-cache/cache-parameter-group-name
  (portkey.cloudformation/ref-or-spec clojure.core/string?))
 (clojure.spec.alpha/def
  :portkey.cloudformation.elasti-cache/snapshot-retention-limit
  (portkey.cloudformation/ref-or-spec clojure.core/integer?))
 (clojure.spec.alpha/def
  :portkey.cloudformation.elasti-cache/automatic-failover-enabled
  (portkey.cloudformation/ref-or-spec clojure.core/boolean?))
 (clojure.spec.alpha/def
  :portkey.cloudformation.elasti-cache/num-cache-clusters
  (portkey.cloudformation/ref-or-spec clojure.core/integer?))
 (clojure.spec.alpha/def
  :portkey.cloudformation.elasti-cache/engine
  (portkey.cloudformation/ref-or-spec clojure.core/string?))
 (clojure.spec.alpha/def
  :portkey.cloudformation.elasti-cache/replication-group-description
  (portkey.cloudformation/ref-or-spec clojure.core/string?))
 (clojure.spec.alpha/def
  :portkey.cloudformation.elasti-cache/snapshot-name
  (portkey.cloudformation/ref-or-spec clojure.core/string?)))
(do
 (clojure.core/defmethod
  portkey.cloudformation/resource-type-spec
  :portkey.cloudformation.elasti-cache/cache-cluster
  [___19567__auto__]
  (clojure.spec.alpha/keys
   :req
   [:portkey.cloudformation/id
    :portkey.cloudformation/type
    :portkey.cloudformation.elasti-cache/cache-node-type
    :portkey.cloudformation.elasti-cache/num-cache-nodes
    :portkey.cloudformation.elasti-cache/engine]
   :opt
   [:portkey.cloudformation.elasti-cache/cache-subnet-group-name
    :portkey.cloudformation.elasti-cache/az-mode
    :portkey.cloudformation.elasti-cache/preferred-availability-zone
    :portkey.cloudformation.elasti-cache/snapshot-arns
    :portkey.cloudformation.elasti-cache/preferred-maintenance-window
    :portkey.cloudformation.elasti-cache/preferred-availability-zones
    :portkey.cloudformation.elasti-cache/auto-minor-version-upgrade
    :portkey.cloudformation.elasti-cache/tags
    :portkey.cloudformation.elasti-cache/vpc-security-group-ids
    :portkey.cloudformation.elasti-cache/engine-version
    :portkey.cloudformation.elasti-cache/notification-topic-arn
    :portkey.cloudformation.elasti-cache/port
    :portkey.cloudformation.elasti-cache/snapshot-window
    :portkey.cloudformation.elasti-cache/cache-parameter-group-name
    :portkey.cloudformation.elasti-cache/snapshot-retention-limit
    :portkey.cloudformation.elasti-cache/cluster-name
    :portkey.cloudformation.elasti-cache/cache-security-group-names
    :portkey.cloudformation.elasti-cache/snapshot-name]))
 (clojure.spec.alpha/def
  :portkey.cloudformation.elasti-cache/cache-node-type
  (portkey.cloudformation/ref-or-spec clojure.core/string?))
 (clojure.spec.alpha/def
  :portkey.cloudformation.elasti-cache/cache-subnet-group-name
  (portkey.cloudformation/ref-or-spec clojure.core/string?))
 (clojure.spec.alpha/def
  :portkey.cloudformation.elasti-cache/az-mode
  (portkey.cloudformation/ref-or-spec clojure.core/string?))
 (clojure.spec.alpha/def
  :portkey.cloudformation.elasti-cache/preferred-availability-zone
  (portkey.cloudformation/ref-or-spec clojure.core/string?))
 (clojure.spec.alpha/def
  :portkey.cloudformation.elasti-cache/preferred-maintenance-window
  (portkey.cloudformation/ref-or-spec clojure.core/string?))
 (clojure.spec.alpha/def
  :portkey.cloudformation.elasti-cache/auto-minor-version-upgrade
  (portkey.cloudformation/ref-or-spec clojure.core/boolean?))
 (clojure.spec.alpha/def
  :portkey.cloudformation.elasti-cache/num-cache-nodes
  (portkey.cloudformation/ref-or-spec clojure.core/integer?))
 (clojure.spec.alpha/def
  :portkey.cloudformation.elasti-cache/engine-version
  (portkey.cloudformation/ref-or-spec clojure.core/string?))
 (clojure.spec.alpha/def
  :portkey.cloudformation.elasti-cache/notification-topic-arn
  (portkey.cloudformation/ref-or-spec clojure.core/string?))
 (clojure.spec.alpha/def
  :portkey.cloudformation.elasti-cache/port
  (portkey.cloudformation/ref-or-spec clojure.core/integer?))
 (clojure.spec.alpha/def
  :portkey.cloudformation.elasti-cache/snapshot-window
  (portkey.cloudformation/ref-or-spec clojure.core/string?))
 (clojure.spec.alpha/def
  :portkey.cloudformation.elasti-cache/cache-parameter-group-name
  (portkey.cloudformation/ref-or-spec clojure.core/string?))
 (clojure.spec.alpha/def
  :portkey.cloudformation.elasti-cache/snapshot-retention-limit
  (portkey.cloudformation/ref-or-spec clojure.core/integer?))
 (clojure.spec.alpha/def
  :portkey.cloudformation.elasti-cache/cluster-name
  (portkey.cloudformation/ref-or-spec clojure.core/string?))
 (clojure.spec.alpha/def
  :portkey.cloudformation.elasti-cache/engine
  (portkey.cloudformation/ref-or-spec clojure.core/string?))
 (clojure.spec.alpha/def
  :portkey.cloudformation.elasti-cache/snapshot-name
  (portkey.cloudformation/ref-or-spec clojure.core/string?)))
(do
 (clojure.core/defmethod
  portkey.cloudformation/resource-type-spec
  :portkey.cloudformation.elasti-cache/parameter-group
  [___19567__auto__]
  (clojure.spec.alpha/keys
   :req
   [:portkey.cloudformation/id
    :portkey.cloudformation/type
    :portkey.cloudformation.elasti-cache/cache-parameter-group-family
    :portkey.cloudformation.elasti-cache/description]
   :opt
   [:portkey.cloudformation.elasti-cache/properties]))
 (clojure.spec.alpha/def
  :portkey.cloudformation.elasti-cache/cache-parameter-group-family
  (portkey.cloudformation/ref-or-spec clojure.core/string?))
 (clojure.spec.alpha/def
  :portkey.cloudformation.elasti-cache/description
  (portkey.cloudformation/ref-or-spec clojure.core/string?)))
(do
 (clojure.core/defmethod
  portkey.cloudformation/resource-type-spec
  :portkey.cloudformation.elasti-cache/subnet-group
  [___19567__auto__]
  (clojure.spec.alpha/keys
   :req
   [:portkey.cloudformation/id
    :portkey.cloudformation/type
    :portkey.cloudformation.elasti-cache/description
    :portkey.cloudformation.elasti-cache/subnet-ids]
   :opt
   [:portkey.cloudformation.elasti-cache/cache-subnet-group-name]))
 (clojure.spec.alpha/def
  :portkey.cloudformation.elasti-cache/cache-subnet-group-name
  (portkey.cloudformation/ref-or-spec clojure.core/string?))
 (clojure.spec.alpha/def
  :portkey.cloudformation.elasti-cache/description
  (portkey.cloudformation/ref-or-spec clojure.core/string?)))
(do
 (clojure.core/defmethod
  portkey.cloudformation/resource-type-spec
  :portkey.cloudformation.elasti-cache/security-group-ingress
  [___19567__auto__]
  (clojure.spec.alpha/keys
   :req
   [:portkey.cloudformation/id
    :portkey.cloudformation/type
    :portkey.cloudformation.elasti-cache/cache-security-group-name
    :portkey.cloudformation.elasti-cache/ec2-security-group-name]
   :opt
   [:portkey.cloudformation.elasti-cache/ec2-security-group-owner-id]))
 (clojure.spec.alpha/def
  :portkey.cloudformation.elasti-cache/cache-security-group-name
  (portkey.cloudformation/ref-or-spec clojure.core/string?))
 (clojure.spec.alpha/def
  :portkey.cloudformation.elasti-cache/ec2-security-group-name
  (portkey.cloudformation/ref-or-spec clojure.core/string?))
 (clojure.spec.alpha/def
  :portkey.cloudformation.elasti-cache/ec2-security-group-owner-id
  (portkey.cloudformation/ref-or-spec clojure.core/string?)))
(do
 (clojure.core/defmethod
  portkey.cloudformation/resource-type-spec
  :portkey.cloudformation.elasti-cache/security-group
  [___19567__auto__]
  (clojure.spec.alpha/keys
   :req
   [:portkey.cloudformation/id
    :portkey.cloudformation/type
    :portkey.cloudformation.elasti-cache/description]
   :opt
   []))
 (clojure.spec.alpha/def
  :portkey.cloudformation.elasti-cache/description
  (portkey.cloudformation/ref-or-spec clojure.core/string?)))
(do
 (clojure.spec.alpha/def
  :portkey.cloudformation.elasti-cache/primary-availability-zone
  (portkey.cloudformation/ref-or-spec clojure.core/string?))
 (clojure.spec.alpha/def
  :portkey.cloudformation.elasti-cache/replica-count
  (portkey.cloudformation/ref-or-spec clojure.core/integer?))
 (clojure.spec.alpha/def
  :portkey.cloudformation.elasti-cache/slots
  (portkey.cloudformation/ref-or-spec clojure.core/string?))
 (clojure.spec.alpha/def
  :portkey.cloudformation.elasti-cache/node-group-configuration
  (clojure.spec.alpha/keys
   :req
   []
   :opt
   [:portkey.cloudformation.elasti-cache/primary-availability-zone
    :portkey.cloudformation.elasti-cache/replica-availability-zones
    :portkey.cloudformation.elasti-cache/replica-count
    :portkey.cloudformation.elasti-cache/slots])))
