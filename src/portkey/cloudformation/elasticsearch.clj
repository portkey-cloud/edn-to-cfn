(ns portkey.cloudformation.elasticsearch
  "AUTOGENERATED clojure.spec definitions"
  (:require [clojure.spec.alpha]
            [portkey.cloudformation]))

(do
 (clojure.core/defmethod
  portkey.cloudformation/resource-type-spec
  :portkey.cloudformation.elasticsearch/domain
  [___19567__auto__]
  (clojure.spec.alpha/keys
   :req
   [:portkey.cloudformation/id :portkey.cloudformation/type]
   :opt
   [:portkey.cloudformation.elasticsearch/snapshot-options
    :portkey.cloudformation.elasticsearch/ebs-options
    :portkey.cloudformation.elasticsearch/elasticsearch-version
    :portkey.cloudformation.elasticsearch/access-policies
    :portkey.cloudformation.elasticsearch/tags
    :portkey.cloudformation.elasticsearch/elasticsearch-cluster-config
    :portkey.cloudformation.elasticsearch/advanced-options
    :portkey.cloudformation.elasticsearch/domain-name
    :portkey.cloudformation.elasticsearch/vpc-options]))
 (clojure.spec.alpha/def
  :portkey.cloudformation.elasticsearch/elasticsearch-version
  (portkey.cloudformation/ref-or-spec clojure.core/string?))
 (clojure.spec.alpha/def
  :portkey.cloudformation.elasticsearch/access-policies
  (portkey.cloudformation/ref-or-spec clojure.core/any?))
 (clojure.spec.alpha/def
  :portkey.cloudformation.elasticsearch/domain-name
  (portkey.cloudformation/ref-or-spec clojure.core/string?)))
(do
 (clojure.spec.alpha/def
  :portkey.cloudformation.elasticsearch/ebs-enabled
  (portkey.cloudformation/ref-or-spec clojure.core/boolean?))
 (clojure.spec.alpha/def
  :portkey.cloudformation.elasticsearch/iops
  (portkey.cloudformation/ref-or-spec clojure.core/integer?))
 (clojure.spec.alpha/def
  :portkey.cloudformation.elasticsearch/volume-size
  (portkey.cloudformation/ref-or-spec clojure.core/integer?))
 (clojure.spec.alpha/def
  :portkey.cloudformation.elasticsearch/volume-type
  (portkey.cloudformation/ref-or-spec clojure.core/string?))
 (clojure.spec.alpha/def
  :portkey.cloudformation.elasticsearch/ebs-options
  (clojure.spec.alpha/keys
   :req
   []
   :opt
   [:portkey.cloudformation.elasticsearch/ebs-enabled
    :portkey.cloudformation.elasticsearch/iops
    :portkey.cloudformation.elasticsearch/volume-size
    :portkey.cloudformation.elasticsearch/volume-type])))
(do
 (clojure.spec.alpha/def
  :portkey.cloudformation.elasticsearch/dedicated-master-count
  (portkey.cloudformation/ref-or-spec clojure.core/integer?))
 (clojure.spec.alpha/def
  :portkey.cloudformation.elasticsearch/dedicated-master-enabled
  (portkey.cloudformation/ref-or-spec clojure.core/boolean?))
 (clojure.spec.alpha/def
  :portkey.cloudformation.elasticsearch/dedicated-master-type
  (portkey.cloudformation/ref-or-spec clojure.core/string?))
 (clojure.spec.alpha/def
  :portkey.cloudformation.elasticsearch/instance-count
  (portkey.cloudformation/ref-or-spec clojure.core/integer?))
 (clojure.spec.alpha/def
  :portkey.cloudformation.elasticsearch/instance-type
  (portkey.cloudformation/ref-or-spec clojure.core/string?))
 (clojure.spec.alpha/def
  :portkey.cloudformation.elasticsearch/zone-awareness-enabled
  (portkey.cloudformation/ref-or-spec clojure.core/boolean?))
 (clojure.spec.alpha/def
  :portkey.cloudformation.elasticsearch/elasticsearch-cluster-config
  (clojure.spec.alpha/keys
   :req
   []
   :opt
   [:portkey.cloudformation.elasticsearch/dedicated-master-count
    :portkey.cloudformation.elasticsearch/dedicated-master-enabled
    :portkey.cloudformation.elasticsearch/dedicated-master-type
    :portkey.cloudformation.elasticsearch/instance-count
    :portkey.cloudformation.elasticsearch/instance-type
    :portkey.cloudformation.elasticsearch/zone-awareness-enabled])))
(do
 (clojure.spec.alpha/def
  :portkey.cloudformation.elasticsearch/automated-snapshot-start-hour
  (portkey.cloudformation/ref-or-spec clojure.core/integer?))
 (clojure.spec.alpha/def
  :portkey.cloudformation.elasticsearch/snapshot-options
  (clojure.spec.alpha/keys
   :req
   []
   :opt
   [:portkey.cloudformation.elasticsearch/automated-snapshot-start-hour])))
(do
 (clojure.spec.alpha/def
  :portkey.cloudformation.elasticsearch/vpc-options
  (clojure.spec.alpha/keys
   :req
   []
   :opt
   [:portkey.cloudformation.elasticsearch/security-group-ids
    :portkey.cloudformation.elasticsearch/subnet-ids])))
