(ns portkey.cloudformation.cloud-formation
  "AUTOGENERATED clojure.spec definitions"
  (:require [clojure.spec.alpha]
            [portkey.cloudformation]))

(do
 (clojure.core/defmethod
  portkey.cloudformation/resource-type-spec
  :portkey.cloudformation.cloud-formation/custom-resource
  [___15594__auto__]
  (clojure.spec.alpha/keys
   :req
   [:portkey.cloudformation.cloud-formation/service-token]
   :opt
   []))
 (clojure.spec.alpha/def
  :portkey.cloudformation.cloud-formation/service-token
  clojure.core/string?))
(do
 (clojure.core/defmethod
  portkey.cloudformation/resource-type-spec
  :portkey.cloudformation.cloud-formation/wait-condition-handle
  [___15594__auto__]
  (clojure.spec.alpha/keys :req [] :opt [])))
(do
 (clojure.core/defmethod
  portkey.cloudformation/resource-type-spec
  :portkey.cloudformation.cloud-formation/stack
  [___15594__auto__]
  (clojure.spec.alpha/keys
   :req
   [:portkey.cloudformation.cloud-formation/template-url]
   :opt
   [:portkey.cloudformation.cloud-formation/notification-ar-ns
    :portkey.cloudformation.cloud-formation/parameters
    :portkey.cloudformation.cloud-formation/tags
    :portkey.cloudformation.cloud-formation/timeout-in-minutes]))
 (clojure.spec.alpha/def
  :portkey.cloudformation.cloud-formation/template-url
  clojure.core/string?)
 (clojure.spec.alpha/def
  :portkey.cloudformation.cloud-formation/timeout-in-minutes
  clojure.core/integer?))
(do
 (clojure.core/defmethod
  portkey.cloudformation/resource-type-spec
  :portkey.cloudformation.cloud-formation/wait-condition
  [___15594__auto__]
  (clojure.spec.alpha/keys
   :req
   [:portkey.cloudformation.cloud-formation/handle
    :portkey.cloudformation.cloud-formation/timeout]
   :opt
   [:portkey.cloudformation.cloud-formation/count]))
 (clojure.spec.alpha/def
  :portkey.cloudformation.cloud-formation/count
  clojure.core/integer?)
 (clojure.spec.alpha/def
  :portkey.cloudformation.cloud-formation/handle
  clojure.core/string?)
 (clojure.spec.alpha/def
  :portkey.cloudformation.cloud-formation/timeout
  clojure.core/string?))
