(ns portkey.cloudformation.data-pipeline
  "AUTOGENERATED clojure.spec definitions"
  (:require [clojure.spec.alpha]
            [portkey.cloudformation]))

(do
 (clojure.core/defmethod
  portkey.cloudformation/resource-type-spec
  :portkey.cloudformation.data-pipeline/pipeline
  [___15594__auto__]
  (clojure.spec.alpha/keys
   :req
   [:portkey.cloudformation.data-pipeline/name
    :portkey.cloudformation.data-pipeline/parameter-objects]
   :opt
   [:portkey.cloudformation.data-pipeline/activate
    :portkey.cloudformation.data-pipeline/description
    :portkey.cloudformation.data-pipeline/parameter-values
    :portkey.cloudformation.data-pipeline/pipeline-objects
    :portkey.cloudformation.data-pipeline/pipeline-tags]))
 (clojure.spec.alpha/def
  :portkey.cloudformation.data-pipeline/activate
  clojure.core/boolean?)
 (clojure.spec.alpha/def
  :portkey.cloudformation.data-pipeline/description
  clojure.core/string?)
 (clojure.spec.alpha/def
  :portkey.cloudformation.data-pipeline/name
  clojure.core/string?))
(do
 (clojure.spec.alpha/def
  :portkey.cloudformation.data-pipeline/id
  clojure.core/string?)
 (clojure.spec.alpha/def
  :portkey.cloudformation.data-pipeline/name
  clojure.core/string?)
 (clojure.spec.alpha/def
  :portkey.cloudformation.data-pipeline/pipeline-object
  (clojure.spec.alpha/keys
   :req
   [:portkey.cloudformation.data-pipeline/fields
    :portkey.cloudformation.data-pipeline/id
    :portkey.cloudformation.data-pipeline/name]
   :opt
   [])))
(do
 (clojure.spec.alpha/def
  :portkey.cloudformation.data-pipeline/key
  clojure.core/string?)
 (clojure.spec.alpha/def
  :portkey.cloudformation.data-pipeline/string-value
  clojure.core/string?)
 (clojure.spec.alpha/def
  :portkey.cloudformation.data-pipeline/parameter-attribute
  (clojure.spec.alpha/keys
   :req
   [:portkey.cloudformation.data-pipeline/key
    :portkey.cloudformation.data-pipeline/string-value]
   :opt
   [])))
(do
 (clojure.spec.alpha/def
  :portkey.cloudformation.data-pipeline/key
  clojure.core/string?)
 (clojure.spec.alpha/def
  :portkey.cloudformation.data-pipeline/value
  clojure.core/string?)
 (clojure.spec.alpha/def
  :portkey.cloudformation.data-pipeline/pipeline-tag
  (clojure.spec.alpha/keys
   :req
   [:portkey.cloudformation.data-pipeline/key
    :portkey.cloudformation.data-pipeline/value]
   :opt
   [])))
(do
 (clojure.spec.alpha/def
  :portkey.cloudformation.data-pipeline/id
  clojure.core/string?)
 (clojure.spec.alpha/def
  :portkey.cloudformation.data-pipeline/string-value
  clojure.core/string?)
 (clojure.spec.alpha/def
  :portkey.cloudformation.data-pipeline/parameter-value
  (clojure.spec.alpha/keys
   :req
   [:portkey.cloudformation.data-pipeline/id
    :portkey.cloudformation.data-pipeline/string-value]
   :opt
   [])))
(do
 (clojure.spec.alpha/def
  :portkey.cloudformation.data-pipeline/id
  clojure.core/string?)
 (clojure.spec.alpha/def
  :portkey.cloudformation.data-pipeline/parameter-object
  (clojure.spec.alpha/keys
   :req
   [:portkey.cloudformation.data-pipeline/attributes
    :portkey.cloudformation.data-pipeline/id]
   :opt
   [])))
(do
 (clojure.spec.alpha/def
  :portkey.cloudformation.data-pipeline/key
  clojure.core/string?)
 (clojure.spec.alpha/def
  :portkey.cloudformation.data-pipeline/ref-value
  clojure.core/string?)
 (clojure.spec.alpha/def
  :portkey.cloudformation.data-pipeline/string-value
  clojure.core/string?)
 (clojure.spec.alpha/def
  :portkey.cloudformation.data-pipeline/field
  (clojure.spec.alpha/keys
   :req
   [:portkey.cloudformation.data-pipeline/key]
   :opt
   [:portkey.cloudformation.data-pipeline/ref-value
    :portkey.cloudformation.data-pipeline/string-value])))
