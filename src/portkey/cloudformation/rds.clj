(ns portkey.cloudformation.rds
  "AUTOGENERATED clojure.spec definitions"
  (:require [clojure.spec.alpha]
            [portkey.cloudformation]))

(do
 (clojure.core/defmethod
  portkey.cloudformation/resource-type-spec
  :portkey.cloudformation.rds/event-subscription
  [___15594__auto__]
  (clojure.spec.alpha/keys
   :req
   [:portkey.cloudformation.rds/sns-topic-arn]
   :opt
   [:portkey.cloudformation.rds/enabled
    :portkey.cloudformation.rds/event-categories
    :portkey.cloudformation.rds/source-ids
    :portkey.cloudformation.rds/source-type]))
 (clojure.spec.alpha/def
  :portkey.cloudformation.rds/enabled
  clojure.core/boolean?)
 (clojure.spec.alpha/def
  :portkey.cloudformation.rds/sns-topic-arn
  clojure.core/string?)
 (clojure.spec.alpha/def
  :portkey.cloudformation.rds/source-type
  clojure.core/string?))
(do
 (clojure.core/defmethod
  portkey.cloudformation/resource-type-spec
  :portkey.cloudformation.rds/db-instance
  [___15594__auto__]
  (clojure.spec.alpha/keys
   :req
   [:portkey.cloudformation.rds/db-instance-class]
   :opt
   [:portkey.cloudformation.rds/backup-retention-period
    :portkey.cloudformation.rds/option-group-name
    :portkey.cloudformation.rds/db-security-groups
    :portkey.cloudformation.rds/character-set-name
    :portkey.cloudformation.rds/publicly-accessible
    :portkey.cloudformation.rds/source-region
    :portkey.cloudformation.rds/domain-iam-role-name
    :portkey.cloudformation.rds/preferred-maintenance-window
    :portkey.cloudformation.rds/copy-tags-to-snapshot
    :portkey.cloudformation.rds/db-instance-identifier
    :portkey.cloudformation.rds/auto-minor-version-upgrade
    :portkey.cloudformation.rds/tags
    :portkey.cloudformation.rds/db-name
    :portkey.cloudformation.rds/vpc-security-groups
    :portkey.cloudformation.rds/availability-zone
    :portkey.cloudformation.rds/master-user-password
    :portkey.cloudformation.rds/license-model
    :portkey.cloudformation.rds/domain
    :portkey.cloudformation.rds/allow-major-version-upgrade
    :portkey.cloudformation.rds/allocated-storage
    :portkey.cloudformation.rds/source-db-instance-identifier
    :portkey.cloudformation.rds/monitoring-interval
    :portkey.cloudformation.rds/timezone
    :portkey.cloudformation.rds/master-username
    :portkey.cloudformation.rds/engine-version
    :portkey.cloudformation.rds/db-snapshot-identifier
    :portkey.cloudformation.rds/storage-encrypted
    :portkey.cloudformation.rds/db-subnet-group-name
    :portkey.cloudformation.rds/port
    :portkey.cloudformation.rds/kms-key-id
    :portkey.cloudformation.rds/iops
    :portkey.cloudformation.rds/storage-type
    :portkey.cloudformation.rds/engine
    :portkey.cloudformation.rds/db-parameter-group-name
    :portkey.cloudformation.rds/monitoring-role-arn
    :portkey.cloudformation.rds/multi-az
    :portkey.cloudformation.rds/db-cluster-identifier
    :portkey.cloudformation.rds/preferred-backup-window]))
 (clojure.spec.alpha/def
  :portkey.cloudformation.rds/backup-retention-period
  clojure.core/string?)
 (clojure.spec.alpha/def
  :portkey.cloudformation.rds/option-group-name
  clojure.core/string?)
 (clojure.spec.alpha/def
  :portkey.cloudformation.rds/character-set-name
  clojure.core/string?)
 (clojure.spec.alpha/def
  :portkey.cloudformation.rds/publicly-accessible
  clojure.core/boolean?)
 (clojure.spec.alpha/def
  :portkey.cloudformation.rds/source-region
  clojure.core/string?)
 (clojure.spec.alpha/def
  :portkey.cloudformation.rds/domain-iam-role-name
  clojure.core/string?)
 (clojure.spec.alpha/def
  :portkey.cloudformation.rds/preferred-maintenance-window
  clojure.core/string?)
 (clojure.spec.alpha/def
  :portkey.cloudformation.rds/copy-tags-to-snapshot
  clojure.core/boolean?)
 (clojure.spec.alpha/def
  :portkey.cloudformation.rds/db-instance-identifier
  clojure.core/string?)
 (clojure.spec.alpha/def
  :portkey.cloudformation.rds/auto-minor-version-upgrade
  clojure.core/boolean?)
 (clojure.spec.alpha/def
  :portkey.cloudformation.rds/db-name
  clojure.core/string?)
 (clojure.spec.alpha/def
  :portkey.cloudformation.rds/availability-zone
  clojure.core/string?)
 (clojure.spec.alpha/def
  :portkey.cloudformation.rds/master-user-password
  clojure.core/string?)
 (clojure.spec.alpha/def
  :portkey.cloudformation.rds/license-model
  clojure.core/string?)
 (clojure.spec.alpha/def
  :portkey.cloudformation.rds/domain
  clojure.core/string?)
 (clojure.spec.alpha/def
  :portkey.cloudformation.rds/allow-major-version-upgrade
  clojure.core/boolean?)
 (clojure.spec.alpha/def
  :portkey.cloudformation.rds/allocated-storage
  clojure.core/string?)
 (clojure.spec.alpha/def
  :portkey.cloudformation.rds/source-db-instance-identifier
  clojure.core/string?)
 (clojure.spec.alpha/def
  :portkey.cloudformation.rds/monitoring-interval
  clojure.core/integer?)
 (clojure.spec.alpha/def
  :portkey.cloudformation.rds/timezone
  clojure.core/string?)
 (clojure.spec.alpha/def
  :portkey.cloudformation.rds/master-username
  clojure.core/string?)
 (clojure.spec.alpha/def
  :portkey.cloudformation.rds/engine-version
  clojure.core/string?)
 (clojure.spec.alpha/def
  :portkey.cloudformation.rds/db-snapshot-identifier
  clojure.core/string?)
 (clojure.spec.alpha/def
  :portkey.cloudformation.rds/storage-encrypted
  clojure.core/boolean?)
 (clojure.spec.alpha/def
  :portkey.cloudformation.rds/db-subnet-group-name
  clojure.core/string?)
 (clojure.spec.alpha/def
  :portkey.cloudformation.rds/port
  clojure.core/string?)
 (clojure.spec.alpha/def
  :portkey.cloudformation.rds/kms-key-id
  clojure.core/string?)
 (clojure.spec.alpha/def
  :portkey.cloudformation.rds/iops
  clojure.core/integer?)
 (clojure.spec.alpha/def
  :portkey.cloudformation.rds/storage-type
  clojure.core/string?)
 (clojure.spec.alpha/def
  :portkey.cloudformation.rds/db-instance-class
  clojure.core/string?)
 (clojure.spec.alpha/def
  :portkey.cloudformation.rds/engine
  clojure.core/string?)
 (clojure.spec.alpha/def
  :portkey.cloudformation.rds/db-parameter-group-name
  clojure.core/string?)
 (clojure.spec.alpha/def
  :portkey.cloudformation.rds/monitoring-role-arn
  clojure.core/string?)
 (clojure.spec.alpha/def
  :portkey.cloudformation.rds/multi-az
  clojure.core/boolean?)
 (clojure.spec.alpha/def
  :portkey.cloudformation.rds/db-cluster-identifier
  clojure.core/string?)
 (clojure.spec.alpha/def
  :portkey.cloudformation.rds/preferred-backup-window
  clojure.core/string?))
(do
 (clojure.core/defmethod
  portkey.cloudformation/resource-type-spec
  :portkey.cloudformation.rds/db-security-group-ingress
  [___15594__auto__]
  (clojure.spec.alpha/keys
   :req
   [:portkey.cloudformation.rds/db-security-group-name]
   :opt
   [:portkey.cloudformation.rds/cidrip
    :portkey.cloudformation.rds/ec2-security-group-id
    :portkey.cloudformation.rds/ec2-security-group-name
    :portkey.cloudformation.rds/ec2-security-group-owner-id]))
 (clojure.spec.alpha/def
  :portkey.cloudformation.rds/cidrip
  clojure.core/string?)
 (clojure.spec.alpha/def
  :portkey.cloudformation.rds/db-security-group-name
  clojure.core/string?)
 (clojure.spec.alpha/def
  :portkey.cloudformation.rds/ec2-security-group-id
  clojure.core/string?)
 (clojure.spec.alpha/def
  :portkey.cloudformation.rds/ec2-security-group-name
  clojure.core/string?)
 (clojure.spec.alpha/def
  :portkey.cloudformation.rds/ec2-security-group-owner-id
  clojure.core/string?))
(do
 (clojure.core/defmethod
  portkey.cloudformation/resource-type-spec
  :portkey.cloudformation.rds/db-security-group
  [___15594__auto__]
  (clojure.spec.alpha/keys
   :req
   [:portkey.cloudformation.rds/db-security-group-ingress
    :portkey.cloudformation.rds/group-description]
   :opt
   [:portkey.cloudformation.rds/ec2-vpc-id
    :portkey.cloudformation.rds/tags]))
 (clojure.spec.alpha/def
  :portkey.cloudformation.rds/ec2-vpc-id
  clojure.core/string?)
 (clojure.spec.alpha/def
  :portkey.cloudformation.rds/group-description
  clojure.core/string?))
(do
 (clojure.core/defmethod
  portkey.cloudformation/resource-type-spec
  :portkey.cloudformation.rds/db-subnet-group
  [___15594__auto__]
  (clojure.spec.alpha/keys
   :req
   [:portkey.cloudformation.rds/db-subnet-group-description
    :portkey.cloudformation.rds/subnet-ids]
   :opt
   [:portkey.cloudformation.rds/db-subnet-group-name
    :portkey.cloudformation.rds/tags]))
 (clojure.spec.alpha/def
  :portkey.cloudformation.rds/db-subnet-group-description
  clojure.core/string?)
 (clojure.spec.alpha/def
  :portkey.cloudformation.rds/db-subnet-group-name
  clojure.core/string?))
(do
 (clojure.core/defmethod
  portkey.cloudformation/resource-type-spec
  :portkey.cloudformation.rds/option-group
  [___15594__auto__]
  (clojure.spec.alpha/keys
   :req
   [:portkey.cloudformation.rds/engine-name
    :portkey.cloudformation.rds/major-engine-version
    :portkey.cloudformation.rds/option-configurations
    :portkey.cloudformation.rds/option-group-description]
   :opt
   [:portkey.cloudformation.rds/tags]))
 (clojure.spec.alpha/def
  :portkey.cloudformation.rds/engine-name
  clojure.core/string?)
 (clojure.spec.alpha/def
  :portkey.cloudformation.rds/major-engine-version
  clojure.core/string?)
 (clojure.spec.alpha/def
  :portkey.cloudformation.rds/option-group-description
  clojure.core/string?))
(do
 (clojure.core/defmethod
  portkey.cloudformation/resource-type-spec
  :portkey.cloudformation.rds/db-cluster-parameter-group
  [___15594__auto__]
  (clojure.spec.alpha/keys
   :req
   [:portkey.cloudformation.rds/description
    :portkey.cloudformation.rds/family
    :portkey.cloudformation.rds/parameters]
   :opt
   [:portkey.cloudformation.rds/tags]))
 (clojure.spec.alpha/def
  :portkey.cloudformation.rds/description
  clojure.core/string?)
 (clojure.spec.alpha/def
  :portkey.cloudformation.rds/family
  clojure.core/string?)
 (clojure.spec.alpha/def
  :portkey.cloudformation.rds/parameters
  clojure.core/any?))
(do
 (clojure.core/defmethod
  portkey.cloudformation/resource-type-spec
  :portkey.cloudformation.rds/db-parameter-group
  [___15594__auto__]
  (clojure.spec.alpha/keys
   :req
   [:portkey.cloudformation.rds/description
    :portkey.cloudformation.rds/family]
   :opt
   [:portkey.cloudformation.rds/parameters
    :portkey.cloudformation.rds/tags]))
 (clojure.spec.alpha/def
  :portkey.cloudformation.rds/description
  clojure.core/string?)
 (clojure.spec.alpha/def
  :portkey.cloudformation.rds/family
  clojure.core/string?))
(do
 (clojure.core/defmethod
  portkey.cloudformation/resource-type-spec
  :portkey.cloudformation.rds/db-cluster
  [___15594__auto__]
  (clojure.spec.alpha/keys
   :req
   [:portkey.cloudformation.rds/engine]
   :opt
   [:portkey.cloudformation.rds/snapshot-identifier
    :portkey.cloudformation.rds/backup-retention-period
    :portkey.cloudformation.rds/replication-source-identifier
    :portkey.cloudformation.rds/database-name
    :portkey.cloudformation.rds/preferred-maintenance-window
    :portkey.cloudformation.rds/tags
    :portkey.cloudformation.rds/vpc-security-group-ids
    :portkey.cloudformation.rds/db-cluster-parameter-group-name
    :portkey.cloudformation.rds/master-user-password
    :portkey.cloudformation.rds/master-username
    :portkey.cloudformation.rds/engine-version
    :portkey.cloudformation.rds/storage-encrypted
    :portkey.cloudformation.rds/db-subnet-group-name
    :portkey.cloudformation.rds/port
    :portkey.cloudformation.rds/kms-key-id
    :portkey.cloudformation.rds/availability-zones
    :portkey.cloudformation.rds/db-cluster-identifier
    :portkey.cloudformation.rds/preferred-backup-window]))
 (clojure.spec.alpha/def
  :portkey.cloudformation.rds/snapshot-identifier
  clojure.core/string?)
 (clojure.spec.alpha/def
  :portkey.cloudformation.rds/backup-retention-period
  clojure.core/integer?)
 (clojure.spec.alpha/def
  :portkey.cloudformation.rds/replication-source-identifier
  clojure.core/string?)
 (clojure.spec.alpha/def
  :portkey.cloudformation.rds/database-name
  clojure.core/string?)
 (clojure.spec.alpha/def
  :portkey.cloudformation.rds/preferred-maintenance-window
  clojure.core/string?)
 (clojure.spec.alpha/def
  :portkey.cloudformation.rds/db-cluster-parameter-group-name
  clojure.core/string?)
 (clojure.spec.alpha/def
  :portkey.cloudformation.rds/master-user-password
  clojure.core/string?)
 (clojure.spec.alpha/def
  :portkey.cloudformation.rds/master-username
  clojure.core/string?)
 (clojure.spec.alpha/def
  :portkey.cloudformation.rds/engine-version
  clojure.core/string?)
 (clojure.spec.alpha/def
  :portkey.cloudformation.rds/storage-encrypted
  clojure.core/boolean?)
 (clojure.spec.alpha/def
  :portkey.cloudformation.rds/db-subnet-group-name
  clojure.core/string?)
 (clojure.spec.alpha/def
  :portkey.cloudformation.rds/port
  clojure.core/integer?)
 (clojure.spec.alpha/def
  :portkey.cloudformation.rds/kms-key-id
  clojure.core/string?)
 (clojure.spec.alpha/def
  :portkey.cloudformation.rds/engine
  clojure.core/string?)
 (clojure.spec.alpha/def
  :portkey.cloudformation.rds/db-cluster-identifier
  clojure.core/string?)
 (clojure.spec.alpha/def
  :portkey.cloudformation.rds/preferred-backup-window
  clojure.core/string?))
(do
 (clojure.spec.alpha/def
  :portkey.cloudformation.rds/cidrip
  clojure.core/string?)
 (clojure.spec.alpha/def
  :portkey.cloudformation.rds/ec2-security-group-id
  clojure.core/string?)
 (clojure.spec.alpha/def
  :portkey.cloudformation.rds/ec2-security-group-name
  clojure.core/string?)
 (clojure.spec.alpha/def
  :portkey.cloudformation.rds/ec2-security-group-owner-id
  clojure.core/string?)
 (clojure.spec.alpha/def
  :portkey.cloudformation.rds/ingress
  (clojure.spec.alpha/keys
   :req
   []
   :opt
   [:portkey.cloudformation.rds/cidrip
    :portkey.cloudformation.rds/ec2-security-group-id
    :portkey.cloudformation.rds/ec2-security-group-name
    :portkey.cloudformation.rds/ec2-security-group-owner-id])))
(do
 (clojure.spec.alpha/def
  :portkey.cloudformation.rds/option-name
  clojure.core/string?)
 (clojure.spec.alpha/def
  :portkey.cloudformation.rds/option-version
  clojure.core/string?)
 (clojure.spec.alpha/def
  :portkey.cloudformation.rds/port
  clojure.core/integer?)
 (clojure.spec.alpha/def
  :portkey.cloudformation.rds/option-configuration
  (clojure.spec.alpha/keys
   :req
   [:portkey.cloudformation.rds/option-name]
   :opt
   [:portkey.cloudformation.rds/db-security-group-memberships
    :portkey.cloudformation.rds/option-settings
    :portkey.cloudformation.rds/option-version
    :portkey.cloudformation.rds/port
    :portkey.cloudformation.rds/vpc-security-group-memberships])))
(do
 (clojure.spec.alpha/def
  :portkey.cloudformation.rds/name
  clojure.core/string?)
 (clojure.spec.alpha/def
  :portkey.cloudformation.rds/value
  clojure.core/string?)
 (clojure.spec.alpha/def
  :portkey.cloudformation.rds/option-setting
  (clojure.spec.alpha/keys
   :req
   []
   :opt
   [:portkey.cloudformation.rds/name
    :portkey.cloudformation.rds/value])))
