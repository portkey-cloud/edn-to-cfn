(ns portkey.cloudformation.directory-service
  "AUTOGENERATED clojure.spec definitions"
  (:require [clojure.spec.alpha]
            [portkey.cloudformation]))

(do
 (clojure.core/defmethod
  portkey.cloudformation/resource-type-spec
  :portkey.cloudformation.directory-service/microsoft-ad
  [___19567__auto__]
  (clojure.spec.alpha/keys
   :req
   [:portkey.cloudformation/id
    :portkey.cloudformation/type
    :portkey.cloudformation.directory-service/name
    :portkey.cloudformation.directory-service/password
    :portkey.cloudformation.directory-service/vpc-settings]
   :opt
   [:portkey.cloudformation.directory-service/create-alias
    :portkey.cloudformation.directory-service/enable-sso
    :portkey.cloudformation.directory-service/short-name]))
 (clojure.spec.alpha/def
  :portkey.cloudformation.directory-service/create-alias
  (portkey.cloudformation/ref-or-spec clojure.core/boolean?))
 (clojure.spec.alpha/def
  :portkey.cloudformation.directory-service/enable-sso
  (portkey.cloudformation/ref-or-spec clojure.core/boolean?))
 (clojure.spec.alpha/def
  :portkey.cloudformation.directory-service/name
  (portkey.cloudformation/ref-or-spec clojure.core/string?))
 (clojure.spec.alpha/def
  :portkey.cloudformation.directory-service/password
  (portkey.cloudformation/ref-or-spec clojure.core/string?))
 (clojure.spec.alpha/def
  :portkey.cloudformation.directory-service/short-name
  (portkey.cloudformation/ref-or-spec clojure.core/string?)))
(do
 (clojure.core/defmethod
  portkey.cloudformation/resource-type-spec
  :portkey.cloudformation.directory-service/simple-ad
  [___19567__auto__]
  (clojure.spec.alpha/keys
   :req
   [:portkey.cloudformation/id
    :portkey.cloudformation/type
    :portkey.cloudformation.directory-service/name
    :portkey.cloudformation.directory-service/password
    :portkey.cloudformation.directory-service/size
    :portkey.cloudformation.directory-service/vpc-settings]
   :opt
   [:portkey.cloudformation.directory-service/create-alias
    :portkey.cloudformation.directory-service/description
    :portkey.cloudformation.directory-service/enable-sso
    :portkey.cloudformation.directory-service/short-name]))
 (clojure.spec.alpha/def
  :portkey.cloudformation.directory-service/create-alias
  (portkey.cloudformation/ref-or-spec clojure.core/boolean?))
 (clojure.spec.alpha/def
  :portkey.cloudformation.directory-service/description
  (portkey.cloudformation/ref-or-spec clojure.core/string?))
 (clojure.spec.alpha/def
  :portkey.cloudformation.directory-service/enable-sso
  (portkey.cloudformation/ref-or-spec clojure.core/boolean?))
 (clojure.spec.alpha/def
  :portkey.cloudformation.directory-service/name
  (portkey.cloudformation/ref-or-spec clojure.core/string?))
 (clojure.spec.alpha/def
  :portkey.cloudformation.directory-service/password
  (portkey.cloudformation/ref-or-spec clojure.core/string?))
 (clojure.spec.alpha/def
  :portkey.cloudformation.directory-service/short-name
  (portkey.cloudformation/ref-or-spec clojure.core/string?))
 (clojure.spec.alpha/def
  :portkey.cloudformation.directory-service/size
  (portkey.cloudformation/ref-or-spec clojure.core/string?)))
(do
 (clojure.spec.alpha/def
  :portkey.cloudformation.directory-service/vpc-id
  (portkey.cloudformation/ref-or-spec clojure.core/string?))
 (clojure.spec.alpha/def
  :portkey.cloudformation.directory-service/vpc-settings
  (clojure.spec.alpha/keys
   :req
   [:portkey.cloudformation.directory-service/subnet-ids
    :portkey.cloudformation.directory-service/vpc-id]
   :opt
   [])))
(do
 (clojure.spec.alpha/def
  :portkey.cloudformation.directory-service/vpc-id
  (portkey.cloudformation/ref-or-spec clojure.core/string?))
 (clojure.spec.alpha/def
  :portkey.cloudformation.directory-service/vpc-settings
  (clojure.spec.alpha/keys
   :req
   [:portkey.cloudformation.directory-service/subnet-ids
    :portkey.cloudformation.directory-service/vpc-id]
   :opt
   [])))
