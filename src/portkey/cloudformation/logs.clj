(ns portkey.cloudformation.logs
  "AUTOGENERATED clojure.spec definitions"
  (:require [clojure.spec.alpha]
            [portkey.cloudformation]))

(do
 (clojure.core/defmethod
  portkey.cloudformation/resource-type-spec
  :portkey.cloudformation.logs/metric-filter
  [___19567__auto__]
  (clojure.spec.alpha/keys
   :req
   [:portkey.cloudformation/id
    :portkey.cloudformation/type
    :portkey.cloudformation.logs/filter-pattern
    :portkey.cloudformation.logs/log-group-name
    :portkey.cloudformation.logs/metric-transformations]
   :opt
   []))
 (clojure.spec.alpha/def
  :portkey.cloudformation.logs/filter-pattern
  (portkey.cloudformation/ref-or-spec clojure.core/string?))
 (clojure.spec.alpha/def
  :portkey.cloudformation.logs/log-group-name
  (portkey.cloudformation/ref-or-spec clojure.core/string?)))
(do
 (clojure.core/defmethod
  portkey.cloudformation/resource-type-spec
  :portkey.cloudformation.logs/log-group
  [___19567__auto__]
  (clojure.spec.alpha/keys
   :req
   [:portkey.cloudformation/id :portkey.cloudformation/type]
   :opt
   [:portkey.cloudformation.logs/log-group-name
    :portkey.cloudformation.logs/retention-in-days]))
 (clojure.spec.alpha/def
  :portkey.cloudformation.logs/log-group-name
  (portkey.cloudformation/ref-or-spec clojure.core/string?))
 (clojure.spec.alpha/def
  :portkey.cloudformation.logs/retention-in-days
  (portkey.cloudformation/ref-or-spec clojure.core/integer?)))
(do
 (clojure.core/defmethod
  portkey.cloudformation/resource-type-spec
  :portkey.cloudformation.logs/log-stream
  [___19567__auto__]
  (clojure.spec.alpha/keys
   :req
   [:portkey.cloudformation/id
    :portkey.cloudformation/type
    :portkey.cloudformation.logs/log-group-name]
   :opt
   [:portkey.cloudformation.logs/log-stream-name]))
 (clojure.spec.alpha/def
  :portkey.cloudformation.logs/log-group-name
  (portkey.cloudformation/ref-or-spec clojure.core/string?))
 (clojure.spec.alpha/def
  :portkey.cloudformation.logs/log-stream-name
  (portkey.cloudformation/ref-or-spec clojure.core/string?)))
(do
 (clojure.core/defmethod
  portkey.cloudformation/resource-type-spec
  :portkey.cloudformation.logs/destination
  [___19567__auto__]
  (clojure.spec.alpha/keys
   :req
   [:portkey.cloudformation/id
    :portkey.cloudformation/type
    :portkey.cloudformation.logs/destination-name
    :portkey.cloudformation.logs/destination-policy
    :portkey.cloudformation.logs/role-arn
    :portkey.cloudformation.logs/target-arn]
   :opt
   []))
 (clojure.spec.alpha/def
  :portkey.cloudformation.logs/destination-name
  (portkey.cloudformation/ref-or-spec clojure.core/string?))
 (clojure.spec.alpha/def
  :portkey.cloudformation.logs/destination-policy
  (portkey.cloudformation/ref-or-spec clojure.core/string?))
 (clojure.spec.alpha/def
  :portkey.cloudformation.logs/role-arn
  (portkey.cloudformation/ref-or-spec clojure.core/string?))
 (clojure.spec.alpha/def
  :portkey.cloudformation.logs/target-arn
  (portkey.cloudformation/ref-or-spec clojure.core/string?)))
(do
 (clojure.core/defmethod
  portkey.cloudformation/resource-type-spec
  :portkey.cloudformation.logs/subscription-filter
  [___19567__auto__]
  (clojure.spec.alpha/keys
   :req
   [:portkey.cloudformation/id
    :portkey.cloudformation/type
    :portkey.cloudformation.logs/destination-arn
    :portkey.cloudformation.logs/filter-pattern
    :portkey.cloudformation.logs/log-group-name]
   :opt
   [:portkey.cloudformation.logs/role-arn]))
 (clojure.spec.alpha/def
  :portkey.cloudformation.logs/destination-arn
  (portkey.cloudformation/ref-or-spec clojure.core/string?))
 (clojure.spec.alpha/def
  :portkey.cloudformation.logs/filter-pattern
  (portkey.cloudformation/ref-or-spec clojure.core/string?))
 (clojure.spec.alpha/def
  :portkey.cloudformation.logs/log-group-name
  (portkey.cloudformation/ref-or-spec clojure.core/string?))
 (clojure.spec.alpha/def
  :portkey.cloudformation.logs/role-arn
  (portkey.cloudformation/ref-or-spec clojure.core/string?)))
(do
 (clojure.spec.alpha/def
  :portkey.cloudformation.logs/metric-name
  (portkey.cloudformation/ref-or-spec clojure.core/string?))
 (clojure.spec.alpha/def
  :portkey.cloudformation.logs/metric-namespace
  (portkey.cloudformation/ref-or-spec clojure.core/string?))
 (clojure.spec.alpha/def
  :portkey.cloudformation.logs/metric-value
  (portkey.cloudformation/ref-or-spec clojure.core/string?))
 (clojure.spec.alpha/def
  :portkey.cloudformation.logs/metric-transformation
  (clojure.spec.alpha/keys
   :req
   [:portkey.cloudformation.logs/metric-name
    :portkey.cloudformation.logs/metric-namespace
    :portkey.cloudformation.logs/metric-value]
   :opt
   [])))
