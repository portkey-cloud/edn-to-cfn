(ns portkey.cloudformation.lambda
  "AUTOGENERATED clojure.spec definitions"
  (:require [clojure.spec.alpha]
            [portkey.cloudformation]))

(do
 (clojure.core/defmethod
  portkey.cloudformation/resource-type-spec
  :portkey.cloudformation.lambda/event-source-mapping
  [___15594__auto__]
  (clojure.spec.alpha/keys
   :req
   [:portkey.cloudformation.lambda/event-source-arn
    :portkey.cloudformation.lambda/function-name
    :portkey.cloudformation.lambda/starting-position]
   :opt
   [:portkey.cloudformation.lambda/batch-size
    :portkey.cloudformation.lambda/enabled]))
 (clojure.spec.alpha/def
  :portkey.cloudformation.lambda/batch-size
  clojure.core/integer?)
 (clojure.spec.alpha/def
  :portkey.cloudformation.lambda/enabled
  clojure.core/boolean?)
 (clojure.spec.alpha/def
  :portkey.cloudformation.lambda/event-source-arn
  clojure.core/string?)
 (clojure.spec.alpha/def
  :portkey.cloudformation.lambda/function-name
  clojure.core/string?)
 (clojure.spec.alpha/def
  :portkey.cloudformation.lambda/starting-position
  clojure.core/string?))
(do
 (clojure.core/defmethod
  portkey.cloudformation/resource-type-spec
  :portkey.cloudformation.lambda/permission
  [___15594__auto__]
  (clojure.spec.alpha/keys
   :req
   [:portkey.cloudformation.lambda/action
    :portkey.cloudformation.lambda/function-name
    :portkey.cloudformation.lambda/principal]
   :opt
   [:portkey.cloudformation.lambda/event-source-token
    :portkey.cloudformation.lambda/source-account
    :portkey.cloudformation.lambda/source-arn]))
 (clojure.spec.alpha/def
  :portkey.cloudformation.lambda/action
  clojure.core/string?)
 (clojure.spec.alpha/def
  :portkey.cloudformation.lambda/event-source-token
  clojure.core/string?)
 (clojure.spec.alpha/def
  :portkey.cloudformation.lambda/function-name
  clojure.core/string?)
 (clojure.spec.alpha/def
  :portkey.cloudformation.lambda/principal
  clojure.core/string?)
 (clojure.spec.alpha/def
  :portkey.cloudformation.lambda/source-account
  clojure.core/string?)
 (clojure.spec.alpha/def
  :portkey.cloudformation.lambda/source-arn
  clojure.core/string?))
(do
 (clojure.core/defmethod
  portkey.cloudformation/resource-type-spec
  :portkey.cloudformation.lambda/function
  [___15594__auto__]
  (clojure.spec.alpha/keys
   :req
   [:portkey.cloudformation.lambda/handler
    :portkey.cloudformation.lambda/runtime
    :portkey.cloudformation.lambda/role
    :portkey.cloudformation.lambda/code]
   :opt
   [:portkey.cloudformation.lambda/reserved-concurrent-executions
    :portkey.cloudformation.lambda/tracing-config
    :portkey.cloudformation.lambda/function-name
    :portkey.cloudformation.lambda/timeout
    :portkey.cloudformation.lambda/dead-letter-config
    :portkey.cloudformation.lambda/kms-key-arn
    :portkey.cloudformation.lambda/tags
    :portkey.cloudformation.lambda/memory-size
    :portkey.cloudformation.lambda/description
    :portkey.cloudformation.lambda/environment
    :portkey.cloudformation.lambda/vpc-config]))
 (clojure.spec.alpha/def
  :portkey.cloudformation.lambda/reserved-concurrent-executions
  clojure.core/integer?)
 (clojure.spec.alpha/def
  :portkey.cloudformation.lambda/function-name
  clojure.core/string?)
 (clojure.spec.alpha/def
  :portkey.cloudformation.lambda/timeout
  clojure.core/integer?)
 (clojure.spec.alpha/def
  :portkey.cloudformation.lambda/handler
  clojure.core/string?)
 (clojure.spec.alpha/def
  :portkey.cloudformation.lambda/runtime
  clojure.core/string?)
 (clojure.spec.alpha/def
  :portkey.cloudformation.lambda/kms-key-arn
  clojure.core/string?)
 (clojure.spec.alpha/def
  :portkey.cloudformation.lambda/memory-size
  clojure.core/integer?)
 (clojure.spec.alpha/def
  :portkey.cloudformation.lambda/role
  clojure.core/string?)
 (clojure.spec.alpha/def
  :portkey.cloudformation.lambda/description
  clojure.core/string?))
(do
 (clojure.core/defmethod
  portkey.cloudformation/resource-type-spec
  :portkey.cloudformation.lambda/alias
  [___15594__auto__]
  (clojure.spec.alpha/keys
   :req
   [:portkey.cloudformation.lambda/function-name
    :portkey.cloudformation.lambda/function-version
    :portkey.cloudformation.lambda/name]
   :opt
   [:portkey.cloudformation.lambda/description
    :portkey.cloudformation.lambda/routing-config]))
 (clojure.spec.alpha/def
  :portkey.cloudformation.lambda/description
  clojure.core/string?)
 (clojure.spec.alpha/def
  :portkey.cloudformation.lambda/function-name
  clojure.core/string?)
 (clojure.spec.alpha/def
  :portkey.cloudformation.lambda/function-version
  clojure.core/string?)
 (clojure.spec.alpha/def
  :portkey.cloudformation.lambda/name
  clojure.core/string?))
(do
 (clojure.core/defmethod
  portkey.cloudformation/resource-type-spec
  :portkey.cloudformation.lambda/version
  [___15594__auto__]
  (clojure.spec.alpha/keys
   :req
   [:portkey.cloudformation.lambda/function-name]
   :opt
   [:portkey.cloudformation.lambda/code-sha256
    :portkey.cloudformation.lambda/description]))
 (clojure.spec.alpha/def
  :portkey.cloudformation.lambda/code-sha256
  clojure.core/string?)
 (clojure.spec.alpha/def
  :portkey.cloudformation.lambda/description
  clojure.core/string?)
 (clojure.spec.alpha/def
  :portkey.cloudformation.lambda/function-name
  clojure.core/string?))
(do
 (clojure.spec.alpha/def
  :portkey.cloudformation.lambda/s3-bucket
  clojure.core/string?)
 (clojure.spec.alpha/def
  :portkey.cloudformation.lambda/s3-key
  clojure.core/string?)
 (clojure.spec.alpha/def
  :portkey.cloudformation.lambda/s3-object-version
  clojure.core/string?)
 (clojure.spec.alpha/def
  :portkey.cloudformation.lambda/zip-file
  clojure.core/string?)
 (clojure.spec.alpha/def
  :portkey.cloudformation.lambda/code
  (clojure.spec.alpha/keys
   :req
   []
   :opt
   [:portkey.cloudformation.lambda/s3-bucket
    :portkey.cloudformation.lambda/s3-key
    :portkey.cloudformation.lambda/s3-object-version
    :portkey.cloudformation.lambda/zip-file])))
(do
 (clojure.spec.alpha/def
  :portkey.cloudformation.lambda/environment
  (clojure.spec.alpha/keys
   :req
   []
   :opt
   [:portkey.cloudformation.lambda/variables])))
(do
 (clojure.spec.alpha/def
  :portkey.cloudformation.lambda/alias-routing-configuration
  (clojure.spec.alpha/keys
   :req
   [:portkey.cloudformation.lambda/additional-version-weights]
   :opt
   [])))
(do
 (clojure.spec.alpha/def
  :portkey.cloudformation.lambda/target-arn
  clojure.core/string?)
 (clojure.spec.alpha/def
  :portkey.cloudformation.lambda/dead-letter-config
  (clojure.spec.alpha/keys
   :req
   []
   :opt
   [:portkey.cloudformation.lambda/target-arn])))
(do
 (clojure.spec.alpha/def
  :portkey.cloudformation.lambda/vpc-config
  (clojure.spec.alpha/keys
   :req
   [:portkey.cloudformation.lambda/security-group-ids
    :portkey.cloudformation.lambda/subnet-ids]
   :opt
   [])))
(do
 (clojure.spec.alpha/def
  :portkey.cloudformation.lambda/mode
  clojure.core/string?)
 (clojure.spec.alpha/def
  :portkey.cloudformation.lambda/tracing-config
  (clojure.spec.alpha/keys
   :req
   []
   :opt
   [:portkey.cloudformation.lambda/mode])))
(do
 (clojure.spec.alpha/def
  :portkey.cloudformation.lambda/function-version
  clojure.core/string?)
 (clojure.spec.alpha/def
  :portkey.cloudformation.lambda/function-weight
  clojure.core/double?)
 (clojure.spec.alpha/def
  :portkey.cloudformation.lambda/version-weight
  (clojure.spec.alpha/keys
   :req
   [:portkey.cloudformation.lambda/function-version
    :portkey.cloudformation.lambda/function-weight]
   :opt
   [])))
