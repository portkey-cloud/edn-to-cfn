(ns portkey.cloudformation.service-catalog
  "AUTOGENERATED clojure.spec definitions"
  (:require [clojure.spec.alpha]
            [portkey.cloudformation]))

(do
 (clojure.core/defmethod
  portkey.cloudformation/resource-type-spec
  :portkey.cloudformation.service-catalog/cloud-formation-provisioned-product
  [___19567__auto__]
  (clojure.spec.alpha/keys
   :req
   [:portkey.cloudformation/id :portkey.cloudformation/type]
   :opt
   [:portkey.cloudformation.service-catalog/provisioned-product-name
    :portkey.cloudformation.service-catalog/provisioning-artifact-name
    :portkey.cloudformation.service-catalog/path-id
    :portkey.cloudformation.service-catalog/tags
    :portkey.cloudformation.service-catalog/provisioning-parameters
    :portkey.cloudformation.service-catalog/accept-language
    :portkey.cloudformation.service-catalog/notification-arns
    :portkey.cloudformation.service-catalog/product-name
    :portkey.cloudformation.service-catalog/provisioning-artifact-id
    :portkey.cloudformation.service-catalog/product-id]))
 (clojure.spec.alpha/def
  :portkey.cloudformation.service-catalog/provisioned-product-name
  (portkey.cloudformation/ref-or-spec clojure.core/string?))
 (clojure.spec.alpha/def
  :portkey.cloudformation.service-catalog/provisioning-artifact-name
  (portkey.cloudformation/ref-or-spec clojure.core/string?))
 (clojure.spec.alpha/def
  :portkey.cloudformation.service-catalog/path-id
  (portkey.cloudformation/ref-or-spec clojure.core/string?))
 (clojure.spec.alpha/def
  :portkey.cloudformation.service-catalog/accept-language
  (portkey.cloudformation/ref-or-spec clojure.core/string?))
 (clojure.spec.alpha/def
  :portkey.cloudformation.service-catalog/product-name
  (portkey.cloudformation/ref-or-spec clojure.core/string?))
 (clojure.spec.alpha/def
  :portkey.cloudformation.service-catalog/provisioning-artifact-id
  (portkey.cloudformation/ref-or-spec clojure.core/string?))
 (clojure.spec.alpha/def
  :portkey.cloudformation.service-catalog/product-id
  (portkey.cloudformation/ref-or-spec clojure.core/string?)))
(do
 (clojure.spec.alpha/def
  :portkey.cloudformation.service-catalog/value
  (portkey.cloudformation/ref-or-spec clojure.core/string?))
 (clojure.spec.alpha/def
  :portkey.cloudformation.service-catalog/key
  (portkey.cloudformation/ref-or-spec clojure.core/string?))
 (clojure.spec.alpha/def
  :portkey.cloudformation.service-catalog/provisioning-parameter
  (clojure.spec.alpha/keys
   :req
   []
   :opt
   [:portkey.cloudformation.service-catalog/value
    :portkey.cloudformation.service-catalog/key])))
