(ns portkey.cloudformation.code-deploy
  "AUTOGENERATED clojure.spec definitions"
  (:require [clojure.spec.alpha]
            [portkey.cloudformation]))

(do
 (clojure.core/defmethod
  portkey.cloudformation/resource-type-spec
  :portkey.cloudformation.code-deploy/deployment-group
  [___19567__auto__]
  (clojure.spec.alpha/keys
   :req
   [:portkey.cloudformation/id
    :portkey.cloudformation/type
    :portkey.cloudformation.code-deploy/service-role-arn
    :portkey.cloudformation.code-deploy/application-name]
   :opt
   [:portkey.cloudformation.code-deploy/auto-rollback-configuration
    :portkey.cloudformation.code-deploy/deployment-config-name
    :portkey.cloudformation.code-deploy/ec2-tag-filters
    :portkey.cloudformation.code-deploy/deployment
    :portkey.cloudformation.code-deploy/on-premises-instance-tag-filters
    :portkey.cloudformation.code-deploy/load-balancer-info
    :portkey.cloudformation.code-deploy/deployment-group-name
    :portkey.cloudformation.code-deploy/trigger-configurations
    :portkey.cloudformation.code-deploy/deployment-style
    :portkey.cloudformation.code-deploy/alarm-configuration
    :portkey.cloudformation.code-deploy/auto-scaling-groups]))
 (clojure.spec.alpha/def
  :portkey.cloudformation.code-deploy/deployment-config-name
  (portkey.cloudformation/ref-or-spec clojure.core/string?))
 (clojure.spec.alpha/def
  :portkey.cloudformation.code-deploy/service-role-arn
  (portkey.cloudformation/ref-or-spec clojure.core/string?))
 (clojure.spec.alpha/def
  :portkey.cloudformation.code-deploy/deployment-group-name
  (portkey.cloudformation/ref-or-spec clojure.core/string?))
 (clojure.spec.alpha/def
  :portkey.cloudformation.code-deploy/application-name
  (portkey.cloudformation/ref-or-spec clojure.core/string?)))
(do
 (clojure.core/defmethod
  portkey.cloudformation/resource-type-spec
  :portkey.cloudformation.code-deploy/application
  [___19567__auto__]
  (clojure.spec.alpha/keys
   :req
   [:portkey.cloudformation/id :portkey.cloudformation/type]
   :opt
   [:portkey.cloudformation.code-deploy/application-name
    :portkey.cloudformation.code-deploy/compute-platform]))
 (clojure.spec.alpha/def
  :portkey.cloudformation.code-deploy/application-name
  (portkey.cloudformation/ref-or-spec clojure.core/string?))
 (clojure.spec.alpha/def
  :portkey.cloudformation.code-deploy/compute-platform
  (portkey.cloudformation/ref-or-spec clojure.core/string?)))
(do
 (clojure.core/defmethod
  portkey.cloudformation/resource-type-spec
  :portkey.cloudformation.code-deploy/deployment-config
  [___19567__auto__]
  (clojure.spec.alpha/keys
   :req
   [:portkey.cloudformation/id :portkey.cloudformation/type]
   :opt
   [:portkey.cloudformation.code-deploy/deployment-config-name
    :portkey.cloudformation.code-deploy/minimum-healthy-hosts]))
 (clojure.spec.alpha/def
  :portkey.cloudformation.code-deploy/deployment-config-name
  (portkey.cloudformation/ref-or-spec clojure.core/string?)))
(do
 (clojure.spec.alpha/def
  :portkey.cloudformation.code-deploy/commit-id
  (portkey.cloudformation/ref-or-spec clojure.core/string?))
 (clojure.spec.alpha/def
  :portkey.cloudformation.code-deploy/repository
  (portkey.cloudformation/ref-or-spec clojure.core/string?))
 (clojure.spec.alpha/def
  :portkey.cloudformation.code-deploy/git-hub-location
  (clojure.spec.alpha/keys
   :req
   [:portkey.cloudformation.code-deploy/commit-id
    :portkey.cloudformation.code-deploy/repository]
   :opt
   [])))
(do
 (clojure.spec.alpha/def
  :portkey.cloudformation.code-deploy/name
  (portkey.cloudformation/ref-or-spec clojure.core/string?))
 (clojure.spec.alpha/def
  :portkey.cloudformation.code-deploy/target-group-info
  (clojure.spec.alpha/keys
   :req
   []
   :opt
   [:portkey.cloudformation.code-deploy/name])))
(do
 (clojure.spec.alpha/def
  :portkey.cloudformation.code-deploy/revision-type
  (portkey.cloudformation/ref-or-spec clojure.core/string?))
 (clojure.spec.alpha/def
  :portkey.cloudformation.code-deploy/revision-location
  (clojure.spec.alpha/keys
   :req
   []
   :opt
   [:portkey.cloudformation.code-deploy/git-hub-location
    :portkey.cloudformation.code-deploy/revision-type
    :portkey.cloudformation.code-deploy/s3-location])))
(do
 (clojure.spec.alpha/def
  :portkey.cloudformation.code-deploy/trigger-name
  (portkey.cloudformation/ref-or-spec clojure.core/string?))
 (clojure.spec.alpha/def
  :portkey.cloudformation.code-deploy/trigger-target-arn
  (portkey.cloudformation/ref-or-spec clojure.core/string?))
 (clojure.spec.alpha/def
  :portkey.cloudformation.code-deploy/trigger-config
  (clojure.spec.alpha/keys
   :req
   []
   :opt
   [:portkey.cloudformation.code-deploy/trigger-events
    :portkey.cloudformation.code-deploy/trigger-name
    :portkey.cloudformation.code-deploy/trigger-target-arn])))
(do
 (clojure.spec.alpha/def
  :portkey.cloudformation.code-deploy/type
  (portkey.cloudformation/ref-or-spec clojure.core/string?))
 (clojure.spec.alpha/def
  :portkey.cloudformation.code-deploy/value
  (portkey.cloudformation/ref-or-spec clojure.core/integer?))
 (clojure.spec.alpha/def
  :portkey.cloudformation.code-deploy/minimum-healthy-hosts
  (clojure.spec.alpha/keys
   :req
   [:portkey.cloudformation.code-deploy/type
    :portkey.cloudformation.code-deploy/value]
   :opt
   [])))
(do
 (clojure.spec.alpha/def
  :portkey.cloudformation.code-deploy/bucket
  (portkey.cloudformation/ref-or-spec clojure.core/string?))
 (clojure.spec.alpha/def
  :portkey.cloudformation.code-deploy/bundle-type
  (portkey.cloudformation/ref-or-spec clojure.core/string?))
 (clojure.spec.alpha/def
  :portkey.cloudformation.code-deploy/e-tag
  (portkey.cloudformation/ref-or-spec clojure.core/string?))
 (clojure.spec.alpha/def
  :portkey.cloudformation.code-deploy/key
  (portkey.cloudformation/ref-or-spec clojure.core/string?))
 (clojure.spec.alpha/def
  :portkey.cloudformation.code-deploy/version
  (portkey.cloudformation/ref-or-spec clojure.core/string?))
 (clojure.spec.alpha/def
  :portkey.cloudformation.code-deploy/s3-location
  (clojure.spec.alpha/keys
   :req
   [:portkey.cloudformation.code-deploy/bucket
    :portkey.cloudformation.code-deploy/key]
   :opt
   [:portkey.cloudformation.code-deploy/bundle-type
    :portkey.cloudformation.code-deploy/e-tag
    :portkey.cloudformation.code-deploy/version])))
(do
 (clojure.spec.alpha/def
  :portkey.cloudformation.code-deploy/key
  (portkey.cloudformation/ref-or-spec clojure.core/string?))
 (clojure.spec.alpha/def
  :portkey.cloudformation.code-deploy/type
  (portkey.cloudformation/ref-or-spec clojure.core/string?))
 (clojure.spec.alpha/def
  :portkey.cloudformation.code-deploy/value
  (portkey.cloudformation/ref-or-spec clojure.core/string?))
 (clojure.spec.alpha/def
  :portkey.cloudformation.code-deploy/ec2-tag-filter
  (clojure.spec.alpha/keys
   :req
   []
   :opt
   [:portkey.cloudformation.code-deploy/key
    :portkey.cloudformation.code-deploy/type
    :portkey.cloudformation.code-deploy/value])))
(do
 (clojure.spec.alpha/def
  :portkey.cloudformation.code-deploy/key
  (portkey.cloudformation/ref-or-spec clojure.core/string?))
 (clojure.spec.alpha/def
  :portkey.cloudformation.code-deploy/type
  (portkey.cloudformation/ref-or-spec clojure.core/string?))
 (clojure.spec.alpha/def
  :portkey.cloudformation.code-deploy/value
  (portkey.cloudformation/ref-or-spec clojure.core/string?))
 (clojure.spec.alpha/def
  :portkey.cloudformation.code-deploy/tag-filter
  (clojure.spec.alpha/keys
   :req
   []
   :opt
   [:portkey.cloudformation.code-deploy/key
    :portkey.cloudformation.code-deploy/type
    :portkey.cloudformation.code-deploy/value])))
(do
 (clojure.spec.alpha/def
  :portkey.cloudformation.code-deploy/description
  (portkey.cloudformation/ref-or-spec clojure.core/string?))
 (clojure.spec.alpha/def
  :portkey.cloudformation.code-deploy/ignore-application-stop-failures
  (portkey.cloudformation/ref-or-spec clojure.core/boolean?))
 (clojure.spec.alpha/def
  :portkey.cloudformation.code-deploy/deployment
  (clojure.spec.alpha/keys
   :req
   [:portkey.cloudformation.code-deploy/revision]
   :opt
   [:portkey.cloudformation.code-deploy/description
    :portkey.cloudformation.code-deploy/ignore-application-stop-failures])))
(do
 (clojure.spec.alpha/def
  :portkey.cloudformation.code-deploy/name
  (portkey.cloudformation/ref-or-spec clojure.core/string?))
 (clojure.spec.alpha/def
  :portkey.cloudformation.code-deploy/elb-info
  (clojure.spec.alpha/keys
   :req
   []
   :opt
   [:portkey.cloudformation.code-deploy/name])))
(do
 (clojure.spec.alpha/def
  :portkey.cloudformation.code-deploy/enabled
  (portkey.cloudformation/ref-or-spec clojure.core/boolean?))
 (clojure.spec.alpha/def
  :portkey.cloudformation.code-deploy/ignore-poll-alarm-failure
  (portkey.cloudformation/ref-or-spec clojure.core/boolean?))
 (clojure.spec.alpha/def
  :portkey.cloudformation.code-deploy/alarm-configuration
  (clojure.spec.alpha/keys
   :req
   []
   :opt
   [:portkey.cloudformation.code-deploy/alarms
    :portkey.cloudformation.code-deploy/enabled
    :portkey.cloudformation.code-deploy/ignore-poll-alarm-failure])))
(do
 (clojure.spec.alpha/def
  :portkey.cloudformation.code-deploy/deployment-option
  (portkey.cloudformation/ref-or-spec clojure.core/string?))
 (clojure.spec.alpha/def
  :portkey.cloudformation.code-deploy/deployment-type
  (portkey.cloudformation/ref-or-spec clojure.core/string?))
 (clojure.spec.alpha/def
  :portkey.cloudformation.code-deploy/deployment-style
  (clojure.spec.alpha/keys
   :req
   []
   :opt
   [:portkey.cloudformation.code-deploy/deployment-option
    :portkey.cloudformation.code-deploy/deployment-type])))
(do
 (clojure.spec.alpha/def
  :portkey.cloudformation.code-deploy/load-balancer-info
  (clojure.spec.alpha/keys
   :req
   []
   :opt
   [:portkey.cloudformation.code-deploy/elb-info-list
    :portkey.cloudformation.code-deploy/target-group-info-list])))
(do
 (clojure.spec.alpha/def
  :portkey.cloudformation.code-deploy/enabled
  (portkey.cloudformation/ref-or-spec clojure.core/boolean?))
 (clojure.spec.alpha/def
  :portkey.cloudformation.code-deploy/auto-rollback-configuration
  (clojure.spec.alpha/keys
   :req
   []
   :opt
   [:portkey.cloudformation.code-deploy/enabled
    :portkey.cloudformation.code-deploy/events])))
(do
 (clojure.spec.alpha/def
  :portkey.cloudformation.code-deploy/name
  (portkey.cloudformation/ref-or-spec clojure.core/string?))
 (clojure.spec.alpha/def
  :portkey.cloudformation.code-deploy/alarm
  (clojure.spec.alpha/keys
   :req
   []
   :opt
   [:portkey.cloudformation.code-deploy/name])))
