(ns portkey.cloudformation.emr
  "AUTOGENERATED clojure.spec definitions"
  (:require [clojure.spec.alpha]
            [portkey.cloudformation]))

(do
 (clojure.core/defmethod
  portkey.cloudformation/resource-type-spec
  :portkey.cloudformation.emr/instance-fleet-config
  [___15594__auto__]
  (clojure.spec.alpha/keys
   :req
   [:portkey.cloudformation.emr/cluster-id
    :portkey.cloudformation.emr/instance-fleet-type]
   :opt
   [:portkey.cloudformation.emr/instance-type-configs
    :portkey.cloudformation.emr/launch-specifications
    :portkey.cloudformation.emr/name
    :portkey.cloudformation.emr/target-on-demand-capacity
    :portkey.cloudformation.emr/target-spot-capacity]))
 (clojure.spec.alpha/def
  :portkey.cloudformation.emr/cluster-id
  clojure.core/string?)
 (clojure.spec.alpha/def
  :portkey.cloudformation.emr/instance-fleet-type
  clojure.core/string?)
 (clojure.spec.alpha/def
  :portkey.cloudformation.emr/name
  clojure.core/string?)
 (clojure.spec.alpha/def
  :portkey.cloudformation.emr/target-on-demand-capacity
  clojure.core/integer?)
 (clojure.spec.alpha/def
  :portkey.cloudformation.emr/target-spot-capacity
  clojure.core/integer?))
(do
 (clojure.core/defmethod
  portkey.cloudformation/resource-type-spec
  :portkey.cloudformation.emr/instance-group-config
  [___15594__auto__]
  (clojure.spec.alpha/keys
   :req
   [:portkey.cloudformation.emr/instance-role
    :portkey.cloudformation.emr/instance-count
    :portkey.cloudformation.emr/instance-type
    :portkey.cloudformation.emr/job-flow-id]
   :opt
   [:portkey.cloudformation.emr/bid-price
    :portkey.cloudformation.emr/ebs-configuration
    :portkey.cloudformation.emr/configurations
    :portkey.cloudformation.emr/auto-scaling-policy
    :portkey.cloudformation.emr/name
    :portkey.cloudformation.emr/market]))
 (clojure.spec.alpha/def
  :portkey.cloudformation.emr/bid-price
  clojure.core/string?)
 (clojure.spec.alpha/def
  :portkey.cloudformation.emr/instance-role
  clojure.core/string?)
 (clojure.spec.alpha/def
  :portkey.cloudformation.emr/instance-count
  clojure.core/integer?)
 (clojure.spec.alpha/def
  :portkey.cloudformation.emr/instance-type
  clojure.core/string?)
 (clojure.spec.alpha/def
  :portkey.cloudformation.emr/name
  clojure.core/string?)
 (clojure.spec.alpha/def
  :portkey.cloudformation.emr/job-flow-id
  clojure.core/string?)
 (clojure.spec.alpha/def
  :portkey.cloudformation.emr/market
  clojure.core/string?))
(do
 (clojure.core/defmethod
  portkey.cloudformation/resource-type-spec
  :portkey.cloudformation.emr/cluster
  [___15594__auto__]
  (clojure.spec.alpha/keys
   :req
   [:portkey.cloudformation.emr/service-role
    :portkey.cloudformation.emr/job-flow-role
    :portkey.cloudformation.emr/name
    :portkey.cloudformation.emr/instances]
   :opt
   [:portkey.cloudformation.emr/auto-scaling-role
    :portkey.cloudformation.emr/custom-ami-id
    :portkey.cloudformation.emr/log-uri
    :portkey.cloudformation.emr/scale-down-behavior
    :portkey.cloudformation.emr/configurations
    :portkey.cloudformation.emr/tags
    :portkey.cloudformation.emr/visible-to-all-users
    :portkey.cloudformation.emr/additional-info
    :portkey.cloudformation.emr/applications
    :portkey.cloudformation.emr/ebs-root-volume-size
    :portkey.cloudformation.emr/security-configuration
    :portkey.cloudformation.emr/release-label
    :portkey.cloudformation.emr/bootstrap-actions]))
 (clojure.spec.alpha/def
  :portkey.cloudformation.emr/service-role
  clojure.core/string?)
 (clojure.spec.alpha/def
  :portkey.cloudformation.emr/auto-scaling-role
  clojure.core/string?)
 (clojure.spec.alpha/def
  :portkey.cloudformation.emr/job-flow-role
  clojure.core/string?)
 (clojure.spec.alpha/def
  :portkey.cloudformation.emr/custom-ami-id
  clojure.core/string?)
 (clojure.spec.alpha/def
  :portkey.cloudformation.emr/log-uri
  clojure.core/string?)
 (clojure.spec.alpha/def
  :portkey.cloudformation.emr/scale-down-behavior
  clojure.core/string?)
 (clojure.spec.alpha/def
  :portkey.cloudformation.emr/visible-to-all-users
  clojure.core/boolean?)
 (clojure.spec.alpha/def
  :portkey.cloudformation.emr/additional-info
  clojure.core/any?)
 (clojure.spec.alpha/def
  :portkey.cloudformation.emr/ebs-root-volume-size
  clojure.core/integer?)
 (clojure.spec.alpha/def
  :portkey.cloudformation.emr/security-configuration
  clojure.core/string?)
 (clojure.spec.alpha/def
  :portkey.cloudformation.emr/release-label
  clojure.core/string?)
 (clojure.spec.alpha/def
  :portkey.cloudformation.emr/name
  clojure.core/string?))
(do
 (clojure.core/defmethod
  portkey.cloudformation/resource-type-spec
  :portkey.cloudformation.emr/security-configuration
  [___15594__auto__]
  (clojure.spec.alpha/keys
   :req
   [:portkey.cloudformation.emr/security-configuration]
   :opt
   [:portkey.cloudformation.emr/name]))
 (clojure.spec.alpha/def
  :portkey.cloudformation.emr/name
  clojure.core/string?)
 (clojure.spec.alpha/def
  :portkey.cloudformation.emr/security-configuration
  clojure.core/any?))
(do
 (clojure.core/defmethod
  portkey.cloudformation/resource-type-spec
  :portkey.cloudformation.emr/step
  [___15594__auto__]
  (clojure.spec.alpha/keys
   :req
   [:portkey.cloudformation.emr/action-on-failure
    :portkey.cloudformation.emr/hadoop-jar-step
    :portkey.cloudformation.emr/job-flow-id
    :portkey.cloudformation.emr/name]
   :opt
   []))
 (clojure.spec.alpha/def
  :portkey.cloudformation.emr/action-on-failure
  clojure.core/string?)
 (clojure.spec.alpha/def
  :portkey.cloudformation.emr/job-flow-id
  clojure.core/string?)
 (clojure.spec.alpha/def
  :portkey.cloudformation.emr/name
  clojure.core/string?))
(do
 (clojure.spec.alpha/def
  :portkey.cloudformation.emr/availability-zone
  clojure.core/string?)
 (clojure.spec.alpha/def
  :portkey.cloudformation.emr/placement-type
  (clojure.spec.alpha/keys
   :req
   [:portkey.cloudformation.emr/availability-zone]
   :opt
   [])))
(do
 (clojure.spec.alpha/def
  :portkey.cloudformation.emr/description
  clojure.core/string?)
 (clojure.spec.alpha/def
  :portkey.cloudformation.emr/name
  clojure.core/string?)
 (clojure.spec.alpha/def
  :portkey.cloudformation.emr/scaling-rule
  (clojure.spec.alpha/keys
   :req
   [:portkey.cloudformation.emr/action
    :portkey.cloudformation.emr/name
    :portkey.cloudformation.emr/trigger]
   :opt
   [:portkey.cloudformation.emr/description])))
(do
 (clojure.spec.alpha/def
  :portkey.cloudformation.emr/bid-price
  clojure.core/string?)
 (clojure.spec.alpha/def
  :portkey.cloudformation.emr/bid-price-as-percentage-of-on-demand-price
  clojure.core/double?)
 (clojure.spec.alpha/def
  :portkey.cloudformation.emr/instance-type
  clojure.core/string?)
 (clojure.spec.alpha/def
  :portkey.cloudformation.emr/weighted-capacity
  clojure.core/integer?)
 (clojure.spec.alpha/def
  :portkey.cloudformation.emr/instance-type-config
  (clojure.spec.alpha/keys
   :req
   [:portkey.cloudformation.emr/instance-type]
   :opt
   [:portkey.cloudformation.emr/bid-price
    :portkey.cloudformation.emr/bid-price-as-percentage-of-on-demand-price
    :portkey.cloudformation.emr/configurations
    :portkey.cloudformation.emr/ebs-configuration
    :portkey.cloudformation.emr/weighted-capacity])))
(do
 (clojure.spec.alpha/def
  :portkey.cloudformation.emr/iops
  clojure.core/integer?)
 (clojure.spec.alpha/def
  :portkey.cloudformation.emr/size-in-gb
  clojure.core/integer?)
 (clojure.spec.alpha/def
  :portkey.cloudformation.emr/volume-type
  clojure.core/string?)
 (clojure.spec.alpha/def
  :portkey.cloudformation.emr/volume-specification
  (clojure.spec.alpha/keys
   :req
   [:portkey.cloudformation.emr/size-in-gb
    :portkey.cloudformation.emr/volume-type]
   :opt
   [:portkey.cloudformation.emr/iops])))
(do
 (clojure.spec.alpha/def
  :portkey.cloudformation.emr/volumes-per-instance
  clojure.core/integer?)
 (clojure.spec.alpha/def
  :portkey.cloudformation.emr/ebs-block-device-config
  (clojure.spec.alpha/keys
   :req
   [:portkey.cloudformation.emr/volume-specification]
   :opt
   [:portkey.cloudformation.emr/volumes-per-instance])))
(do
 (clojure.spec.alpha/def
  :portkey.cloudformation.emr/adjustment-type
  clojure.core/string?)
 (clojure.spec.alpha/def
  :portkey.cloudformation.emr/cool-down
  clojure.core/integer?)
 (clojure.spec.alpha/def
  :portkey.cloudformation.emr/scaling-adjustment
  clojure.core/integer?)
 (clojure.spec.alpha/def
  :portkey.cloudformation.emr/simple-scaling-policy-configuration
  (clojure.spec.alpha/keys
   :req
   [:portkey.cloudformation.emr/scaling-adjustment]
   :opt
   [:portkey.cloudformation.emr/adjustment-type
    :portkey.cloudformation.emr/cool-down])))
(do
 (clojure.spec.alpha/def
  :portkey.cloudformation.emr/name
  clojure.core/string?)
 (clojure.spec.alpha/def
  :portkey.cloudformation.emr/version
  clojure.core/string?)
 (clojure.spec.alpha/def
  :portkey.cloudformation.emr/application
  (clojure.spec.alpha/keys
   :req
   []
   :opt
   [:portkey.cloudformation.emr/additional-info
    :portkey.cloudformation.emr/args
    :portkey.cloudformation.emr/name
    :portkey.cloudformation.emr/version])))
(do
 (clojure.spec.alpha/def
  :portkey.cloudformation.emr/bid-price
  clojure.core/string?)
 (clojure.spec.alpha/def
  :portkey.cloudformation.emr/bid-price-as-percentage-of-on-demand-price
  clojure.core/double?)
 (clojure.spec.alpha/def
  :portkey.cloudformation.emr/instance-type
  clojure.core/string?)
 (clojure.spec.alpha/def
  :portkey.cloudformation.emr/weighted-capacity
  clojure.core/integer?)
 (clojure.spec.alpha/def
  :portkey.cloudformation.emr/instance-type-config
  (clojure.spec.alpha/keys
   :req
   [:portkey.cloudformation.emr/instance-type]
   :opt
   [:portkey.cloudformation.emr/bid-price
    :portkey.cloudformation.emr/bid-price-as-percentage-of-on-demand-price
    :portkey.cloudformation.emr/configurations
    :portkey.cloudformation.emr/ebs-configuration
    :portkey.cloudformation.emr/weighted-capacity])))
(do
 (clojure.spec.alpha/def
  :portkey.cloudformation.emr/emr-managed-slave-security-group
  clojure.core/string?)
 (clojure.spec.alpha/def
  :portkey.cloudformation.emr/hadoop-version
  clojure.core/string?)
 (clojure.spec.alpha/def
  :portkey.cloudformation.emr/ec2-key-name
  clojure.core/string?)
 (clojure.spec.alpha/def
  :portkey.cloudformation.emr/service-access-security-group
  clojure.core/string?)
 (clojure.spec.alpha/def
  :portkey.cloudformation.emr/emr-managed-master-security-group
  clojure.core/string?)
 (clojure.spec.alpha/def
  :portkey.cloudformation.emr/ec2-subnet-id
  clojure.core/string?)
 (clojure.spec.alpha/def
  :portkey.cloudformation.emr/termination-protected
  clojure.core/boolean?)
 (clojure.spec.alpha/def
  :portkey.cloudformation.emr/job-flow-instances-config
  (clojure.spec.alpha/keys
   :req
   []
   :opt
   [:portkey.cloudformation.emr/emr-managed-slave-security-group
    :portkey.cloudformation.emr/core-instance-fleet
    :portkey.cloudformation.emr/master-instance-fleet
    :portkey.cloudformation.emr/placement
    :portkey.cloudformation.emr/hadoop-version
    :portkey.cloudformation.emr/core-instance-group
    :portkey.cloudformation.emr/ec2-key-name
    :portkey.cloudformation.emr/service-access-security-group
    :portkey.cloudformation.emr/additional-slave-security-groups
    :portkey.cloudformation.emr/emr-managed-master-security-group
    :portkey.cloudformation.emr/ec2-subnet-id
    :portkey.cloudformation.emr/master-instance-group
    :portkey.cloudformation.emr/termination-protected
    :portkey.cloudformation.emr/additional-master-security-groups])))
(do
 (clojure.spec.alpha/def
  :portkey.cloudformation.emr/instance-fleet-provisioning-specifications
  (clojure.spec.alpha/keys
   :req
   [:portkey.cloudformation.emr/spot-specification]
   :opt
   [])))
(do
 (clojure.spec.alpha/def
  :portkey.cloudformation.emr/iops
  clojure.core/integer?)
 (clojure.spec.alpha/def
  :portkey.cloudformation.emr/size-in-gb
  clojure.core/integer?)
 (clojure.spec.alpha/def
  :portkey.cloudformation.emr/volume-type
  clojure.core/string?)
 (clojure.spec.alpha/def
  :portkey.cloudformation.emr/volume-specification
  (clojure.spec.alpha/keys
   :req
   [:portkey.cloudformation.emr/size-in-gb
    :portkey.cloudformation.emr/volume-type]
   :opt
   [:portkey.cloudformation.emr/iops])))
(do
 (clojure.spec.alpha/def
  :portkey.cloudformation.emr/unit
  clojure.core/string?)
 (clojure.spec.alpha/def
  :portkey.cloudformation.emr/period
  clojure.core/integer?)
 (clojure.spec.alpha/def
  :portkey.cloudformation.emr/threshold
  clojure.core/double?)
 (clojure.spec.alpha/def
  :portkey.cloudformation.emr/comparison-operator
  clojure.core/string?)
 (clojure.spec.alpha/def
  :portkey.cloudformation.emr/namespace
  clojure.core/string?)
 (clojure.spec.alpha/def
  :portkey.cloudformation.emr/metric-name
  clojure.core/string?)
 (clojure.spec.alpha/def
  :portkey.cloudformation.emr/evaluation-periods
  clojure.core/integer?)
 (clojure.spec.alpha/def
  :portkey.cloudformation.emr/statistic
  clojure.core/string?)
 (clojure.spec.alpha/def
  :portkey.cloudformation.emr/cloud-watch-alarm-definition
  (clojure.spec.alpha/keys
   :req
   [:portkey.cloudformation.emr/period
    :portkey.cloudformation.emr/threshold
    :portkey.cloudformation.emr/comparison-operator
    :portkey.cloudformation.emr/metric-name]
   :opt
   [:portkey.cloudformation.emr/unit
    :portkey.cloudformation.emr/dimensions
    :portkey.cloudformation.emr/namespace
    :portkey.cloudformation.emr/evaluation-periods
    :portkey.cloudformation.emr/statistic])))
(do
 (clojure.spec.alpha/def
  :portkey.cloudformation.emr/name
  clojure.core/string?)
 (clojure.spec.alpha/def
  :portkey.cloudformation.emr/bootstrap-action-config
  (clojure.spec.alpha/keys
   :req
   [:portkey.cloudformation.emr/name
    :portkey.cloudformation.emr/script-bootstrap-action]
   :opt
   [])))
(do
 (clojure.spec.alpha/def
  :portkey.cloudformation.emr/auto-scaling-policy
  (clojure.spec.alpha/keys
   :req
   [:portkey.cloudformation.emr/constraints
    :portkey.cloudformation.emr/rules]
   :opt
   [])))
(do
 (clojure.spec.alpha/def
  :portkey.cloudformation.emr/market
  clojure.core/string?)
 (clojure.spec.alpha/def
  :portkey.cloudformation.emr/scaling-action
  (clojure.spec.alpha/keys
   :req
   [:portkey.cloudformation.emr/simple-scaling-policy-configuration]
   :opt
   [:portkey.cloudformation.emr/market])))
(do
 (clojure.spec.alpha/def
  :portkey.cloudformation.emr/volumes-per-instance
  clojure.core/integer?)
 (clojure.spec.alpha/def
  :portkey.cloudformation.emr/ebs-block-device-config
  (clojure.spec.alpha/keys
   :req
   [:portkey.cloudformation.emr/volume-specification]
   :opt
   [:portkey.cloudformation.emr/volumes-per-instance])))
(do
 (clojure.spec.alpha/def
  :portkey.cloudformation.emr/max-capacity
  clojure.core/integer?)
 (clojure.spec.alpha/def
  :portkey.cloudformation.emr/min-capacity
  clojure.core/integer?)
 (clojure.spec.alpha/def
  :portkey.cloudformation.emr/scaling-constraints
  (clojure.spec.alpha/keys
   :req
   [:portkey.cloudformation.emr/max-capacity
    :portkey.cloudformation.emr/min-capacity]
   :opt
   [])))
(do
 (clojure.spec.alpha/def
  :portkey.cloudformation.emr/bid-price
  clojure.core/string?)
 (clojure.spec.alpha/def
  :portkey.cloudformation.emr/instance-count
  clojure.core/integer?)
 (clojure.spec.alpha/def
  :portkey.cloudformation.emr/instance-type
  clojure.core/string?)
 (clojure.spec.alpha/def
  :portkey.cloudformation.emr/market
  clojure.core/string?)
 (clojure.spec.alpha/def
  :portkey.cloudformation.emr/name
  clojure.core/string?)
 (clojure.spec.alpha/def
  :portkey.cloudformation.emr/instance-group-config
  (clojure.spec.alpha/keys
   :req
   [:portkey.cloudformation.emr/instance-count
    :portkey.cloudformation.emr/instance-type]
   :opt
   [:portkey.cloudformation.emr/auto-scaling-policy
    :portkey.cloudformation.emr/bid-price
    :portkey.cloudformation.emr/configurations
    :portkey.cloudformation.emr/ebs-configuration
    :portkey.cloudformation.emr/market
    :portkey.cloudformation.emr/name])))
(do
 (clojure.spec.alpha/def
  :portkey.cloudformation.emr/scaling-trigger
  (clojure.spec.alpha/keys
   :req
   [:portkey.cloudformation.emr/cloud-watch-alarm-definition]
   :opt
   [])))
(do
 (clojure.spec.alpha/def
  :portkey.cloudformation.emr/auto-scaling-policy
  (clojure.spec.alpha/keys
   :req
   [:portkey.cloudformation.emr/constraints
    :portkey.cloudformation.emr/rules]
   :opt
   [])))
(do
 (clojure.spec.alpha/def
  :portkey.cloudformation.emr/adjustment-type
  clojure.core/string?)
 (clojure.spec.alpha/def
  :portkey.cloudformation.emr/cool-down
  clojure.core/integer?)
 (clojure.spec.alpha/def
  :portkey.cloudformation.emr/scaling-adjustment
  clojure.core/integer?)
 (clojure.spec.alpha/def
  :portkey.cloudformation.emr/simple-scaling-policy-configuration
  (clojure.spec.alpha/keys
   :req
   [:portkey.cloudformation.emr/scaling-adjustment]
   :opt
   [:portkey.cloudformation.emr/adjustment-type
    :portkey.cloudformation.emr/cool-down])))
(do
 (clojure.spec.alpha/def
  :portkey.cloudformation.emr/name
  clojure.core/string?)
 (clojure.spec.alpha/def
  :portkey.cloudformation.emr/target-on-demand-capacity
  clojure.core/integer?)
 (clojure.spec.alpha/def
  :portkey.cloudformation.emr/target-spot-capacity
  clojure.core/integer?)
 (clojure.spec.alpha/def
  :portkey.cloudformation.emr/instance-fleet-config
  (clojure.spec.alpha/keys
   :req
   []
   :opt
   [:portkey.cloudformation.emr/instance-type-configs
    :portkey.cloudformation.emr/launch-specifications
    :portkey.cloudformation.emr/name
    :portkey.cloudformation.emr/target-on-demand-capacity
    :portkey.cloudformation.emr/target-spot-capacity])))
(do
 (clojure.spec.alpha/def
  :portkey.cloudformation.emr/volumes-per-instance
  clojure.core/integer?)
 (clojure.spec.alpha/def
  :portkey.cloudformation.emr/ebs-block-device-config
  (clojure.spec.alpha/keys
   :req
   [:portkey.cloudformation.emr/volume-specification]
   :opt
   [:portkey.cloudformation.emr/volumes-per-instance])))
(do
 (clojure.spec.alpha/def
  :portkey.cloudformation.emr/ebs-optimized
  clojure.core/boolean?)
 (clojure.spec.alpha/def
  :portkey.cloudformation.emr/ebs-configuration
  (clojure.spec.alpha/keys
   :req
   []
   :opt
   [:portkey.cloudformation.emr/ebs-block-device-configs
    :portkey.cloudformation.emr/ebs-optimized])))
(do
 (clojure.spec.alpha/def
  :portkey.cloudformation.emr/path
  clojure.core/string?)
 (clojure.spec.alpha/def
  :portkey.cloudformation.emr/script-bootstrap-action-config
  (clojure.spec.alpha/keys
   :req
   [:portkey.cloudformation.emr/path]
   :opt
   [:portkey.cloudformation.emr/args])))
(do
 (clojure.spec.alpha/def
  :portkey.cloudformation.emr/block-duration-minutes
  clojure.core/integer?)
 (clojure.spec.alpha/def
  :portkey.cloudformation.emr/timeout-action
  clojure.core/string?)
 (clojure.spec.alpha/def
  :portkey.cloudformation.emr/timeout-duration-minutes
  clojure.core/integer?)
 (clojure.spec.alpha/def
  :portkey.cloudformation.emr/spot-provisioning-specification
  (clojure.spec.alpha/keys
   :req
   [:portkey.cloudformation.emr/timeout-action
    :portkey.cloudformation.emr/timeout-duration-minutes]
   :opt
   [:portkey.cloudformation.emr/block-duration-minutes])))
(do
 (clojure.spec.alpha/def
  :portkey.cloudformation.emr/market
  clojure.core/string?)
 (clojure.spec.alpha/def
  :portkey.cloudformation.emr/scaling-action
  (clojure.spec.alpha/keys
   :req
   [:portkey.cloudformation.emr/simple-scaling-policy-configuration]
   :opt
   [:portkey.cloudformation.emr/market])))
(do
 (clojure.spec.alpha/def
  :portkey.cloudformation.emr/block-duration-minutes
  clojure.core/integer?)
 (clojure.spec.alpha/def
  :portkey.cloudformation.emr/timeout-action
  clojure.core/string?)
 (clojure.spec.alpha/def
  :portkey.cloudformation.emr/timeout-duration-minutes
  clojure.core/integer?)
 (clojure.spec.alpha/def
  :portkey.cloudformation.emr/spot-provisioning-specification
  (clojure.spec.alpha/keys
   :req
   [:portkey.cloudformation.emr/timeout-action
    :portkey.cloudformation.emr/timeout-duration-minutes]
   :opt
   [:portkey.cloudformation.emr/block-duration-minutes])))
(do
 (clojure.spec.alpha/def
  :portkey.cloudformation.emr/iops
  clojure.core/integer?)
 (clojure.spec.alpha/def
  :portkey.cloudformation.emr/size-in-gb
  clojure.core/integer?)
 (clojure.spec.alpha/def
  :portkey.cloudformation.emr/volume-type
  clojure.core/string?)
 (clojure.spec.alpha/def
  :portkey.cloudformation.emr/volume-specification
  (clojure.spec.alpha/keys
   :req
   [:portkey.cloudformation.emr/size-in-gb
    :portkey.cloudformation.emr/volume-type]
   :opt
   [:portkey.cloudformation.emr/iops])))
(do
 (clojure.spec.alpha/def
  :portkey.cloudformation.emr/key
  clojure.core/string?)
 (clojure.spec.alpha/def
  :portkey.cloudformation.emr/value
  clojure.core/string?)
 (clojure.spec.alpha/def
  :portkey.cloudformation.emr/key-value
  (clojure.spec.alpha/keys
   :req
   []
   :opt
   [:portkey.cloudformation.emr/key
    :portkey.cloudformation.emr/value])))
(do
 (clojure.spec.alpha/def
  :portkey.cloudformation.emr/ebs-optimized
  clojure.core/boolean?)
 (clojure.spec.alpha/def
  :portkey.cloudformation.emr/ebs-configuration
  (clojure.spec.alpha/keys
   :req
   []
   :opt
   [:portkey.cloudformation.emr/ebs-block-device-configs
    :portkey.cloudformation.emr/ebs-optimized])))
(do
 (clojure.spec.alpha/def
  :portkey.cloudformation.emr/key
  clojure.core/string?)
 (clojure.spec.alpha/def
  :portkey.cloudformation.emr/value
  clojure.core/string?)
 (clojure.spec.alpha/def
  :portkey.cloudformation.emr/metric-dimension
  (clojure.spec.alpha/keys
   :req
   [:portkey.cloudformation.emr/key :portkey.cloudformation.emr/value]
   :opt
   [])))
(do
 (clojure.spec.alpha/def
  :portkey.cloudformation.emr/ebs-optimized
  clojure.core/boolean?)
 (clojure.spec.alpha/def
  :portkey.cloudformation.emr/ebs-configuration
  (clojure.spec.alpha/keys
   :req
   []
   :opt
   [:portkey.cloudformation.emr/ebs-block-device-configs
    :portkey.cloudformation.emr/ebs-optimized])))
(do
 (clojure.spec.alpha/def
  :portkey.cloudformation.emr/description
  clojure.core/string?)
 (clojure.spec.alpha/def
  :portkey.cloudformation.emr/name
  clojure.core/string?)
 (clojure.spec.alpha/def
  :portkey.cloudformation.emr/scaling-rule
  (clojure.spec.alpha/keys
   :req
   [:portkey.cloudformation.emr/action
    :portkey.cloudformation.emr/name
    :portkey.cloudformation.emr/trigger]
   :opt
   [:portkey.cloudformation.emr/description])))
(do
 (clojure.spec.alpha/def
  :portkey.cloudformation.emr/key
  clojure.core/string?)
 (clojure.spec.alpha/def
  :portkey.cloudformation.emr/value
  clojure.core/string?)
 (clojure.spec.alpha/def
  :portkey.cloudformation.emr/metric-dimension
  (clojure.spec.alpha/keys
   :req
   [:portkey.cloudformation.emr/key :portkey.cloudformation.emr/value]
   :opt
   [])))
(do
 (clojure.spec.alpha/def
  :portkey.cloudformation.emr/max-capacity
  clojure.core/integer?)
 (clojure.spec.alpha/def
  :portkey.cloudformation.emr/min-capacity
  clojure.core/integer?)
 (clojure.spec.alpha/def
  :portkey.cloudformation.emr/scaling-constraints
  (clojure.spec.alpha/keys
   :req
   [:portkey.cloudformation.emr/max-capacity
    :portkey.cloudformation.emr/min-capacity]
   :opt
   [])))
(do
 (clojure.spec.alpha/def
  :portkey.cloudformation.emr/jar
  clojure.core/string?)
 (clojure.spec.alpha/def
  :portkey.cloudformation.emr/main-class
  clojure.core/string?)
 (clojure.spec.alpha/def
  :portkey.cloudformation.emr/hadoop-jar-step-config
  (clojure.spec.alpha/keys
   :req
   [:portkey.cloudformation.emr/jar]
   :opt
   [:portkey.cloudformation.emr/args
    :portkey.cloudformation.emr/main-class
    :portkey.cloudformation.emr/step-properties])))
(do
 (clojure.spec.alpha/def
  :portkey.cloudformation.emr/instance-fleet-provisioning-specifications
  (clojure.spec.alpha/keys
   :req
   [:portkey.cloudformation.emr/spot-specification]
   :opt
   [])))
(do
 (clojure.spec.alpha/def
  :portkey.cloudformation.emr/classification
  clojure.core/string?)
 (clojure.spec.alpha/def
  :portkey.cloudformation.emr/configuration
  (clojure.spec.alpha/keys
   :req
   []
   :opt
   [:portkey.cloudformation.emr/classification
    :portkey.cloudformation.emr/configuration-properties
    :portkey.cloudformation.emr/configurations])))
(do
 (clojure.spec.alpha/def
  :portkey.cloudformation.emr/classification
  clojure.core/string?)
 (clojure.spec.alpha/def
  :portkey.cloudformation.emr/configuration
  (clojure.spec.alpha/keys
   :req
   []
   :opt
   [:portkey.cloudformation.emr/classification
    :portkey.cloudformation.emr/configuration-properties
    :portkey.cloudformation.emr/configurations])))
(do
 (clojure.spec.alpha/def
  :portkey.cloudformation.emr/classification
  clojure.core/string?)
 (clojure.spec.alpha/def
  :portkey.cloudformation.emr/configuration
  (clojure.spec.alpha/keys
   :req
   []
   :opt
   [:portkey.cloudformation.emr/classification
    :portkey.cloudformation.emr/configuration-properties
    :portkey.cloudformation.emr/configurations])))
(do
 (clojure.spec.alpha/def
  :portkey.cloudformation.emr/unit
  clojure.core/string?)
 (clojure.spec.alpha/def
  :portkey.cloudformation.emr/period
  clojure.core/integer?)
 (clojure.spec.alpha/def
  :portkey.cloudformation.emr/threshold
  clojure.core/double?)
 (clojure.spec.alpha/def
  :portkey.cloudformation.emr/comparison-operator
  clojure.core/string?)
 (clojure.spec.alpha/def
  :portkey.cloudformation.emr/namespace
  clojure.core/string?)
 (clojure.spec.alpha/def
  :portkey.cloudformation.emr/metric-name
  clojure.core/string?)
 (clojure.spec.alpha/def
  :portkey.cloudformation.emr/evaluation-periods
  clojure.core/integer?)
 (clojure.spec.alpha/def
  :portkey.cloudformation.emr/statistic
  clojure.core/string?)
 (clojure.spec.alpha/def
  :portkey.cloudformation.emr/cloud-watch-alarm-definition
  (clojure.spec.alpha/keys
   :req
   [:portkey.cloudformation.emr/period
    :portkey.cloudformation.emr/threshold
    :portkey.cloudformation.emr/comparison-operator
    :portkey.cloudformation.emr/metric-name]
   :opt
   [:portkey.cloudformation.emr/unit
    :portkey.cloudformation.emr/dimensions
    :portkey.cloudformation.emr/namespace
    :portkey.cloudformation.emr/evaluation-periods
    :portkey.cloudformation.emr/statistic])))
(do
 (clojure.spec.alpha/def
  :portkey.cloudformation.emr/scaling-trigger
  (clojure.spec.alpha/keys
   :req
   [:portkey.cloudformation.emr/cloud-watch-alarm-definition]
   :opt
   [])))
