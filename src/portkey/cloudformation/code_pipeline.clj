(ns portkey.cloudformation.code-pipeline
  "AUTOGENERATED clojure.spec definitions"
  (:require [clojure.spec.alpha]
            [portkey.cloudformation]))

(do
 (clojure.core/defmethod
  portkey.cloudformation/resource-type-spec
  :portkey.cloudformation.code-pipeline/custom-action-type
  [___15594__auto__]
  (clojure.spec.alpha/keys
   :req
   [:portkey.cloudformation.code-pipeline/category
    :portkey.cloudformation.code-pipeline/input-artifact-details
    :portkey.cloudformation.code-pipeline/output-artifact-details
    :portkey.cloudformation.code-pipeline/provider]
   :opt
   [:portkey.cloudformation.code-pipeline/configuration-properties
    :portkey.cloudformation.code-pipeline/settings
    :portkey.cloudformation.code-pipeline/version]))
 (clojure.spec.alpha/def
  :portkey.cloudformation.code-pipeline/category
  clojure.core/string?)
 (clojure.spec.alpha/def
  :portkey.cloudformation.code-pipeline/provider
  clojure.core/string?)
 (clojure.spec.alpha/def
  :portkey.cloudformation.code-pipeline/version
  clojure.core/string?))
(do
 (clojure.core/defmethod
  portkey.cloudformation/resource-type-spec
  :portkey.cloudformation.code-pipeline/pipeline
  [___15594__auto__]
  (clojure.spec.alpha/keys
   :req
   [:portkey.cloudformation.code-pipeline/artifact-store
    :portkey.cloudformation.code-pipeline/role-arn
    :portkey.cloudformation.code-pipeline/stages]
   :opt
   [:portkey.cloudformation.code-pipeline/disable-inbound-stage-transitions
    :portkey.cloudformation.code-pipeline/name
    :portkey.cloudformation.code-pipeline/restart-execution-on-update]))
 (clojure.spec.alpha/def
  :portkey.cloudformation.code-pipeline/name
  clojure.core/string?)
 (clojure.spec.alpha/def
  :portkey.cloudformation.code-pipeline/restart-execution-on-update
  clojure.core/boolean?)
 (clojure.spec.alpha/def
  :portkey.cloudformation.code-pipeline/role-arn
  clojure.core/string?))
(do
 (clojure.spec.alpha/def
  :portkey.cloudformation.code-pipeline/category
  clojure.core/string?)
 (clojure.spec.alpha/def
  :portkey.cloudformation.code-pipeline/owner
  clojure.core/string?)
 (clojure.spec.alpha/def
  :portkey.cloudformation.code-pipeline/provider
  clojure.core/string?)
 (clojure.spec.alpha/def
  :portkey.cloudformation.code-pipeline/version
  clojure.core/string?)
 (clojure.spec.alpha/def
  :portkey.cloudformation.code-pipeline/action-type-id
  (clojure.spec.alpha/keys
   :req
   [:portkey.cloudformation.code-pipeline/category
    :portkey.cloudformation.code-pipeline/owner
    :portkey.cloudformation.code-pipeline/provider
    :portkey.cloudformation.code-pipeline/version]
   :opt
   [])))
(do
 (clojure.spec.alpha/def
  :portkey.cloudformation.code-pipeline/maximum-count
  clojure.core/integer?)
 (clojure.spec.alpha/def
  :portkey.cloudformation.code-pipeline/minimum-count
  clojure.core/integer?)
 (clojure.spec.alpha/def
  :portkey.cloudformation.code-pipeline/artifact-details
  (clojure.spec.alpha/keys
   :req
   [:portkey.cloudformation.code-pipeline/maximum-count
    :portkey.cloudformation.code-pipeline/minimum-count]
   :opt
   [])))
(do
 (clojure.spec.alpha/def
  :portkey.cloudformation.code-pipeline/name
  clojure.core/string?)
 (clojure.spec.alpha/def
  :portkey.cloudformation.code-pipeline/output-artifact
  (clojure.spec.alpha/keys
   :req
   [:portkey.cloudformation.code-pipeline/name]
   :opt
   [])))
(do
 (clojure.spec.alpha/def
  :portkey.cloudformation.code-pipeline/entity-url-template
  clojure.core/string?)
 (clojure.spec.alpha/def
  :portkey.cloudformation.code-pipeline/execution-url-template
  clojure.core/string?)
 (clojure.spec.alpha/def
  :portkey.cloudformation.code-pipeline/revision-url-template
  clojure.core/string?)
 (clojure.spec.alpha/def
  :portkey.cloudformation.code-pipeline/third-party-configuration-url
  clojure.core/string?)
 (clojure.spec.alpha/def
  :portkey.cloudformation.code-pipeline/settings
  (clojure.spec.alpha/keys
   :req
   []
   :opt
   [:portkey.cloudformation.code-pipeline/entity-url-template
    :portkey.cloudformation.code-pipeline/execution-url-template
    :portkey.cloudformation.code-pipeline/revision-url-template
    :portkey.cloudformation.code-pipeline/third-party-configuration-url])))
(do
 (clojure.spec.alpha/def
  :portkey.cloudformation.code-pipeline/reason
  clojure.core/string?)
 (clojure.spec.alpha/def
  :portkey.cloudformation.code-pipeline/stage-name
  clojure.core/string?)
 (clojure.spec.alpha/def
  :portkey.cloudformation.code-pipeline/stage-transition
  (clojure.spec.alpha/keys
   :req
   [:portkey.cloudformation.code-pipeline/reason
    :portkey.cloudformation.code-pipeline/stage-name]
   :opt
   [])))
(do
 (clojure.spec.alpha/def
  :portkey.cloudformation.code-pipeline/description
  clojure.core/string?)
 (clojure.spec.alpha/def
  :portkey.cloudformation.code-pipeline/key
  clojure.core/boolean?)
 (clojure.spec.alpha/def
  :portkey.cloudformation.code-pipeline/name
  clojure.core/string?)
 (clojure.spec.alpha/def
  :portkey.cloudformation.code-pipeline/queryable
  clojure.core/boolean?)
 (clojure.spec.alpha/def
  :portkey.cloudformation.code-pipeline/required
  clojure.core/boolean?)
 (clojure.spec.alpha/def
  :portkey.cloudformation.code-pipeline/secret
  clojure.core/boolean?)
 (clojure.spec.alpha/def
  :portkey.cloudformation.code-pipeline/type
  clojure.core/string?)
 (clojure.spec.alpha/def
  :portkey.cloudformation.code-pipeline/configuration-properties
  (clojure.spec.alpha/keys
   :req
   [:portkey.cloudformation.code-pipeline/key
    :portkey.cloudformation.code-pipeline/name
    :portkey.cloudformation.code-pipeline/required
    :portkey.cloudformation.code-pipeline/secret]
   :opt
   [:portkey.cloudformation.code-pipeline/description
    :portkey.cloudformation.code-pipeline/queryable
    :portkey.cloudformation.code-pipeline/type])))
(do
 (clojure.spec.alpha/def
  :portkey.cloudformation.code-pipeline/name
  clojure.core/string?)
 (clojure.spec.alpha/def
  :portkey.cloudformation.code-pipeline/type
  clojure.core/string?)
 (clojure.spec.alpha/def
  :portkey.cloudformation.code-pipeline/blocker-declaration
  (clojure.spec.alpha/keys
   :req
   [:portkey.cloudformation.code-pipeline/name
    :portkey.cloudformation.code-pipeline/type]
   :opt
   [])))
(do
 (clojure.spec.alpha/def
  :portkey.cloudformation.code-pipeline/name
  clojure.core/string?)
 (clojure.spec.alpha/def
  :portkey.cloudformation.code-pipeline/input-artifact
  (clojure.spec.alpha/keys
   :req
   [:portkey.cloudformation.code-pipeline/name]
   :opt
   [])))
(do
 (clojure.spec.alpha/def
  :portkey.cloudformation.code-pipeline/configuration
  clojure.core/any?)
 (clojure.spec.alpha/def
  :portkey.cloudformation.code-pipeline/name
  clojure.core/string?)
 (clojure.spec.alpha/def
  :portkey.cloudformation.code-pipeline/role-arn
  clojure.core/string?)
 (clojure.spec.alpha/def
  :portkey.cloudformation.code-pipeline/run-order
  clojure.core/integer?)
 (clojure.spec.alpha/def
  :portkey.cloudformation.code-pipeline/action-declaration
  (clojure.spec.alpha/keys
   :req
   [:portkey.cloudformation.code-pipeline/action-type-id
    :portkey.cloudformation.code-pipeline/name]
   :opt
   [:portkey.cloudformation.code-pipeline/configuration
    :portkey.cloudformation.code-pipeline/input-artifacts
    :portkey.cloudformation.code-pipeline/output-artifacts
    :portkey.cloudformation.code-pipeline/role-arn
    :portkey.cloudformation.code-pipeline/run-order])))
(do
 (clojure.spec.alpha/def
  :portkey.cloudformation.code-pipeline/location
  clojure.core/string?)
 (clojure.spec.alpha/def
  :portkey.cloudformation.code-pipeline/type
  clojure.core/string?)
 (clojure.spec.alpha/def
  :portkey.cloudformation.code-pipeline/artifact-store
  (clojure.spec.alpha/keys
   :req
   [:portkey.cloudformation.code-pipeline/location
    :portkey.cloudformation.code-pipeline/type]
   :opt
   [:portkey.cloudformation.code-pipeline/encryption-key])))
(do
 (clojure.spec.alpha/def
  :portkey.cloudformation.code-pipeline/name
  clojure.core/string?)
 (clojure.spec.alpha/def
  :portkey.cloudformation.code-pipeline/stage-declaration
  (clojure.spec.alpha/keys
   :req
   [:portkey.cloudformation.code-pipeline/actions
    :portkey.cloudformation.code-pipeline/name]
   :opt
   [:portkey.cloudformation.code-pipeline/blockers])))
(do
 (clojure.spec.alpha/def
  :portkey.cloudformation.code-pipeline/id
  clojure.core/string?)
 (clojure.spec.alpha/def
  :portkey.cloudformation.code-pipeline/type
  clojure.core/string?)
 (clojure.spec.alpha/def
  :portkey.cloudformation.code-pipeline/encryption-key
  (clojure.spec.alpha/keys
   :req
   [:portkey.cloudformation.code-pipeline/id
    :portkey.cloudformation.code-pipeline/type]
   :opt
   [])))
