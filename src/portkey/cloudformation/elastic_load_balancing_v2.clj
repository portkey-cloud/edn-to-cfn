(ns portkey.cloudformation.elastic-load-balancing-v2
  "AUTOGENERATED clojure.spec definitions"
  (:require [clojure.spec.alpha]
            [portkey.cloudformation]))

(do
 (clojure.core/defmethod
  portkey.cloudformation/resource-type-spec
  :portkey.cloudformation.elastic-load-balancing-v2/listener-rule
  [___15594__auto__]
  (clojure.spec.alpha/keys
   :req
   [:portkey.cloudformation.elastic-load-balancing-v2/actions
    :portkey.cloudformation.elastic-load-balancing-v2/conditions
    :portkey.cloudformation.elastic-load-balancing-v2/listener-arn
    :portkey.cloudformation.elastic-load-balancing-v2/priority]
   :opt
   []))
 (clojure.spec.alpha/def
  :portkey.cloudformation.elastic-load-balancing-v2/listener-arn
  clojure.core/string?)
 (clojure.spec.alpha/def
  :portkey.cloudformation.elastic-load-balancing-v2/priority
  clojure.core/integer?))
(do
 (clojure.core/defmethod
  portkey.cloudformation/resource-type-spec
  :portkey.cloudformation.elastic-load-balancing-v2/load-balancer
  [___15594__auto__]
  (clojure.spec.alpha/keys
   :req
   []
   :opt
   [:portkey.cloudformation.elastic-load-balancing-v2/load-balancer-attributes
    :portkey.cloudformation.elastic-load-balancing-v2/type
    :portkey.cloudformation.elastic-load-balancing-v2/subnets
    :portkey.cloudformation.elastic-load-balancing-v2/security-groups
    :portkey.cloudformation.elastic-load-balancing-v2/subnet-mappings
    :portkey.cloudformation.elastic-load-balancing-v2/tags
    :portkey.cloudformation.elastic-load-balancing-v2/ip-address-type
    :portkey.cloudformation.elastic-load-balancing-v2/scheme
    :portkey.cloudformation.elastic-load-balancing-v2/name]))
 (clojure.spec.alpha/def
  :portkey.cloudformation.elastic-load-balancing-v2/type
  clojure.core/string?)
 (clojure.spec.alpha/def
  :portkey.cloudformation.elastic-load-balancing-v2/ip-address-type
  clojure.core/string?)
 (clojure.spec.alpha/def
  :portkey.cloudformation.elastic-load-balancing-v2/scheme
  clojure.core/string?)
 (clojure.spec.alpha/def
  :portkey.cloudformation.elastic-load-balancing-v2/name
  clojure.core/string?))
(do
 (clojure.core/defmethod
  portkey.cloudformation/resource-type-spec
  :portkey.cloudformation.elastic-load-balancing-v2/listener-certificate
  [___15594__auto__]
  (clojure.spec.alpha/keys
   :req
   [:portkey.cloudformation.elastic-load-balancing-v2/certificates
    :portkey.cloudformation.elastic-load-balancing-v2/listener-arn]
   :opt
   []))
 (clojure.spec.alpha/def
  :portkey.cloudformation.elastic-load-balancing-v2/listener-arn
  clojure.core/string?))
(do
 (clojure.core/defmethod
  portkey.cloudformation/resource-type-spec
  :portkey.cloudformation.elastic-load-balancing-v2/target-group
  [___15594__auto__]
  (clojure.spec.alpha/keys
   :req
   [:portkey.cloudformation.elastic-load-balancing-v2/protocol
    :portkey.cloudformation.elastic-load-balancing-v2/port
    :portkey.cloudformation.elastic-load-balancing-v2/vpc-id]
   :opt
   [:portkey.cloudformation.elastic-load-balancing-v2/healthy-threshold-count
    :portkey.cloudformation.elastic-load-balancing-v2/health-check-timeout-seconds
    :portkey.cloudformation.elastic-load-balancing-v2/target-type
    :portkey.cloudformation.elastic-load-balancing-v2/tags
    :portkey.cloudformation.elastic-load-balancing-v2/unhealthy-threshold-count
    :portkey.cloudformation.elastic-load-balancing-v2/health-check-interval-seconds
    :portkey.cloudformation.elastic-load-balancing-v2/health-check-port
    :portkey.cloudformation.elastic-load-balancing-v2/health-check-protocol
    :portkey.cloudformation.elastic-load-balancing-v2/targets
    :portkey.cloudformation.elastic-load-balancing-v2/name
    :portkey.cloudformation.elastic-load-balancing-v2/matcher
    :portkey.cloudformation.elastic-load-balancing-v2/target-group-attributes
    :portkey.cloudformation.elastic-load-balancing-v2/health-check-path]))
 (clojure.spec.alpha/def
  :portkey.cloudformation.elastic-load-balancing-v2/healthy-threshold-count
  clojure.core/integer?)
 (clojure.spec.alpha/def
  :portkey.cloudformation.elastic-load-balancing-v2/health-check-timeout-seconds
  clojure.core/integer?)
 (clojure.spec.alpha/def
  :portkey.cloudformation.elastic-load-balancing-v2/target-type
  clojure.core/string?)
 (clojure.spec.alpha/def
  :portkey.cloudformation.elastic-load-balancing-v2/unhealthy-threshold-count
  clojure.core/integer?)
 (clojure.spec.alpha/def
  :portkey.cloudformation.elastic-load-balancing-v2/protocol
  clojure.core/string?)
 (clojure.spec.alpha/def
  :portkey.cloudformation.elastic-load-balancing-v2/port
  clojure.core/integer?)
 (clojure.spec.alpha/def
  :portkey.cloudformation.elastic-load-balancing-v2/vpc-id
  clojure.core/string?)
 (clojure.spec.alpha/def
  :portkey.cloudformation.elastic-load-balancing-v2/health-check-interval-seconds
  clojure.core/integer?)
 (clojure.spec.alpha/def
  :portkey.cloudformation.elastic-load-balancing-v2/health-check-port
  clojure.core/string?)
 (clojure.spec.alpha/def
  :portkey.cloudformation.elastic-load-balancing-v2/health-check-protocol
  clojure.core/string?)
 (clojure.spec.alpha/def
  :portkey.cloudformation.elastic-load-balancing-v2/name
  clojure.core/string?)
 (clojure.spec.alpha/def
  :portkey.cloudformation.elastic-load-balancing-v2/health-check-path
  clojure.core/string?))
(do
 (clojure.core/defmethod
  portkey.cloudformation/resource-type-spec
  :portkey.cloudformation.elastic-load-balancing-v2/listener
  [___15594__auto__]
  (clojure.spec.alpha/keys
   :req
   [:portkey.cloudformation.elastic-load-balancing-v2/default-actions
    :portkey.cloudformation.elastic-load-balancing-v2/load-balancer-arn
    :portkey.cloudformation.elastic-load-balancing-v2/port
    :portkey.cloudformation.elastic-load-balancing-v2/protocol]
   :opt
   [:portkey.cloudformation.elastic-load-balancing-v2/certificates
    :portkey.cloudformation.elastic-load-balancing-v2/ssl-policy]))
 (clojure.spec.alpha/def
  :portkey.cloudformation.elastic-load-balancing-v2/load-balancer-arn
  clojure.core/string?)
 (clojure.spec.alpha/def
  :portkey.cloudformation.elastic-load-balancing-v2/port
  clojure.core/integer?)
 (clojure.spec.alpha/def
  :portkey.cloudformation.elastic-load-balancing-v2/protocol
  clojure.core/string?)
 (clojure.spec.alpha/def
  :portkey.cloudformation.elastic-load-balancing-v2/ssl-policy
  clojure.core/string?))
(do
 (clojure.spec.alpha/def
  :portkey.cloudformation.elastic-load-balancing-v2/availability-zone
  clojure.core/string?)
 (clojure.spec.alpha/def
  :portkey.cloudformation.elastic-load-balancing-v2/id
  clojure.core/string?)
 (clojure.spec.alpha/def
  :portkey.cloudformation.elastic-load-balancing-v2/port
  clojure.core/integer?)
 (clojure.spec.alpha/def
  :portkey.cloudformation.elastic-load-balancing-v2/target-description
  (clojure.spec.alpha/keys
   :req
   [:portkey.cloudformation.elastic-load-balancing-v2/id]
   :opt
   [:portkey.cloudformation.elastic-load-balancing-v2/availability-zone
    :portkey.cloudformation.elastic-load-balancing-v2/port])))
(do
 (clojure.spec.alpha/def
  :portkey.cloudformation.elastic-load-balancing-v2/certificate-arn
  clojure.core/string?)
 (clojure.spec.alpha/def
  :portkey.cloudformation.elastic-load-balancing-v2/certificate
  (clojure.spec.alpha/keys
   :req
   []
   :opt
   [:portkey.cloudformation.elastic-load-balancing-v2/certificate-arn])))
(do
 (clojure.spec.alpha/def
  :portkey.cloudformation.elastic-load-balancing-v2/certificate-arn
  clojure.core/string?)
 (clojure.spec.alpha/def
  :portkey.cloudformation.elastic-load-balancing-v2/certificate
  (clojure.spec.alpha/keys
   :req
   []
   :opt
   [:portkey.cloudformation.elastic-load-balancing-v2/certificate-arn])))
(do
 (clojure.spec.alpha/def
  :portkey.cloudformation.elastic-load-balancing-v2/field
  clojure.core/string?)
 (clojure.spec.alpha/def
  :portkey.cloudformation.elastic-load-balancing-v2/rule-condition
  (clojure.spec.alpha/keys
   :req
   []
   :opt
   [:portkey.cloudformation.elastic-load-balancing-v2/field
    :portkey.cloudformation.elastic-load-balancing-v2/values])))
(do
 (clojure.spec.alpha/def
  :portkey.cloudformation.elastic-load-balancing-v2/http-code
  clojure.core/string?)
 (clojure.spec.alpha/def
  :portkey.cloudformation.elastic-load-balancing-v2/matcher
  (clojure.spec.alpha/keys
   :req
   [:portkey.cloudformation.elastic-load-balancing-v2/http-code]
   :opt
   [])))
(do
 (clojure.spec.alpha/def
  :portkey.cloudformation.elastic-load-balancing-v2/key
  clojure.core/string?)
 (clojure.spec.alpha/def
  :portkey.cloudformation.elastic-load-balancing-v2/value
  clojure.core/string?)
 (clojure.spec.alpha/def
  :portkey.cloudformation.elastic-load-balancing-v2/target-group-attribute
  (clojure.spec.alpha/keys
   :req
   []
   :opt
   [:portkey.cloudformation.elastic-load-balancing-v2/key
    :portkey.cloudformation.elastic-load-balancing-v2/value])))
(do
 (clojure.spec.alpha/def
  :portkey.cloudformation.elastic-load-balancing-v2/allocation-id
  clojure.core/string?)
 (clojure.spec.alpha/def
  :portkey.cloudformation.elastic-load-balancing-v2/subnet-id
  clojure.core/string?)
 (clojure.spec.alpha/def
  :portkey.cloudformation.elastic-load-balancing-v2/subnet-mapping
  (clojure.spec.alpha/keys
   :req
   [:portkey.cloudformation.elastic-load-balancing-v2/allocation-id
    :portkey.cloudformation.elastic-load-balancing-v2/subnet-id]
   :opt
   [])))
(do
 (clojure.spec.alpha/def
  :portkey.cloudformation.elastic-load-balancing-v2/key
  clojure.core/string?)
 (clojure.spec.alpha/def
  :portkey.cloudformation.elastic-load-balancing-v2/value
  clojure.core/string?)
 (clojure.spec.alpha/def
  :portkey.cloudformation.elastic-load-balancing-v2/load-balancer-attribute
  (clojure.spec.alpha/keys
   :req
   []
   :opt
   [:portkey.cloudformation.elastic-load-balancing-v2/key
    :portkey.cloudformation.elastic-load-balancing-v2/value])))
(do
 (clojure.spec.alpha/def
  :portkey.cloudformation.elastic-load-balancing-v2/target-group-arn
  clojure.core/string?)
 (clojure.spec.alpha/def
  :portkey.cloudformation.elastic-load-balancing-v2/type
  clojure.core/string?)
 (clojure.spec.alpha/def
  :portkey.cloudformation.elastic-load-balancing-v2/action
  (clojure.spec.alpha/keys
   :req
   [:portkey.cloudformation.elastic-load-balancing-v2/target-group-arn
    :portkey.cloudformation.elastic-load-balancing-v2/type]
   :opt
   [])))
(do
 (clojure.spec.alpha/def
  :portkey.cloudformation.elastic-load-balancing-v2/target-group-arn
  clojure.core/string?)
 (clojure.spec.alpha/def
  :portkey.cloudformation.elastic-load-balancing-v2/type
  clojure.core/string?)
 (clojure.spec.alpha/def
  :portkey.cloudformation.elastic-load-balancing-v2/action
  (clojure.spec.alpha/keys
   :req
   [:portkey.cloudformation.elastic-load-balancing-v2/target-group-arn
    :portkey.cloudformation.elastic-load-balancing-v2/type]
   :opt
   [])))
