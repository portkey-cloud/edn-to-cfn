(ns portkey.cloudformation.work-spaces
  "AUTOGENERATED clojure.spec definitions"
  (:require [clojure.spec.alpha]
            [portkey.cloudformation]))

(do
 (clojure.core/defmethod
  portkey.cloudformation/resource-type-spec
  :portkey.cloudformation.work-spaces/workspace
  [___19567__auto__]
  (clojure.spec.alpha/keys
   :req
   [:portkey.cloudformation/id
    :portkey.cloudformation/type
    :portkey.cloudformation.work-spaces/bundle-id
    :portkey.cloudformation.work-spaces/directory-id
    :portkey.cloudformation.work-spaces/user-name]
   :opt
   [:portkey.cloudformation.work-spaces/root-volume-encryption-enabled
    :portkey.cloudformation.work-spaces/user-volume-encryption-enabled
    :portkey.cloudformation.work-spaces/volume-encryption-key]))
 (clojure.spec.alpha/def
  :portkey.cloudformation.work-spaces/bundle-id
  (portkey.cloudformation/ref-or-spec clojure.core/string?))
 (clojure.spec.alpha/def
  :portkey.cloudformation.work-spaces/directory-id
  (portkey.cloudformation/ref-or-spec clojure.core/string?))
 (clojure.spec.alpha/def
  :portkey.cloudformation.work-spaces/root-volume-encryption-enabled
  (portkey.cloudformation/ref-or-spec clojure.core/boolean?))
 (clojure.spec.alpha/def
  :portkey.cloudformation.work-spaces/user-name
  (portkey.cloudformation/ref-or-spec clojure.core/string?))
 (clojure.spec.alpha/def
  :portkey.cloudformation.work-spaces/user-volume-encryption-enabled
  (portkey.cloudformation/ref-or-spec clojure.core/boolean?))
 (clojure.spec.alpha/def
  :portkey.cloudformation.work-spaces/volume-encryption-key
  (portkey.cloudformation/ref-or-spec clojure.core/string?)))
