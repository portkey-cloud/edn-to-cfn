(ns portkey.cloudformation.cloud-front
  "AUTOGENERATED clojure.spec definitions"
  (:require [clojure.spec.alpha]
            [portkey.cloudformation]))

(do
 (clojure.core/defmethod
  portkey.cloudformation/resource-type-spec
  :portkey.cloudformation.cloud-front/distribution
  [___19567__auto__]
  (clojure.spec.alpha/keys
   :req
   [:portkey.cloudformation/id
    :portkey.cloudformation/type
    :portkey.cloudformation.cloud-front/distribution-config]
   :opt
   [:portkey.cloudformation.cloud-front/tags])))
(do
 (clojure.core/defmethod
  portkey.cloudformation/resource-type-spec
  :portkey.cloudformation.cloud-front/cloud-front-origin-access-identity
  [___19567__auto__]
  (clojure.spec.alpha/keys
   :req
   [:portkey.cloudformation/id
    :portkey.cloudformation/type
    :portkey.cloudformation.cloud-front/cloud-front-origin-access-identity-config]
   :opt
   [])))
(do
 (clojure.core/defmethod
  portkey.cloudformation/resource-type-spec
  :portkey.cloudformation.cloud-front/streaming-distribution
  [___19567__auto__]
  (clojure.spec.alpha/keys
   :req
   [:portkey.cloudformation/id
    :portkey.cloudformation/type
    :portkey.cloudformation.cloud-front/streaming-distribution-config
    :portkey.cloudformation.cloud-front/tags]
   :opt
   [])))
(do
 (clojure.spec.alpha/def
  :portkey.cloudformation.cloud-front/query-string
  (portkey.cloudformation/ref-or-spec clojure.core/boolean?))
 (clojure.spec.alpha/def
  :portkey.cloudformation.cloud-front/forwarded-values
  (clojure.spec.alpha/keys
   :req
   [:portkey.cloudformation.cloud-front/query-string]
   :opt
   [:portkey.cloudformation.cloud-front/cookies
    :portkey.cloudformation.cloud-front/headers
    :portkey.cloudformation.cloud-front/query-string-cache-keys])))
(do
 (clojure.spec.alpha/def
  :portkey.cloudformation.cloud-front/default-root-object
  (portkey.cloudformation/ref-or-spec clojure.core/string?))
 (clojure.spec.alpha/def
  :portkey.cloudformation.cloud-front/comment
  (portkey.cloudformation/ref-or-spec clojure.core/string?))
 (clojure.spec.alpha/def
  :portkey.cloudformation.cloud-front/web-acl-id
  (portkey.cloudformation/ref-or-spec clojure.core/string?))
 (clojure.spec.alpha/def
  :portkey.cloudformation.cloud-front/enabled
  (portkey.cloudformation/ref-or-spec clojure.core/boolean?))
 (clojure.spec.alpha/def
  :portkey.cloudformation.cloud-front/price-class
  (portkey.cloudformation/ref-or-spec clojure.core/string?))
 (clojure.spec.alpha/def
  :portkey.cloudformation.cloud-front/ipv6-enabled
  (portkey.cloudformation/ref-or-spec clojure.core/boolean?))
 (clojure.spec.alpha/def
  :portkey.cloudformation.cloud-front/http-version
  (portkey.cloudformation/ref-or-spec clojure.core/string?))
 (clojure.spec.alpha/def
  :portkey.cloudformation.cloud-front/distribution-config
  (clojure.spec.alpha/keys
   :req
   [:portkey.cloudformation.cloud-front/enabled]
   :opt
   [:portkey.cloudformation.cloud-front/default-root-object
    :portkey.cloudformation.cloud-front/restrictions
    :portkey.cloudformation.cloud-front/comment
    :portkey.cloudformation.cloud-front/web-acl-id
    :portkey.cloudformation.cloud-front/logging
    :portkey.cloudformation.cloud-front/cache-behaviors
    :portkey.cloudformation.cloud-front/custom-error-responses
    :portkey.cloudformation.cloud-front/aliases
    :portkey.cloudformation.cloud-front/price-class
    :portkey.cloudformation.cloud-front/ipv6-enabled
    :portkey.cloudformation.cloud-front/origins
    :portkey.cloudformation.cloud-front/http-version
    :portkey.cloudformation.cloud-front/default-cache-behavior
    :portkey.cloudformation.cloud-front/viewer-certificate])))
(do
 (clojure.spec.alpha/def
  :portkey.cloudformation.cloud-front/origin-access-identity
  (portkey.cloudformation/ref-or-spec clojure.core/string?))
 (clojure.spec.alpha/def
  :portkey.cloudformation.cloud-front/s3-origin-config
  (clojure.spec.alpha/keys
   :req
   []
   :opt
   [:portkey.cloudformation.cloud-front/origin-access-identity])))
(do
 (clojure.spec.alpha/def
  :portkey.cloudformation.cloud-front/restriction-type
  (portkey.cloudformation/ref-or-spec clojure.core/string?))
 (clojure.spec.alpha/def
  :portkey.cloudformation.cloud-front/geo-restriction
  (clojure.spec.alpha/keys
   :req
   [:portkey.cloudformation.cloud-front/restriction-type]
   :opt
   [:portkey.cloudformation.cloud-front/locations])))
(do
 (clojure.spec.alpha/def
  :portkey.cloudformation.cloud-front/response-code
  (portkey.cloudformation/ref-or-spec clojure.core/integer?))
 (clojure.spec.alpha/def
  :portkey.cloudformation.cloud-front/error-caching-min-ttl
  (portkey.cloudformation/ref-or-spec clojure.core/double?))
 (clojure.spec.alpha/def
  :portkey.cloudformation.cloud-front/error-code
  (portkey.cloudformation/ref-or-spec clojure.core/integer?))
 (clojure.spec.alpha/def
  :portkey.cloudformation.cloud-front/response-page-path
  (portkey.cloudformation/ref-or-spec clojure.core/string?))
 (clojure.spec.alpha/def
  :portkey.cloudformation.cloud-front/custom-error-response
  (clojure.spec.alpha/keys
   :req
   [:portkey.cloudformation.cloud-front/error-code]
   :opt
   [:portkey.cloudformation.cloud-front/response-code
    :portkey.cloudformation.cloud-front/error-caching-min-ttl
    :portkey.cloudformation.cloud-front/response-page-path])))
(do
 (clojure.spec.alpha/def
  :portkey.cloudformation.cloud-front/enabled
  (portkey.cloudformation/ref-or-spec clojure.core/boolean?))
 (clojure.spec.alpha/def
  :portkey.cloudformation.cloud-front/trusted-signers
  (clojure.spec.alpha/keys
   :req
   [:portkey.cloudformation.cloud-front/enabled]
   :opt
   [:portkey.cloudformation.cloud-front/aws-account-numbers])))
(do
 (clojure.spec.alpha/def
  :portkey.cloudformation.cloud-front/origin-read-timeout
  (portkey.cloudformation/ref-or-spec clojure.core/integer?))
 (clojure.spec.alpha/def
  :portkey.cloudformation.cloud-front/https-port
  (portkey.cloudformation/ref-or-spec clojure.core/integer?))
 (clojure.spec.alpha/def
  :portkey.cloudformation.cloud-front/origin-keepalive-timeout
  (portkey.cloudformation/ref-or-spec clojure.core/integer?))
 (clojure.spec.alpha/def
  :portkey.cloudformation.cloud-front/http-port
  (portkey.cloudformation/ref-or-spec clojure.core/integer?))
 (clojure.spec.alpha/def
  :portkey.cloudformation.cloud-front/origin-protocol-policy
  (portkey.cloudformation/ref-or-spec clojure.core/string?))
 (clojure.spec.alpha/def
  :portkey.cloudformation.cloud-front/custom-origin-config
  (clojure.spec.alpha/keys
   :req
   [:portkey.cloudformation.cloud-front/origin-protocol-policy]
   :opt
   [:portkey.cloudformation.cloud-front/origin-read-timeout
    :portkey.cloudformation.cloud-front/https-port
    :portkey.cloudformation.cloud-front/origin-keepalive-timeout
    :portkey.cloudformation.cloud-front/origin-ssl-protocols
    :portkey.cloudformation.cloud-front/http-port])))
(do
 (clojure.spec.alpha/def
  :portkey.cloudformation.cloud-front/comment
  (portkey.cloudformation/ref-or-spec clojure.core/string?))
 (clojure.spec.alpha/def
  :portkey.cloudformation.cloud-front/price-class
  (portkey.cloudformation/ref-or-spec clojure.core/string?))
 (clojure.spec.alpha/def
  :portkey.cloudformation.cloud-front/enabled
  (portkey.cloudformation/ref-or-spec clojure.core/boolean?))
 (clojure.spec.alpha/def
  :portkey.cloudformation.cloud-front/streaming-distribution-config
  (clojure.spec.alpha/keys
   :req
   [:portkey.cloudformation.cloud-front/comment
    :portkey.cloudformation.cloud-front/s3-origin
    :portkey.cloudformation.cloud-front/enabled
    :portkey.cloudformation.cloud-front/trusted-signers]
   :opt
   [:portkey.cloudformation.cloud-front/logging
    :portkey.cloudformation.cloud-front/price-class
    :portkey.cloudformation.cloud-front/aliases])))
(do
 (clojure.spec.alpha/def
  :portkey.cloudformation.cloud-front/bucket
  (portkey.cloudformation/ref-or-spec clojure.core/string?))
 (clojure.spec.alpha/def
  :portkey.cloudformation.cloud-front/enabled
  (portkey.cloudformation/ref-or-spec clojure.core/boolean?))
 (clojure.spec.alpha/def
  :portkey.cloudformation.cloud-front/prefix
  (portkey.cloudformation/ref-or-spec clojure.core/string?))
 (clojure.spec.alpha/def
  :portkey.cloudformation.cloud-front/logging
  (clojure.spec.alpha/keys
   :req
   [:portkey.cloudformation.cloud-front/bucket
    :portkey.cloudformation.cloud-front/enabled
    :portkey.cloudformation.cloud-front/prefix]
   :opt
   [])))
(do
 (clojure.spec.alpha/def
  :portkey.cloudformation.cloud-front/comment
  (portkey.cloudformation/ref-or-spec clojure.core/string?))
 (clojure.spec.alpha/def
  :portkey.cloudformation.cloud-front/cloud-front-origin-access-identity-config
  (clojure.spec.alpha/keys
   :req
   [:portkey.cloudformation.cloud-front/comment]
   :opt
   [])))
(do
 (clojure.spec.alpha/def
  :portkey.cloudformation.cloud-front/domain-name
  (portkey.cloudformation/ref-or-spec clojure.core/string?))
 (clojure.spec.alpha/def
  :portkey.cloudformation.cloud-front/origin-access-identity
  (portkey.cloudformation/ref-or-spec clojure.core/string?))
 (clojure.spec.alpha/def
  :portkey.cloudformation.cloud-front/s3-origin
  (clojure.spec.alpha/keys
   :req
   [:portkey.cloudformation.cloud-front/domain-name
    :portkey.cloudformation.cloud-front/origin-access-identity]
   :opt
   [])))
(do
 (clojure.spec.alpha/def
  :portkey.cloudformation.cloud-front/include-cookies
  (portkey.cloudformation/ref-or-spec clojure.core/boolean?))
 (clojure.spec.alpha/def
  :portkey.cloudformation.cloud-front/bucket
  (portkey.cloudformation/ref-or-spec clojure.core/string?))
 (clojure.spec.alpha/def
  :portkey.cloudformation.cloud-front/prefix
  (portkey.cloudformation/ref-or-spec clojure.core/string?))
 (clojure.spec.alpha/def
  :portkey.cloudformation.cloud-front/logging
  (clojure.spec.alpha/keys
   :req
   [:portkey.cloudformation.cloud-front/bucket]
   :opt
   [:portkey.cloudformation.cloud-front/include-cookies
    :portkey.cloudformation.cloud-front/prefix])))
(do
 (clojure.spec.alpha/def
  :portkey.cloudformation.cloud-front/event-type
  (portkey.cloudformation/ref-or-spec clojure.core/string?))
 (clojure.spec.alpha/def
  :portkey.cloudformation.cloud-front/lambda-function-arn
  (portkey.cloudformation/ref-or-spec clojure.core/string?))
 (clojure.spec.alpha/def
  :portkey.cloudformation.cloud-front/lambda-function-association
  (clojure.spec.alpha/keys
   :req
   []
   :opt
   [:portkey.cloudformation.cloud-front/event-type
    :portkey.cloudformation.cloud-front/lambda-function-arn])))
(do
 (clojure.spec.alpha/def
  :portkey.cloudformation.cloud-front/smooth-streaming
  (portkey.cloudformation/ref-or-spec clojure.core/boolean?))
 (clojure.spec.alpha/def
  :portkey.cloudformation.cloud-front/compress
  (portkey.cloudformation/ref-or-spec clojure.core/boolean?))
 (clojure.spec.alpha/def
  :portkey.cloudformation.cloud-front/target-origin-id
  (portkey.cloudformation/ref-or-spec clojure.core/string?))
 (clojure.spec.alpha/def
  :portkey.cloudformation.cloud-front/viewer-protocol-policy
  (portkey.cloudformation/ref-or-spec clojure.core/string?))
 (clojure.spec.alpha/def
  :portkey.cloudformation.cloud-front/min-ttl
  (portkey.cloudformation/ref-or-spec clojure.core/double?))
 (clojure.spec.alpha/def
  :portkey.cloudformation.cloud-front/max-ttl
  (portkey.cloudformation/ref-or-spec clojure.core/double?))
 (clojure.spec.alpha/def
  :portkey.cloudformation.cloud-front/default-ttl
  (portkey.cloudformation/ref-or-spec clojure.core/double?))
 (clojure.spec.alpha/def
  :portkey.cloudformation.cloud-front/default-cache-behavior
  (clojure.spec.alpha/keys
   :req
   [:portkey.cloudformation.cloud-front/forwarded-values
    :portkey.cloudformation.cloud-front/target-origin-id
    :portkey.cloudformation.cloud-front/viewer-protocol-policy]
   :opt
   [:portkey.cloudformation.cloud-front/smooth-streaming
    :portkey.cloudformation.cloud-front/compress
    :portkey.cloudformation.cloud-front/lambda-function-associations
    :portkey.cloudformation.cloud-front/min-ttl
    :portkey.cloudformation.cloud-front/cached-methods
    :portkey.cloudformation.cloud-front/max-ttl
    :portkey.cloudformation.cloud-front/allowed-methods
    :portkey.cloudformation.cloud-front/default-ttl
    :portkey.cloudformation.cloud-front/trusted-signers])))
(do
 (clojure.spec.alpha/def
  :portkey.cloudformation.cloud-front/smooth-streaming
  (portkey.cloudformation/ref-or-spec clojure.core/boolean?))
 (clojure.spec.alpha/def
  :portkey.cloudformation.cloud-front/compress
  (portkey.cloudformation/ref-or-spec clojure.core/boolean?))
 (clojure.spec.alpha/def
  :portkey.cloudformation.cloud-front/target-origin-id
  (portkey.cloudformation/ref-or-spec clojure.core/string?))
 (clojure.spec.alpha/def
  :portkey.cloudformation.cloud-front/viewer-protocol-policy
  (portkey.cloudformation/ref-or-spec clojure.core/string?))
 (clojure.spec.alpha/def
  :portkey.cloudformation.cloud-front/min-ttl
  (portkey.cloudformation/ref-or-spec clojure.core/double?))
 (clojure.spec.alpha/def
  :portkey.cloudformation.cloud-front/path-pattern
  (portkey.cloudformation/ref-or-spec clojure.core/string?))
 (clojure.spec.alpha/def
  :portkey.cloudformation.cloud-front/max-ttl
  (portkey.cloudformation/ref-or-spec clojure.core/double?))
 (clojure.spec.alpha/def
  :portkey.cloudformation.cloud-front/default-ttl
  (portkey.cloudformation/ref-or-spec clojure.core/double?))
 (clojure.spec.alpha/def
  :portkey.cloudformation.cloud-front/cache-behavior
  (clojure.spec.alpha/keys
   :req
   [:portkey.cloudformation.cloud-front/forwarded-values
    :portkey.cloudformation.cloud-front/target-origin-id
    :portkey.cloudformation.cloud-front/viewer-protocol-policy
    :portkey.cloudformation.cloud-front/path-pattern]
   :opt
   [:portkey.cloudformation.cloud-front/smooth-streaming
    :portkey.cloudformation.cloud-front/compress
    :portkey.cloudformation.cloud-front/lambda-function-associations
    :portkey.cloudformation.cloud-front/min-ttl
    :portkey.cloudformation.cloud-front/cached-methods
    :portkey.cloudformation.cloud-front/max-ttl
    :portkey.cloudformation.cloud-front/allowed-methods
    :portkey.cloudformation.cloud-front/default-ttl
    :portkey.cloudformation.cloud-front/trusted-signers])))
(do
 (clojure.spec.alpha/def
  :portkey.cloudformation.cloud-front/restrictions
  (clojure.spec.alpha/keys
   :req
   [:portkey.cloudformation.cloud-front/geo-restriction]
   :opt
   [])))
(do
 (clojure.spec.alpha/def
  :portkey.cloudformation.cloud-front/forward
  (portkey.cloudformation/ref-or-spec clojure.core/string?))
 (clojure.spec.alpha/def
  :portkey.cloudformation.cloud-front/cookies
  (clojure.spec.alpha/keys
   :req
   [:portkey.cloudformation.cloud-front/forward]
   :opt
   [:portkey.cloudformation.cloud-front/whitelisted-names])))
(do
 (clojure.spec.alpha/def
  :portkey.cloudformation.cloud-front/iam-certificate-id
  (portkey.cloudformation/ref-or-spec clojure.core/string?))
 (clojure.spec.alpha/def
  :portkey.cloudformation.cloud-front/ssl-support-method
  (portkey.cloudformation/ref-or-spec clojure.core/string?))
 (clojure.spec.alpha/def
  :portkey.cloudformation.cloud-front/minimum-protocol-version
  (portkey.cloudformation/ref-or-spec clojure.core/string?))
 (clojure.spec.alpha/def
  :portkey.cloudformation.cloud-front/cloud-front-default-certificate
  (portkey.cloudformation/ref-or-spec clojure.core/boolean?))
 (clojure.spec.alpha/def
  :portkey.cloudformation.cloud-front/acm-certificate-arn
  (portkey.cloudformation/ref-or-spec clojure.core/string?))
 (clojure.spec.alpha/def
  :portkey.cloudformation.cloud-front/viewer-certificate
  (clojure.spec.alpha/keys
   :req
   []
   :opt
   [:portkey.cloudformation.cloud-front/iam-certificate-id
    :portkey.cloudformation.cloud-front/ssl-support-method
    :portkey.cloudformation.cloud-front/minimum-protocol-version
    :portkey.cloudformation.cloud-front/cloud-front-default-certificate
    :portkey.cloudformation.cloud-front/acm-certificate-arn])))
(do
 (clojure.spec.alpha/def
  :portkey.cloudformation.cloud-front/domain-name
  (portkey.cloudformation/ref-or-spec clojure.core/string?))
 (clojure.spec.alpha/def
  :portkey.cloudformation.cloud-front/origin-path
  (portkey.cloudformation/ref-or-spec clojure.core/string?))
 (clojure.spec.alpha/def
  :portkey.cloudformation.cloud-front/id
  (portkey.cloudformation/ref-or-spec clojure.core/string?))
 (clojure.spec.alpha/def
  :portkey.cloudformation.cloud-front/origin
  (clojure.spec.alpha/keys
   :req
   [:portkey.cloudformation.cloud-front/domain-name
    :portkey.cloudformation.cloud-front/id]
   :opt
   [:portkey.cloudformation.cloud-front/origin-custom-headers
    :portkey.cloudformation.cloud-front/s3-origin-config
    :portkey.cloudformation.cloud-front/origin-path
    :portkey.cloudformation.cloud-front/custom-origin-config])))
(do
 (clojure.spec.alpha/def
  :portkey.cloudformation.cloud-front/header-value
  (portkey.cloudformation/ref-or-spec clojure.core/string?))
 (clojure.spec.alpha/def
  :portkey.cloudformation.cloud-front/header-name
  (portkey.cloudformation/ref-or-spec clojure.core/string?))
 (clojure.spec.alpha/def
  :portkey.cloudformation.cloud-front/origin-custom-header
  (clojure.spec.alpha/keys
   :req
   [:portkey.cloudformation.cloud-front/header-value
    :portkey.cloudformation.cloud-front/header-name]
   :opt
   [])))
