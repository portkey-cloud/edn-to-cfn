(ns portkey.cloudformation.events
  "AUTOGENERATED clojure.spec definitions"
  (:require [clojure.spec.alpha]
            [portkey.cloudformation]))

(do
 (clojure.core/defmethod
  portkey.cloudformation/resource-type-spec
  :portkey.cloudformation.events/rule
  [___15594__auto__]
  (clojure.spec.alpha/keys
   :req
   []
   :opt
   [:portkey.cloudformation.events/description
    :portkey.cloudformation.events/event-pattern
    :portkey.cloudformation.events/name
    :portkey.cloudformation.events/role-arn
    :portkey.cloudformation.events/schedule-expression
    :portkey.cloudformation.events/state
    :portkey.cloudformation.events/targets]))
 (clojure.spec.alpha/def
  :portkey.cloudformation.events/description
  clojure.core/string?)
 (clojure.spec.alpha/def
  :portkey.cloudformation.events/event-pattern
  clojure.core/any?)
 (clojure.spec.alpha/def
  :portkey.cloudformation.events/name
  clojure.core/string?)
 (clojure.spec.alpha/def
  :portkey.cloudformation.events/role-arn
  clojure.core/string?)
 (clojure.spec.alpha/def
  :portkey.cloudformation.events/schedule-expression
  clojure.core/string?)
 (clojure.spec.alpha/def
  :portkey.cloudformation.events/state
  clojure.core/string?))
(do
 (clojure.spec.alpha/def
  :portkey.cloudformation.events/input-template
  clojure.core/string?)
 (clojure.spec.alpha/def
  :portkey.cloudformation.events/input-transformer
  (clojure.spec.alpha/keys
   :req
   [:portkey.cloudformation.events/input-template]
   :opt
   [:portkey.cloudformation.events/input-paths-map])))
(do
 (clojure.spec.alpha/def
  :portkey.cloudformation.events/run-command-parameters
  (clojure.spec.alpha/keys
   :req
   [:portkey.cloudformation.events/run-command-targets]
   :opt
   [])))
(do
 (clojure.spec.alpha/def
  :portkey.cloudformation.events/input-path
  clojure.core/string?)
 (clojure.spec.alpha/def
  :portkey.cloudformation.events/role-arn
  clojure.core/string?)
 (clojure.spec.alpha/def
  :portkey.cloudformation.events/input
  clojure.core/string?)
 (clojure.spec.alpha/def
  :portkey.cloudformation.events/arn
  clojure.core/string?)
 (clojure.spec.alpha/def
  :portkey.cloudformation.events/id
  clojure.core/string?)
 (clojure.spec.alpha/def
  :portkey.cloudformation.events/target
  (clojure.spec.alpha/keys
   :req
   [:portkey.cloudformation.events/arn
    :portkey.cloudformation.events/id]
   :opt
   [:portkey.cloudformation.events/input-transformer
    :portkey.cloudformation.events/input-path
    :portkey.cloudformation.events/kinesis-parameters
    :portkey.cloudformation.events/role-arn
    :portkey.cloudformation.events/input
    :portkey.cloudformation.events/run-command-parameters
    :portkey.cloudformation.events/ecs-parameters])))
(do
 (clojure.spec.alpha/def
  :portkey.cloudformation.events/task-count
  clojure.core/integer?)
 (clojure.spec.alpha/def
  :portkey.cloudformation.events/task-definition-arn
  clojure.core/string?)
 (clojure.spec.alpha/def
  :portkey.cloudformation.events/ecs-parameters
  (clojure.spec.alpha/keys
   :req
   [:portkey.cloudformation.events/task-definition-arn]
   :opt
   [:portkey.cloudformation.events/task-count])))
(do
 (clojure.spec.alpha/def
  :portkey.cloudformation.events/partition-key-path
  clojure.core/string?)
 (clojure.spec.alpha/def
  :portkey.cloudformation.events/kinesis-parameters
  (clojure.spec.alpha/keys
   :req
   [:portkey.cloudformation.events/partition-key-path]
   :opt
   [])))
(do
 (clojure.spec.alpha/def
  :portkey.cloudformation.events/key
  clojure.core/string?)
 (clojure.spec.alpha/def
  :portkey.cloudformation.events/run-command-target
  (clojure.spec.alpha/keys
   :req
   [:portkey.cloudformation.events/key
    :portkey.cloudformation.events/values]
   :opt
   [])))
