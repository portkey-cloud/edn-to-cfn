(ns portkey.cloudformation.game-lift
  "AUTOGENERATED clojure.spec definitions"
  (:require [clojure.spec.alpha]
            [portkey.cloudformation]))

(do
 (clojure.core/defmethod
  portkey.cloudformation/resource-type-spec
  :portkey.cloudformation.game-lift/alias
  [___15594__auto__]
  (clojure.spec.alpha/keys
   :req
   [:portkey.cloudformation.game-lift/name
    :portkey.cloudformation.game-lift/routing-strategy]
   :opt
   [:portkey.cloudformation.game-lift/description]))
 (clojure.spec.alpha/def
  :portkey.cloudformation.game-lift/description
  clojure.core/string?)
 (clojure.spec.alpha/def
  :portkey.cloudformation.game-lift/name
  clojure.core/string?))
(do
 (clojure.core/defmethod
  portkey.cloudformation/resource-type-spec
  :portkey.cloudformation.game-lift/fleet
  [___15594__auto__]
  (clojure.spec.alpha/keys
   :req
   [:portkey.cloudformation.game-lift/ec2-instance-type
    :portkey.cloudformation.game-lift/server-launch-path
    :portkey.cloudformation.game-lift/desired-ec2-instances
    :portkey.cloudformation.game-lift/name
    :portkey.cloudformation.game-lift/build-id]
   :opt
   [:portkey.cloudformation.game-lift/ec2-inbound-permissions
    :portkey.cloudformation.game-lift/description
    :portkey.cloudformation.game-lift/server-launch-parameters
    :portkey.cloudformation.game-lift/min-size
    :portkey.cloudformation.game-lift/max-size
    :portkey.cloudformation.game-lift/log-paths]))
 (clojure.spec.alpha/def
  :portkey.cloudformation.game-lift/ec2-instance-type
  clojure.core/string?)
 (clojure.spec.alpha/def
  :portkey.cloudformation.game-lift/server-launch-path
  clojure.core/string?)
 (clojure.spec.alpha/def
  :portkey.cloudformation.game-lift/description
  clojure.core/string?)
 (clojure.spec.alpha/def
  :portkey.cloudformation.game-lift/server-launch-parameters
  clojure.core/string?)
 (clojure.spec.alpha/def
  :portkey.cloudformation.game-lift/desired-ec2-instances
  clojure.core/integer?)
 (clojure.spec.alpha/def
  :portkey.cloudformation.game-lift/min-size
  clojure.core/integer?)
 (clojure.spec.alpha/def
  :portkey.cloudformation.game-lift/name
  clojure.core/string?)
 (clojure.spec.alpha/def
  :portkey.cloudformation.game-lift/max-size
  clojure.core/integer?)
 (clojure.spec.alpha/def
  :portkey.cloudformation.game-lift/build-id
  clojure.core/string?))
(do
 (clojure.core/defmethod
  portkey.cloudformation/resource-type-spec
  :portkey.cloudformation.game-lift/build
  [___15594__auto__]
  (clojure.spec.alpha/keys
   :req
   []
   :opt
   [:portkey.cloudformation.game-lift/name
    :portkey.cloudformation.game-lift/storage-location
    :portkey.cloudformation.game-lift/version]))
 (clojure.spec.alpha/def
  :portkey.cloudformation.game-lift/name
  clojure.core/string?)
 (clojure.spec.alpha/def
  :portkey.cloudformation.game-lift/version
  clojure.core/string?))
(do
 (clojure.spec.alpha/def
  :portkey.cloudformation.game-lift/bucket
  clojure.core/string?)
 (clojure.spec.alpha/def
  :portkey.cloudformation.game-lift/key
  clojure.core/string?)
 (clojure.spec.alpha/def
  :portkey.cloudformation.game-lift/role-arn
  clojure.core/string?)
 (clojure.spec.alpha/def
  :portkey.cloudformation.game-lift/s3-location
  (clojure.spec.alpha/keys
   :req
   [:portkey.cloudformation.game-lift/bucket
    :portkey.cloudformation.game-lift/key
    :portkey.cloudformation.game-lift/role-arn]
   :opt
   [])))
(do
 (clojure.spec.alpha/def
  :portkey.cloudformation.game-lift/from-port
  clojure.core/integer?)
 (clojure.spec.alpha/def
  :portkey.cloudformation.game-lift/ip-range
  clojure.core/string?)
 (clojure.spec.alpha/def
  :portkey.cloudformation.game-lift/protocol
  clojure.core/string?)
 (clojure.spec.alpha/def
  :portkey.cloudformation.game-lift/to-port
  clojure.core/integer?)
 (clojure.spec.alpha/def
  :portkey.cloudformation.game-lift/ip-permission
  (clojure.spec.alpha/keys
   :req
   [:portkey.cloudformation.game-lift/from-port
    :portkey.cloudformation.game-lift/ip-range
    :portkey.cloudformation.game-lift/protocol
    :portkey.cloudformation.game-lift/to-port]
   :opt
   [])))
(do
 (clojure.spec.alpha/def
  :portkey.cloudformation.game-lift/fleet-id
  clojure.core/string?)
 (clojure.spec.alpha/def
  :portkey.cloudformation.game-lift/message
  clojure.core/string?)
 (clojure.spec.alpha/def
  :portkey.cloudformation.game-lift/type
  clojure.core/string?)
 (clojure.spec.alpha/def
  :portkey.cloudformation.game-lift/routing-strategy
  (clojure.spec.alpha/keys
   :req
   [:portkey.cloudformation.game-lift/type]
   :opt
   [:portkey.cloudformation.game-lift/fleet-id
    :portkey.cloudformation.game-lift/message])))
