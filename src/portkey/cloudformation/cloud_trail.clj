(ns portkey.cloudformation.cloud-trail
  "AUTOGENERATED clojure.spec definitions"
  (:require [clojure.spec.alpha]
            [portkey.cloudformation]))

(do
 (clojure.core/defmethod
  portkey.cloudformation/resource-type-spec
  :portkey.cloudformation.cloud-trail/trail
  [___19567__auto__]
  (clojure.spec.alpha/keys
   :req
   [:portkey.cloudformation/id
    :portkey.cloudformation/type
    :portkey.cloudformation.cloud-trail/s3-bucket-name
    :portkey.cloudformation.cloud-trail/is-logging]
   :opt
   [:portkey.cloudformation.cloud-trail/enable-log-file-validation
    :portkey.cloudformation.cloud-trail/cloud-watch-logs-log-group-arn
    :portkey.cloudformation.cloud-trail/include-global-service-events
    :portkey.cloudformation.cloud-trail/event-selectors
    :portkey.cloudformation.cloud-trail/tags
    :portkey.cloudformation.cloud-trail/kms-key-id
    :portkey.cloudformation.cloud-trail/cloud-watch-logs-role-arn
    :portkey.cloudformation.cloud-trail/s3-key-prefix
    :portkey.cloudformation.cloud-trail/sns-topic-name
    :portkey.cloudformation.cloud-trail/is-multi-region-trail
    :portkey.cloudformation.cloud-trail/trail-name]))
 (clojure.spec.alpha/def
  :portkey.cloudformation.cloud-trail/enable-log-file-validation
  (portkey.cloudformation/ref-or-spec clojure.core/boolean?))
 (clojure.spec.alpha/def
  :portkey.cloudformation.cloud-trail/cloud-watch-logs-log-group-arn
  (portkey.cloudformation/ref-or-spec clojure.core/string?))
 (clojure.spec.alpha/def
  :portkey.cloudformation.cloud-trail/include-global-service-events
  (portkey.cloudformation/ref-or-spec clojure.core/boolean?))
 (clojure.spec.alpha/def
  :portkey.cloudformation.cloud-trail/s3-bucket-name
  (portkey.cloudformation/ref-or-spec clojure.core/string?))
 (clojure.spec.alpha/def
  :portkey.cloudformation.cloud-trail/kms-key-id
  (portkey.cloudformation/ref-or-spec clojure.core/string?))
 (clojure.spec.alpha/def
  :portkey.cloudformation.cloud-trail/cloud-watch-logs-role-arn
  (portkey.cloudformation/ref-or-spec clojure.core/string?))
 (clojure.spec.alpha/def
  :portkey.cloudformation.cloud-trail/s3-key-prefix
  (portkey.cloudformation/ref-or-spec clojure.core/string?))
 (clojure.spec.alpha/def
  :portkey.cloudformation.cloud-trail/sns-topic-name
  (portkey.cloudformation/ref-or-spec clojure.core/string?))
 (clojure.spec.alpha/def
  :portkey.cloudformation.cloud-trail/is-logging
  (portkey.cloudformation/ref-or-spec clojure.core/boolean?))
 (clojure.spec.alpha/def
  :portkey.cloudformation.cloud-trail/is-multi-region-trail
  (portkey.cloudformation/ref-or-spec clojure.core/boolean?))
 (clojure.spec.alpha/def
  :portkey.cloudformation.cloud-trail/trail-name
  (portkey.cloudformation/ref-or-spec clojure.core/string?)))
(do
 (clojure.spec.alpha/def
  :portkey.cloudformation.cloud-trail/type
  (portkey.cloudformation/ref-or-spec clojure.core/string?))
 (clojure.spec.alpha/def
  :portkey.cloudformation.cloud-trail/data-resource
  (clojure.spec.alpha/keys
   :req
   [:portkey.cloudformation.cloud-trail/type]
   :opt
   [:portkey.cloudformation.cloud-trail/values])))
(do
 (clojure.spec.alpha/def
  :portkey.cloudformation.cloud-trail/include-management-events
  (portkey.cloudformation/ref-or-spec clojure.core/boolean?))
 (clojure.spec.alpha/def
  :portkey.cloudformation.cloud-trail/read-write-type
  (portkey.cloudformation/ref-or-spec clojure.core/string?))
 (clojure.spec.alpha/def
  :portkey.cloudformation.cloud-trail/event-selector
  (clojure.spec.alpha/keys
   :req
   []
   :opt
   [:portkey.cloudformation.cloud-trail/data-resources
    :portkey.cloudformation.cloud-trail/include-management-events
    :portkey.cloudformation.cloud-trail/read-write-type])))
