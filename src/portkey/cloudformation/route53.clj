(ns portkey.cloudformation.route53
  "AUTOGENERATED clojure.spec definitions"
  (:require [clojure.spec.alpha]
            [portkey.cloudformation]))

(do
 (clojure.core/defmethod
  portkey.cloudformation/resource-type-spec
  :portkey.cloudformation.route53/record-set-group
  [___19567__auto__]
  (clojure.spec.alpha/keys
   :req
   [:portkey.cloudformation/id :portkey.cloudformation/type]
   :opt
   [:portkey.cloudformation.route53/comment
    :portkey.cloudformation.route53/hosted-zone-id
    :portkey.cloudformation.route53/hosted-zone-name
    :portkey.cloudformation.route53/record-sets]))
 (clojure.spec.alpha/def
  :portkey.cloudformation.route53/comment
  (portkey.cloudformation/ref-or-spec clojure.core/string?))
 (clojure.spec.alpha/def
  :portkey.cloudformation.route53/hosted-zone-id
  (portkey.cloudformation/ref-or-spec clojure.core/string?))
 (clojure.spec.alpha/def
  :portkey.cloudformation.route53/hosted-zone-name
  (portkey.cloudformation/ref-or-spec clojure.core/string?)))
(do
 (clojure.core/defmethod
  portkey.cloudformation/resource-type-spec
  :portkey.cloudformation.route53/health-check
  [___19567__auto__]
  (clojure.spec.alpha/keys
   :req
   [:portkey.cloudformation/id
    :portkey.cloudformation/type
    :portkey.cloudformation.route53/health-check-config]
   :opt
   [:portkey.cloudformation.route53/health-check-tags])))
(do
 (clojure.core/defmethod
  portkey.cloudformation/resource-type-spec
  :portkey.cloudformation.route53/hosted-zone
  [___19567__auto__]
  (clojure.spec.alpha/keys
   :req
   [:portkey.cloudformation/id
    :portkey.cloudformation/type
    :portkey.cloudformation.route53/name]
   :opt
   [:portkey.cloudformation.route53/hosted-zone-config
    :portkey.cloudformation.route53/hosted-zone-tags
    :portkey.cloudformation.route53/query-logging-config
    :portkey.cloudformation.route53/vp-cs]))
 (clojure.spec.alpha/def
  :portkey.cloudformation.route53/name
  (portkey.cloudformation/ref-or-spec clojure.core/string?)))
(do
 (clojure.core/defmethod
  portkey.cloudformation/resource-type-spec
  :portkey.cloudformation.route53/record-set
  [___19567__auto__]
  (clojure.spec.alpha/keys
   :req
   [:portkey.cloudformation/id
    :portkey.cloudformation/type
    :portkey.cloudformation.route53/type
    :portkey.cloudformation.route53/name]
   :opt
   [:portkey.cloudformation.route53/alias-target
    :portkey.cloudformation.route53/comment
    :portkey.cloudformation.route53/hosted-zone-name
    :portkey.cloudformation.route53/geo-location
    :portkey.cloudformation.route53/ttl
    :portkey.cloudformation.route53/set-identifier
    :portkey.cloudformation.route53/weight
    :portkey.cloudformation.route53/health-check-id
    :portkey.cloudformation.route53/hosted-zone-id
    :portkey.cloudformation.route53/resource-records
    :portkey.cloudformation.route53/failover
    :portkey.cloudformation.route53/region]))
 (clojure.spec.alpha/def
  :portkey.cloudformation.route53/comment
  (portkey.cloudformation/ref-or-spec clojure.core/string?))
 (clojure.spec.alpha/def
  :portkey.cloudformation.route53/type
  (portkey.cloudformation/ref-or-spec clojure.core/string?))
 (clojure.spec.alpha/def
  :portkey.cloudformation.route53/hosted-zone-name
  (portkey.cloudformation/ref-or-spec clojure.core/string?))
 (clojure.spec.alpha/def
  :portkey.cloudformation.route53/ttl
  (portkey.cloudformation/ref-or-spec clojure.core/string?))
 (clojure.spec.alpha/def
  :portkey.cloudformation.route53/set-identifier
  (portkey.cloudformation/ref-or-spec clojure.core/string?))
 (clojure.spec.alpha/def
  :portkey.cloudformation.route53/weight
  (portkey.cloudformation/ref-or-spec clojure.core/integer?))
 (clojure.spec.alpha/def
  :portkey.cloudformation.route53/health-check-id
  (portkey.cloudformation/ref-or-spec clojure.core/string?))
 (clojure.spec.alpha/def
  :portkey.cloudformation.route53/hosted-zone-id
  (portkey.cloudformation/ref-or-spec clojure.core/string?))
 (clojure.spec.alpha/def
  :portkey.cloudformation.route53/failover
  (portkey.cloudformation/ref-or-spec clojure.core/string?))
 (clojure.spec.alpha/def
  :portkey.cloudformation.route53/name
  (portkey.cloudformation/ref-or-spec clojure.core/string?))
 (clojure.spec.alpha/def
  :portkey.cloudformation.route53/region
  (portkey.cloudformation/ref-or-spec clojure.core/string?)))
(do
 (clojure.spec.alpha/def
  :portkey.cloudformation.route53/key
  (portkey.cloudformation/ref-or-spec clojure.core/string?))
 (clojure.spec.alpha/def
  :portkey.cloudformation.route53/value
  (portkey.cloudformation/ref-or-spec clojure.core/string?))
 (clojure.spec.alpha/def
  :portkey.cloudformation.route53/health-check-tag
  (clojure.spec.alpha/keys
   :req
   [:portkey.cloudformation.route53/key
    :portkey.cloudformation.route53/value]
   :opt
   [])))
(do
 (clojure.spec.alpha/def
  :portkey.cloudformation.route53/dns-name
  (portkey.cloudformation/ref-or-spec clojure.core/string?))
 (clojure.spec.alpha/def
  :portkey.cloudformation.route53/evaluate-target-health
  (portkey.cloudformation/ref-or-spec clojure.core/boolean?))
 (clojure.spec.alpha/def
  :portkey.cloudformation.route53/hosted-zone-id
  (portkey.cloudformation/ref-or-spec clojure.core/string?))
 (clojure.spec.alpha/def
  :portkey.cloudformation.route53/alias-target
  (clojure.spec.alpha/keys
   :req
   [:portkey.cloudformation.route53/dns-name
    :portkey.cloudformation.route53/hosted-zone-id]
   :opt
   [:portkey.cloudformation.route53/evaluate-target-health])))
(do
 (clojure.spec.alpha/def
  :portkey.cloudformation.route53/key
  (portkey.cloudformation/ref-or-spec clojure.core/string?))
 (clojure.spec.alpha/def
  :portkey.cloudformation.route53/value
  (portkey.cloudformation/ref-or-spec clojure.core/string?))
 (clojure.spec.alpha/def
  :portkey.cloudformation.route53/hosted-zone-tag
  (clojure.spec.alpha/keys
   :req
   [:portkey.cloudformation.route53/key
    :portkey.cloudformation.route53/value]
   :opt
   [])))
(do
 (clojure.spec.alpha/def
  :portkey.cloudformation.route53/comment
  (portkey.cloudformation/ref-or-spec clojure.core/string?))
 (clojure.spec.alpha/def
  :portkey.cloudformation.route53/hosted-zone-config
  (clojure.spec.alpha/keys
   :req
   []
   :opt
   [:portkey.cloudformation.route53/comment])))
(do
 (clojure.spec.alpha/def
  :portkey.cloudformation.route53/dns-name
  (portkey.cloudformation/ref-or-spec clojure.core/string?))
 (clojure.spec.alpha/def
  :portkey.cloudformation.route53/evaluate-target-health
  (portkey.cloudformation/ref-or-spec clojure.core/boolean?))
 (clojure.spec.alpha/def
  :portkey.cloudformation.route53/hosted-zone-id
  (portkey.cloudformation/ref-or-spec clojure.core/string?))
 (clojure.spec.alpha/def
  :portkey.cloudformation.route53/alias-target
  (clojure.spec.alpha/keys
   :req
   [:portkey.cloudformation.route53/dns-name
    :portkey.cloudformation.route53/hosted-zone-id]
   :opt
   [:portkey.cloudformation.route53/evaluate-target-health])))
(do
 (clojure.spec.alpha/def
  :portkey.cloudformation.route53/continent-code
  (portkey.cloudformation/ref-or-spec clojure.core/string?))
 (clojure.spec.alpha/def
  :portkey.cloudformation.route53/country-code
  (portkey.cloudformation/ref-or-spec clojure.core/string?))
 (clojure.spec.alpha/def
  :portkey.cloudformation.route53/subdivision-code
  (portkey.cloudformation/ref-or-spec clojure.core/string?))
 (clojure.spec.alpha/def
  :portkey.cloudformation.route53/geo-location
  (clojure.spec.alpha/keys
   :req
   []
   :opt
   [:portkey.cloudformation.route53/continent-code
    :portkey.cloudformation.route53/country-code
    :portkey.cloudformation.route53/subdivision-code])))
(do
 (clojure.spec.alpha/def
  :portkey.cloudformation.route53/comment
  (portkey.cloudformation/ref-or-spec clojure.core/string?))
 (clojure.spec.alpha/def
  :portkey.cloudformation.route53/type
  (portkey.cloudformation/ref-or-spec clojure.core/string?))
 (clojure.spec.alpha/def
  :portkey.cloudformation.route53/hosted-zone-name
  (portkey.cloudformation/ref-or-spec clojure.core/string?))
 (clojure.spec.alpha/def
  :portkey.cloudformation.route53/ttl
  (portkey.cloudformation/ref-or-spec clojure.core/string?))
 (clojure.spec.alpha/def
  :portkey.cloudformation.route53/set-identifier
  (portkey.cloudformation/ref-or-spec clojure.core/string?))
 (clojure.spec.alpha/def
  :portkey.cloudformation.route53/weight
  (portkey.cloudformation/ref-or-spec clojure.core/integer?))
 (clojure.spec.alpha/def
  :portkey.cloudformation.route53/health-check-id
  (portkey.cloudformation/ref-or-spec clojure.core/string?))
 (clojure.spec.alpha/def
  :portkey.cloudformation.route53/hosted-zone-id
  (portkey.cloudformation/ref-or-spec clojure.core/string?))
 (clojure.spec.alpha/def
  :portkey.cloudformation.route53/failover
  (portkey.cloudformation/ref-or-spec clojure.core/string?))
 (clojure.spec.alpha/def
  :portkey.cloudformation.route53/name
  (portkey.cloudformation/ref-or-spec clojure.core/string?))
 (clojure.spec.alpha/def
  :portkey.cloudformation.route53/region
  (portkey.cloudformation/ref-or-spec clojure.core/string?))
 (clojure.spec.alpha/def
  :portkey.cloudformation.route53/record-set
  (clojure.spec.alpha/keys
   :req
   [:portkey.cloudformation.route53/type
    :portkey.cloudformation.route53/name]
   :opt
   [:portkey.cloudformation.route53/alias-target
    :portkey.cloudformation.route53/comment
    :portkey.cloudformation.route53/hosted-zone-name
    :portkey.cloudformation.route53/geo-location
    :portkey.cloudformation.route53/ttl
    :portkey.cloudformation.route53/set-identifier
    :portkey.cloudformation.route53/weight
    :portkey.cloudformation.route53/health-check-id
    :portkey.cloudformation.route53/hosted-zone-id
    :portkey.cloudformation.route53/resource-records
    :portkey.cloudformation.route53/failover
    :portkey.cloudformation.route53/region])))
(do
 (clojure.spec.alpha/def
  :portkey.cloudformation.route53/cloud-watch-logs-log-group-arn
  (portkey.cloudformation/ref-or-spec clojure.core/string?))
 (clojure.spec.alpha/def
  :portkey.cloudformation.route53/query-logging-config
  (clojure.spec.alpha/keys
   :req
   [:portkey.cloudformation.route53/cloud-watch-logs-log-group-arn]
   :opt
   [])))
(do
 (clojure.spec.alpha/def
  :portkey.cloudformation.route53/insufficient-data-health-status
  (portkey.cloudformation/ref-or-spec clojure.core/string?))
 (clojure.spec.alpha/def
  :portkey.cloudformation.route53/search-string
  (portkey.cloudformation/ref-or-spec clojure.core/string?))
 (clojure.spec.alpha/def
  :portkey.cloudformation.route53/type
  (portkey.cloudformation/ref-or-spec clojure.core/string?))
 (clojure.spec.alpha/def
  :portkey.cloudformation.route53/failure-threshold
  (portkey.cloudformation/ref-or-spec clojure.core/integer?))
 (clojure.spec.alpha/def
  :portkey.cloudformation.route53/port
  (portkey.cloudformation/ref-or-spec clojure.core/integer?))
 (clojure.spec.alpha/def
  :portkey.cloudformation.route53/ip-address
  (portkey.cloudformation/ref-or-spec clojure.core/string?))
 (clojure.spec.alpha/def
  :portkey.cloudformation.route53/resource-path
  (portkey.cloudformation/ref-or-spec clojure.core/string?))
 (clojure.spec.alpha/def
  :portkey.cloudformation.route53/enable-sni
  (portkey.cloudformation/ref-or-spec clojure.core/boolean?))
 (clojure.spec.alpha/def
  :portkey.cloudformation.route53/measure-latency
  (portkey.cloudformation/ref-or-spec clojure.core/boolean?))
 (clojure.spec.alpha/def
  :portkey.cloudformation.route53/health-threshold
  (portkey.cloudformation/ref-or-spec clojure.core/integer?))
 (clojure.spec.alpha/def
  :portkey.cloudformation.route53/request-interval
  (portkey.cloudformation/ref-or-spec clojure.core/integer?))
 (clojure.spec.alpha/def
  :portkey.cloudformation.route53/fully-qualified-domain-name
  (portkey.cloudformation/ref-or-spec clojure.core/string?))
 (clojure.spec.alpha/def
  :portkey.cloudformation.route53/inverted
  (portkey.cloudformation/ref-or-spec clojure.core/boolean?))
 (clojure.spec.alpha/def
  :portkey.cloudformation.route53/health-check-config
  (clojure.spec.alpha/keys
   :req
   [:portkey.cloudformation.route53/type]
   :opt
   [:portkey.cloudformation.route53/insufficient-data-health-status
    :portkey.cloudformation.route53/search-string
    :portkey.cloudformation.route53/failure-threshold
    :portkey.cloudformation.route53/child-health-checks
    :portkey.cloudformation.route53/regions
    :portkey.cloudformation.route53/port
    :portkey.cloudformation.route53/ip-address
    :portkey.cloudformation.route53/resource-path
    :portkey.cloudformation.route53/alarm-identifier
    :portkey.cloudformation.route53/enable-sni
    :portkey.cloudformation.route53/measure-latency
    :portkey.cloudformation.route53/health-threshold
    :portkey.cloudformation.route53/request-interval
    :portkey.cloudformation.route53/fully-qualified-domain-name
    :portkey.cloudformation.route53/inverted])))
(do
 (clojure.spec.alpha/def
  :portkey.cloudformation.route53/name
  (portkey.cloudformation/ref-or-spec clojure.core/string?))
 (clojure.spec.alpha/def
  :portkey.cloudformation.route53/region
  (portkey.cloudformation/ref-or-spec clojure.core/string?))
 (clojure.spec.alpha/def
  :portkey.cloudformation.route53/alarm-identifier
  (clojure.spec.alpha/keys
   :req
   [:portkey.cloudformation.route53/name
    :portkey.cloudformation.route53/region]
   :opt
   [])))
(do
 (clojure.spec.alpha/def
  :portkey.cloudformation.route53/continent-code
  (portkey.cloudformation/ref-or-spec clojure.core/string?))
 (clojure.spec.alpha/def
  :portkey.cloudformation.route53/country-code
  (portkey.cloudformation/ref-or-spec clojure.core/string?))
 (clojure.spec.alpha/def
  :portkey.cloudformation.route53/subdivision-code
  (portkey.cloudformation/ref-or-spec clojure.core/string?))
 (clojure.spec.alpha/def
  :portkey.cloudformation.route53/geo-location
  (clojure.spec.alpha/keys
   :req
   []
   :opt
   [:portkey.cloudformation.route53/continent-code
    :portkey.cloudformation.route53/country-code
    :portkey.cloudformation.route53/subdivision-code])))
(do
 (clojure.spec.alpha/def
  :portkey.cloudformation.route53/vpc-id
  (portkey.cloudformation/ref-or-spec clojure.core/string?))
 (clojure.spec.alpha/def
  :portkey.cloudformation.route53/vpc-region
  (portkey.cloudformation/ref-or-spec clojure.core/string?))
 (clojure.spec.alpha/def
  :portkey.cloudformation.route53/vpc
  (clojure.spec.alpha/keys
   :req
   [:portkey.cloudformation.route53/vpc-id
    :portkey.cloudformation.route53/vpc-region]
   :opt
   [])))
