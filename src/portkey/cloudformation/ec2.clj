(ns portkey.cloudformation.ec2
  "AUTOGENERATED clojure.spec definitions"
  (:require [clojure.spec.alpha]
            [portkey.cloudformation]))

(do
 (clojure.core/defmethod
  portkey.cloudformation/resource-type-spec
  :portkey.cloudformation.ec2/launch-template
  [___15594__auto__]
  (clojure.spec.alpha/keys
   :req
   []
   :opt
   [:portkey.cloudformation.ec2/launch-template-name
    :portkey.cloudformation.ec2/launch-template-data]))
 (clojure.spec.alpha/def
  :portkey.cloudformation.ec2/launch-template-name
  clojure.core/string?))
(do
 (clojure.core/defmethod
  portkey.cloudformation/resource-type-spec
  :portkey.cloudformation.ec2/route
  [___15594__auto__]
  (clojure.spec.alpha/keys
   :req
   [:portkey.cloudformation.ec2/route-table-id]
   :opt
   [:portkey.cloudformation.ec2/instance-id
    :portkey.cloudformation.ec2/nat-gateway-id
    :portkey.cloudformation.ec2/network-interface-id
    :portkey.cloudformation.ec2/destination-ipv6-cidr-block
    :portkey.cloudformation.ec2/destination-cidr-block
    :portkey.cloudformation.ec2/vpc-peering-connection-id
    :portkey.cloudformation.ec2/gateway-id
    :portkey.cloudformation.ec2/egress-only-internet-gateway-id]))
 (clojure.spec.alpha/def
  :portkey.cloudformation.ec2/instance-id
  clojure.core/string?)
 (clojure.spec.alpha/def
  :portkey.cloudformation.ec2/nat-gateway-id
  clojure.core/string?)
 (clojure.spec.alpha/def
  :portkey.cloudformation.ec2/network-interface-id
  clojure.core/string?)
 (clojure.spec.alpha/def
  :portkey.cloudformation.ec2/destination-ipv6-cidr-block
  clojure.core/string?)
 (clojure.spec.alpha/def
  :portkey.cloudformation.ec2/destination-cidr-block
  clojure.core/string?)
 (clojure.spec.alpha/def
  :portkey.cloudformation.ec2/vpc-peering-connection-id
  clojure.core/string?)
 (clojure.spec.alpha/def
  :portkey.cloudformation.ec2/gateway-id
  clojure.core/string?)
 (clojure.spec.alpha/def
  :portkey.cloudformation.ec2/route-table-id
  clojure.core/string?)
 (clojure.spec.alpha/def
  :portkey.cloudformation.ec2/egress-only-internet-gateway-id
  clojure.core/string?))
(do
 (clojure.core/defmethod
  portkey.cloudformation/resource-type-spec
  :portkey.cloudformation.ec2/network-interface-attachment
  [___15594__auto__]
  (clojure.spec.alpha/keys
   :req
   [:portkey.cloudformation.ec2/device-index
    :portkey.cloudformation.ec2/instance-id
    :portkey.cloudformation.ec2/network-interface-id]
   :opt
   [:portkey.cloudformation.ec2/delete-on-termination]))
 (clojure.spec.alpha/def
  :portkey.cloudformation.ec2/delete-on-termination
  clojure.core/boolean?)
 (clojure.spec.alpha/def
  :portkey.cloudformation.ec2/device-index
  clojure.core/string?)
 (clojure.spec.alpha/def
  :portkey.cloudformation.ec2/instance-id
  clojure.core/string?)
 (clojure.spec.alpha/def
  :portkey.cloudformation.ec2/network-interface-id
  clojure.core/string?))
(do
 (clojure.core/defmethod
  portkey.cloudformation/resource-type-spec
  :portkey.cloudformation.ec2/dhcp-options
  [___15594__auto__]
  (clojure.spec.alpha/keys
   :req
   []
   :opt
   [:portkey.cloudformation.ec2/domain-name
    :portkey.cloudformation.ec2/domain-name-servers
    :portkey.cloudformation.ec2/netbios-name-servers
    :portkey.cloudformation.ec2/netbios-node-type
    :portkey.cloudformation.ec2/ntp-servers
    :portkey.cloudformation.ec2/tags]))
 (clojure.spec.alpha/def
  :portkey.cloudformation.ec2/domain-name
  clojure.core/string?)
 (clojure.spec.alpha/def
  :portkey.cloudformation.ec2/netbios-node-type
  clojure.core/integer?))
(do
 (clojure.core/defmethod
  portkey.cloudformation/resource-type-spec
  :portkey.cloudformation.ec2/spot-fleet
  [___15594__auto__]
  (clojure.spec.alpha/keys
   :req
   [:portkey.cloudformation.ec2/spot-fleet-request-config-data]
   :opt
   [])))
(do
 (clojure.core/defmethod
  portkey.cloudformation/resource-type-spec
  :portkey.cloudformation.ec2/network-acl-entry
  [___15594__auto__]
  (clojure.spec.alpha/keys
   :req
   [:portkey.cloudformation.ec2/rule-action
    :portkey.cloudformation.ec2/network-acl-id
    :portkey.cloudformation.ec2/rule-number
    :portkey.cloudformation.ec2/cidr-block
    :portkey.cloudformation.ec2/protocol]
   :opt
   [:portkey.cloudformation.ec2/egress
    :portkey.cloudformation.ec2/icmp
    :portkey.cloudformation.ec2/ipv6-cidr-block
    :portkey.cloudformation.ec2/port-range]))
 (clojure.spec.alpha/def
  :portkey.cloudformation.ec2/rule-action
  clojure.core/string?)
 (clojure.spec.alpha/def
  :portkey.cloudformation.ec2/network-acl-id
  clojure.core/string?)
 (clojure.spec.alpha/def
  :portkey.cloudformation.ec2/rule-number
  clojure.core/integer?)
 (clojure.spec.alpha/def
  :portkey.cloudformation.ec2/egress
  clojure.core/boolean?)
 (clojure.spec.alpha/def
  :portkey.cloudformation.ec2/cidr-block
  clojure.core/string?)
 (clojure.spec.alpha/def
  :portkey.cloudformation.ec2/ipv6-cidr-block
  clojure.core/string?)
 (clojure.spec.alpha/def
  :portkey.cloudformation.ec2/protocol
  clojure.core/integer?))
(do
 (clojure.core/defmethod
  portkey.cloudformation/resource-type-spec
  :portkey.cloudformation.ec2/subnet-route-table-association
  [___15594__auto__]
  (clojure.spec.alpha/keys
   :req
   [:portkey.cloudformation.ec2/route-table-id
    :portkey.cloudformation.ec2/subnet-id]
   :opt
   []))
 (clojure.spec.alpha/def
  :portkey.cloudformation.ec2/route-table-id
  clojure.core/string?)
 (clojure.spec.alpha/def
  :portkey.cloudformation.ec2/subnet-id
  clojure.core/string?))
(do
 (clojure.core/defmethod
  portkey.cloudformation/resource-type-spec
  :portkey.cloudformation.ec2/vpc-endpoint
  [___15594__auto__]
  (clojure.spec.alpha/keys
   :req
   [:portkey.cloudformation.ec2/service-name
    :portkey.cloudformation.ec2/vpc-id]
   :opt
   [:portkey.cloudformation.ec2/policy-document
    :portkey.cloudformation.ec2/route-table-ids]))
 (clojure.spec.alpha/def
  :portkey.cloudformation.ec2/policy-document
  clojure.core/any?)
 (clojure.spec.alpha/def
  :portkey.cloudformation.ec2/service-name
  clojure.core/string?)
 (clojure.spec.alpha/def
  :portkey.cloudformation.ec2/vpc-id
  clojure.core/string?))
(do
 (clojure.core/defmethod
  portkey.cloudformation/resource-type-spec
  :portkey.cloudformation.ec2/route-table
  [___15594__auto__]
  (clojure.spec.alpha/keys
   :req
   [:portkey.cloudformation.ec2/vpc-id]
   :opt
   [:portkey.cloudformation.ec2/tags]))
 (clojure.spec.alpha/def
  :portkey.cloudformation.ec2/vpc-id
  clojure.core/string?))
(do
 (clojure.core/defmethod
  portkey.cloudformation/resource-type-spec
  :portkey.cloudformation.ec2/subnet-network-acl-association
  [___15594__auto__]
  (clojure.spec.alpha/keys
   :req
   [:portkey.cloudformation.ec2/network-acl-id
    :portkey.cloudformation.ec2/subnet-id]
   :opt
   []))
 (clojure.spec.alpha/def
  :portkey.cloudformation.ec2/network-acl-id
  clojure.core/string?)
 (clojure.spec.alpha/def
  :portkey.cloudformation.ec2/subnet-id
  clojure.core/string?))
(do
 (clojure.core/defmethod
  portkey.cloudformation/resource-type-spec
  :portkey.cloudformation.ec2/network-acl
  [___15594__auto__]
  (clojure.spec.alpha/keys
   :req
   [:portkey.cloudformation.ec2/vpc-id]
   :opt
   [:portkey.cloudformation.ec2/tags]))
 (clojure.spec.alpha/def
  :portkey.cloudformation.ec2/vpc-id
  clojure.core/string?))
(do
 (clojure.core/defmethod
  portkey.cloudformation/resource-type-spec
  :portkey.cloudformation.ec2/vpc-peering-connection
  [___15594__auto__]
  (clojure.spec.alpha/keys
   :req
   [:portkey.cloudformation.ec2/peer-vpc-id
    :portkey.cloudformation.ec2/vpc-id]
   :opt
   [:portkey.cloudformation.ec2/peer-owner-id
    :portkey.cloudformation.ec2/peer-role-arn
    :portkey.cloudformation.ec2/tags]))
 (clojure.spec.alpha/def
  :portkey.cloudformation.ec2/peer-owner-id
  clojure.core/string?)
 (clojure.spec.alpha/def
  :portkey.cloudformation.ec2/peer-role-arn
  clojure.core/string?)
 (clojure.spec.alpha/def
  :portkey.cloudformation.ec2/peer-vpc-id
  clojure.core/string?)
 (clojure.spec.alpha/def
  :portkey.cloudformation.ec2/vpc-id
  clojure.core/string?))
(do
 (clojure.core/defmethod
  portkey.cloudformation/resource-type-spec
  :portkey.cloudformation.ec2/network-interface-permission
  [___15594__auto__]
  (clojure.spec.alpha/keys
   :req
   [:portkey.cloudformation.ec2/aws-account-id
    :portkey.cloudformation.ec2/network-interface-id
    :portkey.cloudformation.ec2/permission]
   :opt
   []))
 (clojure.spec.alpha/def
  :portkey.cloudformation.ec2/aws-account-id
  clojure.core/string?)
 (clojure.spec.alpha/def
  :portkey.cloudformation.ec2/network-interface-id
  clojure.core/string?)
 (clojure.spec.alpha/def
  :portkey.cloudformation.ec2/permission
  clojure.core/string?))
(do
 (clojure.core/defmethod
  portkey.cloudformation/resource-type-spec
  :portkey.cloudformation.ec2/vpn-gateway
  [___15594__auto__]
  (clojure.spec.alpha/keys
   :req
   [:portkey.cloudformation.ec2/type]
   :opt
   [:portkey.cloudformation.ec2/amazon-side-asn
    :portkey.cloudformation.ec2/tags]))
 (clojure.spec.alpha/def
  :portkey.cloudformation.ec2/amazon-side-asn
  clojure.core/integer?)
 (clojure.spec.alpha/def
  :portkey.cloudformation.ec2/type
  clojure.core/string?))
(do
 (clojure.core/defmethod
  portkey.cloudformation/resource-type-spec
  :portkey.cloudformation.ec2/security-group
  [___15594__auto__]
  (clojure.spec.alpha/keys
   :req
   [:portkey.cloudformation.ec2/group-description]
   :opt
   [:portkey.cloudformation.ec2/group-name
    :portkey.cloudformation.ec2/security-group-egress
    :portkey.cloudformation.ec2/security-group-ingress
    :portkey.cloudformation.ec2/tags
    :portkey.cloudformation.ec2/vpc-id]))
 (clojure.spec.alpha/def
  :portkey.cloudformation.ec2/group-description
  clojure.core/string?)
 (clojure.spec.alpha/def
  :portkey.cloudformation.ec2/group-name
  clojure.core/string?)
 (clojure.spec.alpha/def
  :portkey.cloudformation.ec2/vpc-id
  clojure.core/string?))
(do
 (clojure.core/defmethod
  portkey.cloudformation/resource-type-spec
  :portkey.cloudformation.ec2/vpcdhcp-options-association
  [___15594__auto__]
  (clojure.spec.alpha/keys
   :req
   [:portkey.cloudformation.ec2/dhcp-options-id
    :portkey.cloudformation.ec2/vpc-id]
   :opt
   []))
 (clojure.spec.alpha/def
  :portkey.cloudformation.ec2/dhcp-options-id
  clojure.core/string?)
 (clojure.spec.alpha/def
  :portkey.cloudformation.ec2/vpc-id
  clojure.core/string?))
(do
 (clojure.core/defmethod
  portkey.cloudformation/resource-type-spec
  :portkey.cloudformation.ec2/security-group-egress
  [___15594__auto__]
  (clojure.spec.alpha/keys
   :req
   [:portkey.cloudformation.ec2/ip-protocol
    :portkey.cloudformation.ec2/group-id]
   :opt
   [:portkey.cloudformation.ec2/to-port
    :portkey.cloudformation.ec2/cidr-ipv6
    :portkey.cloudformation.ec2/from-port
    :portkey.cloudformation.ec2/description
    :portkey.cloudformation.ec2/destination-prefix-list-id
    :portkey.cloudformation.ec2/destination-security-group-id
    :portkey.cloudformation.ec2/cidr-ip]))
 (clojure.spec.alpha/def
  :portkey.cloudformation.ec2/to-port
  clojure.core/integer?)
 (clojure.spec.alpha/def
  :portkey.cloudformation.ec2/ip-protocol
  clojure.core/string?)
 (clojure.spec.alpha/def
  :portkey.cloudformation.ec2/cidr-ipv6
  clojure.core/string?)
 (clojure.spec.alpha/def
  :portkey.cloudformation.ec2/group-id
  clojure.core/string?)
 (clojure.spec.alpha/def
  :portkey.cloudformation.ec2/from-port
  clojure.core/integer?)
 (clojure.spec.alpha/def
  :portkey.cloudformation.ec2/description
  clojure.core/string?)
 (clojure.spec.alpha/def
  :portkey.cloudformation.ec2/destination-prefix-list-id
  clojure.core/string?)
 (clojure.spec.alpha/def
  :portkey.cloudformation.ec2/destination-security-group-id
  clojure.core/string?)
 (clojure.spec.alpha/def
  :portkey.cloudformation.ec2/cidr-ip
  clojure.core/string?))
(do
 (clojure.core/defmethod
  portkey.cloudformation/resource-type-spec
  :portkey.cloudformation.ec2/vpc
  [___15594__auto__]
  (clojure.spec.alpha/keys
   :req
   [:portkey.cloudformation.ec2/cidr-block]
   :opt
   [:portkey.cloudformation.ec2/enable-dns-hostnames
    :portkey.cloudformation.ec2/enable-dns-support
    :portkey.cloudformation.ec2/instance-tenancy
    :portkey.cloudformation.ec2/tags]))
 (clojure.spec.alpha/def
  :portkey.cloudformation.ec2/cidr-block
  clojure.core/string?)
 (clojure.spec.alpha/def
  :portkey.cloudformation.ec2/enable-dns-hostnames
  clojure.core/boolean?)
 (clojure.spec.alpha/def
  :portkey.cloudformation.ec2/enable-dns-support
  clojure.core/boolean?)
 (clojure.spec.alpha/def
  :portkey.cloudformation.ec2/instance-tenancy
  clojure.core/string?))
(do
 (clojure.core/defmethod
  portkey.cloudformation/resource-type-spec
  :portkey.cloudformation.ec2/internet-gateway
  [___15594__auto__]
  (clojure.spec.alpha/keys
   :req
   []
   :opt
   [:portkey.cloudformation.ec2/tags])))
(do
 (clojure.core/defmethod
  portkey.cloudformation/resource-type-spec
  :portkey.cloudformation.ec2/volume-attachment
  [___15594__auto__]
  (clojure.spec.alpha/keys
   :req
   [:portkey.cloudformation.ec2/device
    :portkey.cloudformation.ec2/instance-id
    :portkey.cloudformation.ec2/volume-id]
   :opt
   []))
 (clojure.spec.alpha/def
  :portkey.cloudformation.ec2/device
  clojure.core/string?)
 (clojure.spec.alpha/def
  :portkey.cloudformation.ec2/instance-id
  clojure.core/string?)
 (clojure.spec.alpha/def
  :portkey.cloudformation.ec2/volume-id
  clojure.core/string?))
(do
 (clojure.core/defmethod
  portkey.cloudformation/resource-type-spec
  :portkey.cloudformation.ec2/customer-gateway
  [___15594__auto__]
  (clojure.spec.alpha/keys
   :req
   [:portkey.cloudformation.ec2/bgp-asn
    :portkey.cloudformation.ec2/ip-address
    :portkey.cloudformation.ec2/type]
   :opt
   [:portkey.cloudformation.ec2/tags]))
 (clojure.spec.alpha/def
  :portkey.cloudformation.ec2/bgp-asn
  clojure.core/integer?)
 (clojure.spec.alpha/def
  :portkey.cloudformation.ec2/ip-address
  clojure.core/string?)
 (clojure.spec.alpha/def
  :portkey.cloudformation.ec2/type
  clojure.core/string?))
(do
 (clojure.core/defmethod
  portkey.cloudformation/resource-type-spec
  :portkey.cloudformation.ec2/subnet
  [___15594__auto__]
  (clojure.spec.alpha/keys
   :req
   [:portkey.cloudformation.ec2/cidr-block
    :portkey.cloudformation.ec2/vpc-id]
   :opt
   [:portkey.cloudformation.ec2/assign-ipv6-address-on-creation
    :portkey.cloudformation.ec2/availability-zone
    :portkey.cloudformation.ec2/ipv6-cidr-block
    :portkey.cloudformation.ec2/map-public-ip-on-launch
    :portkey.cloudformation.ec2/tags]))
 (clojure.spec.alpha/def
  :portkey.cloudformation.ec2/assign-ipv6-address-on-creation
  clojure.core/boolean?)
 (clojure.spec.alpha/def
  :portkey.cloudformation.ec2/availability-zone
  clojure.core/string?)
 (clojure.spec.alpha/def
  :portkey.cloudformation.ec2/cidr-block
  clojure.core/string?)
 (clojure.spec.alpha/def
  :portkey.cloudformation.ec2/ipv6-cidr-block
  clojure.core/string?)
 (clojure.spec.alpha/def
  :portkey.cloudformation.ec2/map-public-ip-on-launch
  clojure.core/boolean?)
 (clojure.spec.alpha/def
  :portkey.cloudformation.ec2/vpc-id
  clojure.core/string?))
(do
 (clojure.core/defmethod
  portkey.cloudformation/resource-type-spec
  :portkey.cloudformation.ec2/security-group-ingress
  [___15594__auto__]
  (clojure.spec.alpha/keys
   :req
   [:portkey.cloudformation.ec2/ip-protocol]
   :opt
   [:portkey.cloudformation.ec2/source-security-group-owner-id
    :portkey.cloudformation.ec2/to-port
    :portkey.cloudformation.ec2/source-security-group-name
    :portkey.cloudformation.ec2/cidr-ipv6
    :portkey.cloudformation.ec2/group-name
    :portkey.cloudformation.ec2/group-id
    :portkey.cloudformation.ec2/from-port
    :portkey.cloudformation.ec2/description
    :portkey.cloudformation.ec2/source-security-group-id
    :portkey.cloudformation.ec2/cidr-ip]))
 (clojure.spec.alpha/def
  :portkey.cloudformation.ec2/source-security-group-owner-id
  clojure.core/string?)
 (clojure.spec.alpha/def
  :portkey.cloudformation.ec2/to-port
  clojure.core/integer?)
 (clojure.spec.alpha/def
  :portkey.cloudformation.ec2/source-security-group-name
  clojure.core/string?)
 (clojure.spec.alpha/def
  :portkey.cloudformation.ec2/ip-protocol
  clojure.core/string?)
 (clojure.spec.alpha/def
  :portkey.cloudformation.ec2/cidr-ipv6
  clojure.core/string?)
 (clojure.spec.alpha/def
  :portkey.cloudformation.ec2/group-name
  clojure.core/string?)
 (clojure.spec.alpha/def
  :portkey.cloudformation.ec2/group-id
  clojure.core/string?)
 (clojure.spec.alpha/def
  :portkey.cloudformation.ec2/from-port
  clojure.core/integer?)
 (clojure.spec.alpha/def
  :portkey.cloudformation.ec2/description
  clojure.core/string?)
 (clojure.spec.alpha/def
  :portkey.cloudformation.ec2/source-security-group-id
  clojure.core/string?)
 (clojure.spec.alpha/def
  :portkey.cloudformation.ec2/cidr-ip
  clojure.core/string?))
(do
 (clojure.core/defmethod
  portkey.cloudformation/resource-type-spec
  :portkey.cloudformation.ec2/placement-group
  [___15594__auto__]
  (clojure.spec.alpha/keys
   :req
   []
   :opt
   [:portkey.cloudformation.ec2/strategy]))
 (clojure.spec.alpha/def
  :portkey.cloudformation.ec2/strategy
  clojure.core/string?))
(do
 (clojure.core/defmethod
  portkey.cloudformation/resource-type-spec
  :portkey.cloudformation.ec2/egress-only-internet-gateway
  [___15594__auto__]
  (clojure.spec.alpha/keys
   :req
   [:portkey.cloudformation.ec2/vpc-id]
   :opt
   []))
 (clojure.spec.alpha/def
  :portkey.cloudformation.ec2/vpc-id
  clojure.core/string?))
(do
 (clojure.core/defmethod
  portkey.cloudformation/resource-type-spec
  :portkey.cloudformation.ec2/vpn-gateway-route-propagation
  [___15594__auto__]
  (clojure.spec.alpha/keys
   :req
   [:portkey.cloudformation.ec2/route-table-ids
    :portkey.cloudformation.ec2/vpn-gateway-id]
   :opt
   []))
 (clojure.spec.alpha/def
  :portkey.cloudformation.ec2/vpn-gateway-id
  clojure.core/string?))
(do
 (clojure.core/defmethod
  portkey.cloudformation/resource-type-spec
  :portkey.cloudformation.ec2/vpn-connection
  [___15594__auto__]
  (clojure.spec.alpha/keys
   :req
   [:portkey.cloudformation.ec2/customer-gateway-id
    :portkey.cloudformation.ec2/type
    :portkey.cloudformation.ec2/vpn-gateway-id]
   :opt
   [:portkey.cloudformation.ec2/static-routes-only
    :portkey.cloudformation.ec2/tags
    :portkey.cloudformation.ec2/vpn-tunnel-options-specifications]))
 (clojure.spec.alpha/def
  :portkey.cloudformation.ec2/customer-gateway-id
  clojure.core/string?)
 (clojure.spec.alpha/def
  :portkey.cloudformation.ec2/static-routes-only
  clojure.core/boolean?)
 (clojure.spec.alpha/def
  :portkey.cloudformation.ec2/type
  clojure.core/string?)
 (clojure.spec.alpha/def
  :portkey.cloudformation.ec2/vpn-gateway-id
  clojure.core/string?))
(do
 (clojure.core/defmethod
  portkey.cloudformation/resource-type-spec
  :portkey.cloudformation.ec2/vpn-connection-route
  [___15594__auto__]
  (clojure.spec.alpha/keys
   :req
   [:portkey.cloudformation.ec2/destination-cidr-block
    :portkey.cloudformation.ec2/vpn-connection-id]
   :opt
   []))
 (clojure.spec.alpha/def
  :portkey.cloudformation.ec2/destination-cidr-block
  clojure.core/string?)
 (clojure.spec.alpha/def
  :portkey.cloudformation.ec2/vpn-connection-id
  clojure.core/string?))
(do
 (clojure.core/defmethod
  portkey.cloudformation/resource-type-spec
  :portkey.cloudformation.ec2/instance
  [___15594__auto__]
  (clojure.spec.alpha/keys
   :req
   [:portkey.cloudformation.ec2/image-id]
   :opt
   [:portkey.cloudformation.ec2/kernel-id
    :portkey.cloudformation.ec2/credit-specification
    :portkey.cloudformation.ec2/ipv6-addresses
    :portkey.cloudformation.ec2/security-group-ids
    :portkey.cloudformation.ec2/subnet-id
    :portkey.cloudformation.ec2/tenancy
    :portkey.cloudformation.ec2/affinity
    :portkey.cloudformation.ec2/security-groups
    :portkey.cloudformation.ec2/ebs-optimized
    :portkey.cloudformation.ec2/instance-type
    :portkey.cloudformation.ec2/host-id
    :portkey.cloudformation.ec2/tags
    :portkey.cloudformation.ec2/source-dest-check
    :portkey.cloudformation.ec2/key-name
    :portkey.cloudformation.ec2/availability-zone
    :portkey.cloudformation.ec2/elastic-gpu-specifications
    :portkey.cloudformation.ec2/ssm-associations
    :portkey.cloudformation.ec2/additional-info
    :portkey.cloudformation.ec2/placement-group-name
    :portkey.cloudformation.ec2/disable-api-termination
    :portkey.cloudformation.ec2/monitoring
    :portkey.cloudformation.ec2/block-device-mappings
    :portkey.cloudformation.ec2/ramdisk-id
    :portkey.cloudformation.ec2/volumes
    :portkey.cloudformation.ec2/user-data
    :portkey.cloudformation.ec2/instance-initiated-shutdown-behavior
    :portkey.cloudformation.ec2/iam-instance-profile
    :portkey.cloudformation.ec2/private-ip-address
    :portkey.cloudformation.ec2/network-interfaces
    :portkey.cloudformation.ec2/ipv6-address-count]))
 (clojure.spec.alpha/def
  :portkey.cloudformation.ec2/kernel-id
  clojure.core/string?)
 (clojure.spec.alpha/def
  :portkey.cloudformation.ec2/image-id
  clojure.core/string?)
 (clojure.spec.alpha/def
  :portkey.cloudformation.ec2/subnet-id
  clojure.core/string?)
 (clojure.spec.alpha/def
  :portkey.cloudformation.ec2/tenancy
  clojure.core/string?)
 (clojure.spec.alpha/def
  :portkey.cloudformation.ec2/affinity
  clojure.core/string?)
 (clojure.spec.alpha/def
  :portkey.cloudformation.ec2/ebs-optimized
  clojure.core/boolean?)
 (clojure.spec.alpha/def
  :portkey.cloudformation.ec2/instance-type
  clojure.core/string?)
 (clojure.spec.alpha/def
  :portkey.cloudformation.ec2/host-id
  clojure.core/string?)
 (clojure.spec.alpha/def
  :portkey.cloudformation.ec2/source-dest-check
  clojure.core/boolean?)
 (clojure.spec.alpha/def
  :portkey.cloudformation.ec2/key-name
  clojure.core/string?)
 (clojure.spec.alpha/def
  :portkey.cloudformation.ec2/availability-zone
  clojure.core/string?)
 (clojure.spec.alpha/def
  :portkey.cloudformation.ec2/additional-info
  clojure.core/string?)
 (clojure.spec.alpha/def
  :portkey.cloudformation.ec2/placement-group-name
  clojure.core/string?)
 (clojure.spec.alpha/def
  :portkey.cloudformation.ec2/disable-api-termination
  clojure.core/boolean?)
 (clojure.spec.alpha/def
  :portkey.cloudformation.ec2/monitoring
  clojure.core/boolean?)
 (clojure.spec.alpha/def
  :portkey.cloudformation.ec2/ramdisk-id
  clojure.core/string?)
 (clojure.spec.alpha/def
  :portkey.cloudformation.ec2/user-data
  clojure.core/string?)
 (clojure.spec.alpha/def
  :portkey.cloudformation.ec2/instance-initiated-shutdown-behavior
  clojure.core/string?)
 (clojure.spec.alpha/def
  :portkey.cloudformation.ec2/iam-instance-profile
  clojure.core/string?)
 (clojure.spec.alpha/def
  :portkey.cloudformation.ec2/private-ip-address
  clojure.core/string?)
 (clojure.spec.alpha/def
  :portkey.cloudformation.ec2/ipv6-address-count
  clojure.core/integer?))
(do
 (clojure.core/defmethod
  portkey.cloudformation/resource-type-spec
  :portkey.cloudformation.ec2/network-interface
  [___15594__auto__]
  (clojure.spec.alpha/keys
   :req
   [:portkey.cloudformation.ec2/subnet-id]
   :opt
   [:portkey.cloudformation.ec2/ipv6-addresses
    :portkey.cloudformation.ec2/interface-type
    :portkey.cloudformation.ec2/group-set
    :portkey.cloudformation.ec2/tags
    :portkey.cloudformation.ec2/source-dest-check
    :portkey.cloudformation.ec2/description
    :portkey.cloudformation.ec2/private-ip-addresses
    :portkey.cloudformation.ec2/secondary-private-ip-address-count
    :portkey.cloudformation.ec2/private-ip-address
    :portkey.cloudformation.ec2/ipv6-address-count]))
 (clojure.spec.alpha/def
  :portkey.cloudformation.ec2/interface-type
  clojure.core/string?)
 (clojure.spec.alpha/def
  :portkey.cloudformation.ec2/subnet-id
  clojure.core/string?)
 (clojure.spec.alpha/def
  :portkey.cloudformation.ec2/source-dest-check
  clojure.core/boolean?)
 (clojure.spec.alpha/def
  :portkey.cloudformation.ec2/description
  clojure.core/string?)
 (clojure.spec.alpha/def
  :portkey.cloudformation.ec2/secondary-private-ip-address-count
  clojure.core/integer?)
 (clojure.spec.alpha/def
  :portkey.cloudformation.ec2/private-ip-address
  clojure.core/string?)
 (clojure.spec.alpha/def
  :portkey.cloudformation.ec2/ipv6-address-count
  clojure.core/integer?))
(do
 (clojure.core/defmethod
  portkey.cloudformation/resource-type-spec
  :portkey.cloudformation.ec2/vpc-cidr-block
  [___15594__auto__]
  (clojure.spec.alpha/keys
   :req
   [:portkey.cloudformation.ec2/vpc-id]
   :opt
   [:portkey.cloudformation.ec2/amazon-provided-ipv6-cidr-block
    :portkey.cloudformation.ec2/cidr-block]))
 (clojure.spec.alpha/def
  :portkey.cloudformation.ec2/amazon-provided-ipv6-cidr-block
  clojure.core/boolean?)
 (clojure.spec.alpha/def
  :portkey.cloudformation.ec2/cidr-block
  clojure.core/string?)
 (clojure.spec.alpha/def
  :portkey.cloudformation.ec2/vpc-id
  clojure.core/string?))
(do
 (clojure.core/defmethod
  portkey.cloudformation/resource-type-spec
  :portkey.cloudformation.ec2/trunk-interface-association
  [___15594__auto__]
  (clojure.spec.alpha/keys
   :req
   [:portkey.cloudformation.ec2/branch-interface-id
    :portkey.cloudformation.ec2/trunk-interface-id]
   :opt
   [:portkey.cloudformation.ec2/gre-key
    :portkey.cloudformation.ec2/vlan-id]))
 (clojure.spec.alpha/def
  :portkey.cloudformation.ec2/branch-interface-id
  clojure.core/string?)
 (clojure.spec.alpha/def
  :portkey.cloudformation.ec2/gre-key
  clojure.core/integer?)
 (clojure.spec.alpha/def
  :portkey.cloudformation.ec2/trunk-interface-id
  clojure.core/string?)
 (clojure.spec.alpha/def
  :portkey.cloudformation.ec2/vlan-id
  clojure.core/integer?))
(do
 (clojure.core/defmethod
  portkey.cloudformation/resource-type-spec
  :portkey.cloudformation.ec2/subnet-cidr-block
  [___15594__auto__]
  (clojure.spec.alpha/keys
   :req
   [:portkey.cloudformation.ec2/ipv6-cidr-block
    :portkey.cloudformation.ec2/subnet-id]
   :opt
   []))
 (clojure.spec.alpha/def
  :portkey.cloudformation.ec2/ipv6-cidr-block
  clojure.core/string?)
 (clojure.spec.alpha/def
  :portkey.cloudformation.ec2/subnet-id
  clojure.core/string?))
(do
 (clojure.core/defmethod
  portkey.cloudformation/resource-type-spec
  :portkey.cloudformation.ec2/host
  [___15594__auto__]
  (clojure.spec.alpha/keys
   :req
   [:portkey.cloudformation.ec2/availability-zone
    :portkey.cloudformation.ec2/instance-type]
   :opt
   [:portkey.cloudformation.ec2/auto-placement]))
 (clojure.spec.alpha/def
  :portkey.cloudformation.ec2/auto-placement
  clojure.core/string?)
 (clojure.spec.alpha/def
  :portkey.cloudformation.ec2/availability-zone
  clojure.core/string?)
 (clojure.spec.alpha/def
  :portkey.cloudformation.ec2/instance-type
  clojure.core/string?))
(do
 (clojure.core/defmethod
  portkey.cloudformation/resource-type-spec
  :portkey.cloudformation.ec2/vpc-gateway-attachment
  [___15594__auto__]
  (clojure.spec.alpha/keys
   :req
   [:portkey.cloudformation.ec2/vpc-id]
   :opt
   [:portkey.cloudformation.ec2/internet-gateway-id
    :portkey.cloudformation.ec2/vpn-gateway-id]))
 (clojure.spec.alpha/def
  :portkey.cloudformation.ec2/internet-gateway-id
  clojure.core/string?)
 (clojure.spec.alpha/def
  :portkey.cloudformation.ec2/vpc-id
  clojure.core/string?)
 (clojure.spec.alpha/def
  :portkey.cloudformation.ec2/vpn-gateway-id
  clojure.core/string?))
(do
 (clojure.core/defmethod
  portkey.cloudformation/resource-type-spec
  :portkey.cloudformation.ec2/volume
  [___15594__auto__]
  (clojure.spec.alpha/keys
   :req
   [:portkey.cloudformation.ec2/availability-zone]
   :opt
   [:portkey.cloudformation.ec2/encrypted
    :portkey.cloudformation.ec2/tags
    :portkey.cloudformation.ec2/kms-key-id
    :portkey.cloudformation.ec2/size
    :portkey.cloudformation.ec2/iops
    :portkey.cloudformation.ec2/auto-enable-io
    :portkey.cloudformation.ec2/volume-type
    :portkey.cloudformation.ec2/snapshot-id]))
 (clojure.spec.alpha/def
  :portkey.cloudformation.ec2/encrypted
  clojure.core/boolean?)
 (clojure.spec.alpha/def
  :portkey.cloudformation.ec2/availability-zone
  clojure.core/string?)
 (clojure.spec.alpha/def
  :portkey.cloudformation.ec2/kms-key-id
  clojure.core/string?)
 (clojure.spec.alpha/def
  :portkey.cloudformation.ec2/size
  clojure.core/integer?)
 (clojure.spec.alpha/def
  :portkey.cloudformation.ec2/iops
  clojure.core/integer?)
 (clojure.spec.alpha/def
  :portkey.cloudformation.ec2/auto-enable-io
  clojure.core/boolean?)
 (clojure.spec.alpha/def
  :portkey.cloudformation.ec2/volume-type
  clojure.core/string?)
 (clojure.spec.alpha/def
  :portkey.cloudformation.ec2/snapshot-id
  clojure.core/string?))
(do
 (clojure.core/defmethod
  portkey.cloudformation/resource-type-spec
  :portkey.cloudformation.ec2/flow-log
  [___15594__auto__]
  (clojure.spec.alpha/keys
   :req
   [:portkey.cloudformation.ec2/deliver-logs-permission-arn
    :portkey.cloudformation.ec2/log-group-name
    :portkey.cloudformation.ec2/resource-id
    :portkey.cloudformation.ec2/resource-type
    :portkey.cloudformation.ec2/traffic-type]
   :opt
   []))
 (clojure.spec.alpha/def
  :portkey.cloudformation.ec2/deliver-logs-permission-arn
  clojure.core/string?)
 (clojure.spec.alpha/def
  :portkey.cloudformation.ec2/log-group-name
  clojure.core/string?)
 (clojure.spec.alpha/def
  :portkey.cloudformation.ec2/resource-id
  clojure.core/string?)
 (clojure.spec.alpha/def
  :portkey.cloudformation.ec2/resource-type
  clojure.core/string?)
 (clojure.spec.alpha/def
  :portkey.cloudformation.ec2/traffic-type
  clojure.core/string?))
(do
 (clojure.core/defmethod
  portkey.cloudformation/resource-type-spec
  :portkey.cloudformation.ec2/eip
  [___15594__auto__]
  (clojure.spec.alpha/keys
   :req
   []
   :opt
   [:portkey.cloudformation.ec2/domain
    :portkey.cloudformation.ec2/instance-id]))
 (clojure.spec.alpha/def
  :portkey.cloudformation.ec2/domain
  clojure.core/string?)
 (clojure.spec.alpha/def
  :portkey.cloudformation.ec2/instance-id
  clojure.core/string?))
(do
 (clojure.core/defmethod
  portkey.cloudformation/resource-type-spec
  :portkey.cloudformation.ec2/nat-gateway
  [___15594__auto__]
  (clojure.spec.alpha/keys
   :req
   [:portkey.cloudformation.ec2/allocation-id
    :portkey.cloudformation.ec2/subnet-id]
   :opt
   [:portkey.cloudformation.ec2/tags]))
 (clojure.spec.alpha/def
  :portkey.cloudformation.ec2/allocation-id
  clojure.core/string?)
 (clojure.spec.alpha/def
  :portkey.cloudformation.ec2/subnet-id
  clojure.core/string?))
(do
 (clojure.core/defmethod
  portkey.cloudformation/resource-type-spec
  :portkey.cloudformation.ec2/eip-association
  [___15594__auto__]
  (clojure.spec.alpha/keys
   :req
   []
   :opt
   [:portkey.cloudformation.ec2/allocation-id
    :portkey.cloudformation.ec2/eip
    :portkey.cloudformation.ec2/instance-id
    :portkey.cloudformation.ec2/network-interface-id
    :portkey.cloudformation.ec2/private-ip-address]))
 (clojure.spec.alpha/def
  :portkey.cloudformation.ec2/allocation-id
  clojure.core/string?)
 (clojure.spec.alpha/def
  :portkey.cloudformation.ec2/eip
  clojure.core/string?)
 (clojure.spec.alpha/def
  :portkey.cloudformation.ec2/instance-id
  clojure.core/string?)
 (clojure.spec.alpha/def
  :portkey.cloudformation.ec2/network-interface-id
  clojure.core/string?)
 (clojure.spec.alpha/def
  :portkey.cloudformation.ec2/private-ip-address
  clojure.core/string?))
(do
 (clojure.spec.alpha/def
  :portkey.cloudformation.ec2/resource-type
  clojure.core/string?)
 (clojure.spec.alpha/def
  :portkey.cloudformation.ec2/spot-fleet-tag-specification
  (clojure.spec.alpha/keys
   :req
   []
   :opt
   [:portkey.cloudformation.ec2/resource-type])))
(do
 (clojure.spec.alpha/def
  :portkey.cloudformation.ec2/market-type
  clojure.core/string?)
 (clojure.spec.alpha/def
  :portkey.cloudformation.ec2/instance-market-options
  (clojure.spec.alpha/keys
   :req
   []
   :opt
   [:portkey.cloudformation.ec2/spot-options
    :portkey.cloudformation.ec2/market-type])))
(do
 (clojure.spec.alpha/def
  :portkey.cloudformation.ec2/type
  clojure.core/string?)
 (clojure.spec.alpha/def
  :portkey.cloudformation.ec2/elastic-gpu-specification
  (clojure.spec.alpha/keys
   :req
   []
   :opt
   [:portkey.cloudformation.ec2/type])))
(do
 (clojure.spec.alpha/def
  :portkey.cloudformation.ec2/arn
  clojure.core/string?)
 (clojure.spec.alpha/def
  :portkey.cloudformation.ec2/name
  clojure.core/string?)
 (clojure.spec.alpha/def
  :portkey.cloudformation.ec2/iam-instance-profile
  (clojure.spec.alpha/keys
   :req
   []
   :opt
   [:portkey.cloudformation.ec2/arn :portkey.cloudformation.ec2/name])))
(do
 (clojure.spec.alpha/def
  :portkey.cloudformation.ec2/delete-on-termination
  clojure.core/boolean?)
 (clojure.spec.alpha/def
  :portkey.cloudformation.ec2/encrypted
  clojure.core/boolean?)
 (clojure.spec.alpha/def
  :portkey.cloudformation.ec2/iops
  clojure.core/integer?)
 (clojure.spec.alpha/def
  :portkey.cloudformation.ec2/snapshot-id
  clojure.core/string?)
 (clojure.spec.alpha/def
  :portkey.cloudformation.ec2/volume-size
  clojure.core/integer?)
 (clojure.spec.alpha/def
  :portkey.cloudformation.ec2/volume-type
  clojure.core/string?)
 (clojure.spec.alpha/def
  :portkey.cloudformation.ec2/ebs
  (clojure.spec.alpha/keys
   :req
   []
   :opt
   [:portkey.cloudformation.ec2/delete-on-termination
    :portkey.cloudformation.ec2/encrypted
    :portkey.cloudformation.ec2/iops
    :portkey.cloudformation.ec2/snapshot-id
    :portkey.cloudformation.ec2/volume-size
    :portkey.cloudformation.ec2/volume-type])))
(do
 (clojure.spec.alpha/def
  :portkey.cloudformation.ec2/primary
  clojure.core/boolean?)
 (clojure.spec.alpha/def
  :portkey.cloudformation.ec2/private-ip-address
  clojure.core/string?)
 (clojure.spec.alpha/def
  :portkey.cloudformation.ec2/private-ip-address-specification
  (clojure.spec.alpha/keys
   :req
   [:portkey.cloudformation.ec2/primary
    :portkey.cloudformation.ec2/private-ip-address]
   :opt
   [])))
(do
 (clojure.spec.alpha/def
  :portkey.cloudformation.ec2/ipv6-address
  clojure.core/string?)
 (clojure.spec.alpha/def
  :portkey.cloudformation.ec2/instance-ipv6-address
  (clojure.spec.alpha/keys
   :req
   [:portkey.cloudformation.ec2/ipv6-address]
   :opt
   [])))
(do
 (clojure.spec.alpha/def
  :portkey.cloudformation.ec2/device
  clojure.core/string?)
 (clojure.spec.alpha/def
  :portkey.cloudformation.ec2/volume-id
  clojure.core/string?)
 (clojure.spec.alpha/def
  :portkey.cloudformation.ec2/volume
  (clojure.spec.alpha/keys
   :req
   [:portkey.cloudformation.ec2/device
    :portkey.cloudformation.ec2/volume-id]
   :opt
   [])))
(do
 (clojure.spec.alpha/def
  :portkey.cloudformation.ec2/code
  clojure.core/integer?)
 (clojure.spec.alpha/def
  :portkey.cloudformation.ec2/type
  clojure.core/integer?)
 (clojure.spec.alpha/def
  :portkey.cloudformation.ec2/icmp
  (clojure.spec.alpha/keys
   :req
   []
   :opt
   [:portkey.cloudformation.ec2/code
    :portkey.cloudformation.ec2/type])))
(do
 (clojure.spec.alpha/def
  :portkey.cloudformation.ec2/availability-zone
  clojure.core/string?)
 (clojure.spec.alpha/def
  :portkey.cloudformation.ec2/instance-type
  clojure.core/string?)
 (clojure.spec.alpha/def
  :portkey.cloudformation.ec2/spot-price
  clojure.core/string?)
 (clojure.spec.alpha/def
  :portkey.cloudformation.ec2/subnet-id
  clojure.core/string?)
 (clojure.spec.alpha/def
  :portkey.cloudformation.ec2/weighted-capacity
  clojure.core/double?)
 (clojure.spec.alpha/def
  :portkey.cloudformation.ec2/launch-template-overrides
  (clojure.spec.alpha/keys
   :req
   []
   :opt
   [:portkey.cloudformation.ec2/availability-zone
    :portkey.cloudformation.ec2/instance-type
    :portkey.cloudformation.ec2/spot-price
    :portkey.cloudformation.ec2/subnet-id
    :portkey.cloudformation.ec2/weighted-capacity])))
(do
 (clojure.spec.alpha/def
  :portkey.cloudformation.ec2/enabled
  clojure.core/boolean?)
 (clojure.spec.alpha/def
  :portkey.cloudformation.ec2/spot-fleet-monitoring
  (clojure.spec.alpha/keys
   :req
   []
   :opt
   [:portkey.cloudformation.ec2/enabled])))
(do
 (clojure.spec.alpha/def
  :portkey.cloudformation.ec2/key
  clojure.core/string?)
 (clojure.spec.alpha/def
  :portkey.cloudformation.ec2/association-parameter
  (clojure.spec.alpha/keys
   :req
   [:portkey.cloudformation.ec2/key :portkey.cloudformation.ec2/value]
   :opt
   [])))
(do
 (clojure.spec.alpha/def
  :portkey.cloudformation.ec2/launch-template-id
  clojure.core/string?)
 (clojure.spec.alpha/def
  :portkey.cloudformation.ec2/launch-template-name
  clojure.core/string?)
 (clojure.spec.alpha/def
  :portkey.cloudformation.ec2/version
  clojure.core/string?)
 (clojure.spec.alpha/def
  :portkey.cloudformation.ec2/fleet-launch-template-specification
  (clojure.spec.alpha/keys
   :req
   []
   :opt
   [:portkey.cloudformation.ec2/launch-template-id
    :portkey.cloudformation.ec2/launch-template-name
    :portkey.cloudformation.ec2/version])))
(do
 (clojure.spec.alpha/def
  :portkey.cloudformation.ec2/from
  clojure.core/integer?)
 (clojure.spec.alpha/def
  :portkey.cloudformation.ec2/to
  clojure.core/integer?)
 (clojure.spec.alpha/def
  :portkey.cloudformation.ec2/port-range
  (clojure.spec.alpha/keys
   :req
   []
   :opt
   [:portkey.cloudformation.ec2/from :portkey.cloudformation.ec2/to])))
(do
 (clojure.spec.alpha/def
  :portkey.cloudformation.ec2/kernel-id
  clojure.core/string?)
 (clojure.spec.alpha/def
  :portkey.cloudformation.ec2/image-id
  clojure.core/string?)
 (clojure.spec.alpha/def
  :portkey.cloudformation.ec2/subnet-id
  clojure.core/string?)
 (clojure.spec.alpha/def
  :portkey.cloudformation.ec2/ebs-optimized
  clojure.core/boolean?)
 (clojure.spec.alpha/def
  :portkey.cloudformation.ec2/instance-type
  clojure.core/string?)
 (clojure.spec.alpha/def
  :portkey.cloudformation.ec2/key-name
  clojure.core/string?)
 (clojure.spec.alpha/def
  :portkey.cloudformation.ec2/spot-price
  clojure.core/string?)
 (clojure.spec.alpha/def
  :portkey.cloudformation.ec2/weighted-capacity
  clojure.core/double?)
 (clojure.spec.alpha/def
  :portkey.cloudformation.ec2/ramdisk-id
  clojure.core/string?)
 (clojure.spec.alpha/def
  :portkey.cloudformation.ec2/user-data
  clojure.core/string?)
 (clojure.spec.alpha/def
  :portkey.cloudformation.ec2/spot-fleet-launch-specification
  (clojure.spec.alpha/keys
   :req
   [:portkey.cloudformation.ec2/image-id
    :portkey.cloudformation.ec2/instance-type]
   :opt
   [:portkey.cloudformation.ec2/tag-specifications
    :portkey.cloudformation.ec2/kernel-id
    :portkey.cloudformation.ec2/placement
    :portkey.cloudformation.ec2/subnet-id
    :portkey.cloudformation.ec2/security-groups
    :portkey.cloudformation.ec2/ebs-optimized
    :portkey.cloudformation.ec2/key-name
    :portkey.cloudformation.ec2/spot-price
    :portkey.cloudformation.ec2/monitoring
    :portkey.cloudformation.ec2/weighted-capacity
    :portkey.cloudformation.ec2/block-device-mappings
    :portkey.cloudformation.ec2/ramdisk-id
    :portkey.cloudformation.ec2/user-data
    :portkey.cloudformation.ec2/iam-instance-profile
    :portkey.cloudformation.ec2/network-interfaces])))
(do
 (clojure.spec.alpha/def
  :portkey.cloudformation.ec2/cpu-credits
  clojure.core/string?)
 (clojure.spec.alpha/def
  :portkey.cloudformation.ec2/credit-specification
  (clojure.spec.alpha/keys
   :req
   []
   :opt
   [:portkey.cloudformation.ec2/cpu-credits])))
(do
 (clojure.spec.alpha/def
  :portkey.cloudformation.ec2/cidr-ip
  clojure.core/string?)
 (clojure.spec.alpha/def
  :portkey.cloudformation.ec2/cidr-ipv6
  clojure.core/string?)
 (clojure.spec.alpha/def
  :portkey.cloudformation.ec2/description
  clojure.core/string?)
 (clojure.spec.alpha/def
  :portkey.cloudformation.ec2/destination-prefix-list-id
  clojure.core/string?)
 (clojure.spec.alpha/def
  :portkey.cloudformation.ec2/destination-security-group-id
  clojure.core/string?)
 (clojure.spec.alpha/def
  :portkey.cloudformation.ec2/from-port
  clojure.core/integer?)
 (clojure.spec.alpha/def
  :portkey.cloudformation.ec2/ip-protocol
  clojure.core/string?)
 (clojure.spec.alpha/def
  :portkey.cloudformation.ec2/to-port
  clojure.core/integer?)
 (clojure.spec.alpha/def
  :portkey.cloudformation.ec2/egress
  (clojure.spec.alpha/keys
   :req
   [:portkey.cloudformation.ec2/ip-protocol]
   :opt
   [:portkey.cloudformation.ec2/cidr-ip
    :portkey.cloudformation.ec2/cidr-ipv6
    :portkey.cloudformation.ec2/description
    :portkey.cloudformation.ec2/destination-prefix-list-id
    :portkey.cloudformation.ec2/destination-security-group-id
    :portkey.cloudformation.ec2/from-port
    :portkey.cloudformation.ec2/to-port])))
(do
 (clojure.spec.alpha/def
  :portkey.cloudformation.ec2/enabled
  clojure.core/boolean?)
 (clojure.spec.alpha/def
  :portkey.cloudformation.ec2/monitoring
  (clojure.spec.alpha/keys
   :req
   []
   :opt
   [:portkey.cloudformation.ec2/enabled])))
(do
 (clojure.spec.alpha/def
  :portkey.cloudformation.ec2/primary
  clojure.core/boolean?)
 (clojure.spec.alpha/def
  :portkey.cloudformation.ec2/private-ip-address
  clojure.core/string?)
 (clojure.spec.alpha/def
  :portkey.cloudformation.ec2/private-ip-address-specification
  (clojure.spec.alpha/keys
   :req
   [:portkey.cloudformation.ec2/private-ip-address]
   :opt
   [:portkey.cloudformation.ec2/primary])))
(do
 (clojure.spec.alpha/def
  :portkey.cloudformation.ec2/document-name
  clojure.core/string?)
 (clojure.spec.alpha/def
  :portkey.cloudformation.ec2/ssm-association
  (clojure.spec.alpha/keys
   :req
   [:portkey.cloudformation.ec2/document-name]
   :opt
   [:portkey.cloudformation.ec2/association-parameters])))
(do
 (clojure.spec.alpha/def
  :portkey.cloudformation.ec2/launch-template-config
  (clojure.spec.alpha/keys
   :req
   []
   :opt
   [:portkey.cloudformation.ec2/launch-template-specification
    :portkey.cloudformation.ec2/overrides])))
(do
 (clojure.spec.alpha/def
  :portkey.cloudformation.ec2/device-name
  clojure.core/string?)
 (clojure.spec.alpha/def
  :portkey.cloudformation.ec2/virtual-name
  clojure.core/string?)
 (clojure.spec.alpha/def
  :portkey.cloudformation.ec2/block-device-mapping
  (clojure.spec.alpha/keys
   :req
   [:portkey.cloudformation.ec2/device-name]
   :opt
   [:portkey.cloudformation.ec2/ebs
    :portkey.cloudformation.ec2/no-device
    :portkey.cloudformation.ec2/virtual-name])))
(do
 (clojure.spec.alpha/def
  :portkey.cloudformation.ec2/availability-zone
  clojure.core/string?)
 (clojure.spec.alpha/def
  :portkey.cloudformation.ec2/group-name
  clojure.core/string?)
 (clojure.spec.alpha/def
  :portkey.cloudformation.ec2/spot-placement
  (clojure.spec.alpha/keys
   :req
   []
   :opt
   [:portkey.cloudformation.ec2/availability-zone
    :portkey.cloudformation.ec2/group-name])))
(do
 (clojure.spec.alpha/def
  :portkey.cloudformation.ec2/associate-public-ip-address
  clojure.core/boolean?)
 (clojure.spec.alpha/def
  :portkey.cloudformation.ec2/subnet-id
  clojure.core/string?)
 (clojure.spec.alpha/def
  :portkey.cloudformation.ec2/network-interface-id
  clojure.core/string?)
 (clojure.spec.alpha/def
  :portkey.cloudformation.ec2/device-index
  clojure.core/integer?)
 (clojure.spec.alpha/def
  :portkey.cloudformation.ec2/description
  clojure.core/string?)
 (clojure.spec.alpha/def
  :portkey.cloudformation.ec2/delete-on-termination
  clojure.core/boolean?)
 (clojure.spec.alpha/def
  :portkey.cloudformation.ec2/secondary-private-ip-address-count
  clojure.core/integer?)
 (clojure.spec.alpha/def
  :portkey.cloudformation.ec2/private-ip-address
  clojure.core/string?)
 (clojure.spec.alpha/def
  :portkey.cloudformation.ec2/ipv6-address-count
  clojure.core/integer?)
 (clojure.spec.alpha/def
  :portkey.cloudformation.ec2/network-interface
  (clojure.spec.alpha/keys
   :req
   []
   :opt
   [:portkey.cloudformation.ec2/associate-public-ip-address
    :portkey.cloudformation.ec2/ipv6-addresses
    :portkey.cloudformation.ec2/subnet-id
    :portkey.cloudformation.ec2/network-interface-id
    :portkey.cloudformation.ec2/device-index
    :portkey.cloudformation.ec2/description
    :portkey.cloudformation.ec2/groups
    :portkey.cloudformation.ec2/delete-on-termination
    :portkey.cloudformation.ec2/private-ip-addresses
    :portkey.cloudformation.ec2/secondary-private-ip-address-count
    :portkey.cloudformation.ec2/private-ip-address
    :portkey.cloudformation.ec2/ipv6-address-count])))
(do
 (clojure.spec.alpha/def
  :portkey.cloudformation.ec2/group-id
  clojure.core/string?)
 (clojure.spec.alpha/def
  :portkey.cloudformation.ec2/group-identifier
  (clojure.spec.alpha/keys
   :req
   [:portkey.cloudformation.ec2/group-id]
   :opt
   [])))
(do
 (clojure.spec.alpha/def
  :portkey.cloudformation.ec2/type
  clojure.core/string?)
 (clojure.spec.alpha/def
  :portkey.cloudformation.ec2/elastic-gpu-specification
  (clojure.spec.alpha/keys
   :req
   [:portkey.cloudformation.ec2/type]
   :opt
   [])))
(do
 (clojure.spec.alpha/def
  :portkey.cloudformation.ec2/ipv6-address
  clojure.core/string?)
 (clojure.spec.alpha/def
  :portkey.cloudformation.ec2/instance-ipv6-address
  (clojure.spec.alpha/keys
   :req
   [:portkey.cloudformation.ec2/ipv6-address]
   :opt
   [])))
(do
 (clojure.spec.alpha/def
  :portkey.cloudformation.ec2/kernel-id
  clojure.core/string?)
 (clojure.spec.alpha/def
  :portkey.cloudformation.ec2/image-id
  clojure.core/string?)
 (clojure.spec.alpha/def
  :portkey.cloudformation.ec2/ebs-optimized
  clojure.core/boolean?)
 (clojure.spec.alpha/def
  :portkey.cloudformation.ec2/instance-type
  clojure.core/string?)
 (clojure.spec.alpha/def
  :portkey.cloudformation.ec2/key-name
  clojure.core/string?)
 (clojure.spec.alpha/def
  :portkey.cloudformation.ec2/ram-disk-id
  clojure.core/string?)
 (clojure.spec.alpha/def
  :portkey.cloudformation.ec2/disable-api-termination
  clojure.core/boolean?)
 (clojure.spec.alpha/def
  :portkey.cloudformation.ec2/user-data
  clojure.core/string?)
 (clojure.spec.alpha/def
  :portkey.cloudformation.ec2/instance-initiated-shutdown-behavior
  clojure.core/string?)
 (clojure.spec.alpha/def
  :portkey.cloudformation.ec2/launch-template-data
  (clojure.spec.alpha/keys
   :req
   []
   :opt
   [:portkey.cloudformation.ec2/tag-specifications
    :portkey.cloudformation.ec2/kernel-id
    :portkey.cloudformation.ec2/credit-specification
    :portkey.cloudformation.ec2/security-group-ids
    :portkey.cloudformation.ec2/image-id
    :portkey.cloudformation.ec2/placement
    :portkey.cloudformation.ec2/security-groups
    :portkey.cloudformation.ec2/ebs-optimized
    :portkey.cloudformation.ec2/instance-market-options
    :portkey.cloudformation.ec2/instance-type
    :portkey.cloudformation.ec2/key-name
    :portkey.cloudformation.ec2/elastic-gpu-specifications
    :portkey.cloudformation.ec2/ram-disk-id
    :portkey.cloudformation.ec2/disable-api-termination
    :portkey.cloudformation.ec2/monitoring
    :portkey.cloudformation.ec2/block-device-mappings
    :portkey.cloudformation.ec2/user-data
    :portkey.cloudformation.ec2/instance-initiated-shutdown-behavior
    :portkey.cloudformation.ec2/iam-instance-profile
    :portkey.cloudformation.ec2/network-interfaces])))
(do
 (clojure.spec.alpha/def
  :portkey.cloudformation.ec2/delete-on-termination
  clojure.core/boolean?)
 (clojure.spec.alpha/def
  :portkey.cloudformation.ec2/encrypted
  clojure.core/boolean?)
 (clojure.spec.alpha/def
  :portkey.cloudformation.ec2/iops
  clojure.core/integer?)
 (clojure.spec.alpha/def
  :portkey.cloudformation.ec2/snapshot-id
  clojure.core/string?)
 (clojure.spec.alpha/def
  :portkey.cloudformation.ec2/volume-size
  clojure.core/integer?)
 (clojure.spec.alpha/def
  :portkey.cloudformation.ec2/volume-type
  clojure.core/string?)
 (clojure.spec.alpha/def
  :portkey.cloudformation.ec2/ebs-block-device
  (clojure.spec.alpha/keys
   :req
   []
   :opt
   [:portkey.cloudformation.ec2/delete-on-termination
    :portkey.cloudformation.ec2/encrypted
    :portkey.cloudformation.ec2/iops
    :portkey.cloudformation.ec2/snapshot-id
    :portkey.cloudformation.ec2/volume-size
    :portkey.cloudformation.ec2/volume-type])))
(do
 (clojure.spec.alpha/def
  :portkey.cloudformation.ec2/ipv6-address
  clojure.core/string?)
 (clojure.spec.alpha/def
  :portkey.cloudformation.ec2/instance-ipv6-address
  (clojure.spec.alpha/keys
   :req
   [:portkey.cloudformation.ec2/ipv6-address]
   :opt
   [])))
(do
 (clojure.spec.alpha/def
  :portkey.cloudformation.ec2/ipv6-address
  clojure.core/string?)
 (clojure.spec.alpha/def
  :portkey.cloudformation.ec2/ipv6-add
  (clojure.spec.alpha/keys
   :req
   []
   :opt
   [:portkey.cloudformation.ec2/ipv6-address])))
(do
 (clojure.spec.alpha/def
  :portkey.cloudformation.ec2/source-security-group-owner-id
  clojure.core/string?)
 (clojure.spec.alpha/def
  :portkey.cloudformation.ec2/to-port
  clojure.core/integer?)
 (clojure.spec.alpha/def
  :portkey.cloudformation.ec2/source-security-group-name
  clojure.core/string?)
 (clojure.spec.alpha/def
  :portkey.cloudformation.ec2/ip-protocol
  clojure.core/string?)
 (clojure.spec.alpha/def
  :portkey.cloudformation.ec2/cidr-ipv6
  clojure.core/string?)
 (clojure.spec.alpha/def
  :portkey.cloudformation.ec2/from-port
  clojure.core/integer?)
 (clojure.spec.alpha/def
  :portkey.cloudformation.ec2/description
  clojure.core/string?)
 (clojure.spec.alpha/def
  :portkey.cloudformation.ec2/source-security-group-id
  clojure.core/string?)
 (clojure.spec.alpha/def
  :portkey.cloudformation.ec2/cidr-ip
  clojure.core/string?)
 (clojure.spec.alpha/def
  :portkey.cloudformation.ec2/ingress
  (clojure.spec.alpha/keys
   :req
   [:portkey.cloudformation.ec2/ip-protocol]
   :opt
   [:portkey.cloudformation.ec2/source-security-group-owner-id
    :portkey.cloudformation.ec2/to-port
    :portkey.cloudformation.ec2/source-security-group-name
    :portkey.cloudformation.ec2/cidr-ipv6
    :portkey.cloudformation.ec2/from-port
    :portkey.cloudformation.ec2/description
    :portkey.cloudformation.ec2/source-security-group-id
    :portkey.cloudformation.ec2/cidr-ip])))
(do
 (clojure.spec.alpha/def
  :portkey.cloudformation.ec2/associate-public-ip-address
  clojure.core/boolean?)
 (clojure.spec.alpha/def
  :portkey.cloudformation.ec2/subnet-id
  clojure.core/string?)
 (clojure.spec.alpha/def
  :portkey.cloudformation.ec2/network-interface-id
  clojure.core/string?)
 (clojure.spec.alpha/def
  :portkey.cloudformation.ec2/device-index
  clojure.core/string?)
 (clojure.spec.alpha/def
  :portkey.cloudformation.ec2/description
  clojure.core/string?)
 (clojure.spec.alpha/def
  :portkey.cloudformation.ec2/delete-on-termination
  clojure.core/boolean?)
 (clojure.spec.alpha/def
  :portkey.cloudformation.ec2/secondary-private-ip-address-count
  clojure.core/integer?)
 (clojure.spec.alpha/def
  :portkey.cloudformation.ec2/private-ip-address
  clojure.core/string?)
 (clojure.spec.alpha/def
  :portkey.cloudformation.ec2/ipv6-address-count
  clojure.core/integer?)
 (clojure.spec.alpha/def
  :portkey.cloudformation.ec2/network-interface
  (clojure.spec.alpha/keys
   :req
   [:portkey.cloudformation.ec2/device-index]
   :opt
   [:portkey.cloudformation.ec2/associate-public-ip-address
    :portkey.cloudformation.ec2/ipv6-addresses
    :portkey.cloudformation.ec2/subnet-id
    :portkey.cloudformation.ec2/group-set
    :portkey.cloudformation.ec2/network-interface-id
    :portkey.cloudformation.ec2/description
    :portkey.cloudformation.ec2/delete-on-termination
    :portkey.cloudformation.ec2/private-ip-addresses
    :portkey.cloudformation.ec2/secondary-private-ip-address-count
    :portkey.cloudformation.ec2/private-ip-address
    :portkey.cloudformation.ec2/ipv6-address-count])))
(do
 (clojure.spec.alpha/def
  :portkey.cloudformation.ec2/group-name
  clojure.core/string?)
 (clojure.spec.alpha/def
  :portkey.cloudformation.ec2/tenancy
  clojure.core/string?)
 (clojure.spec.alpha/def
  :portkey.cloudformation.ec2/availability-zone
  clojure.core/string?)
 (clojure.spec.alpha/def
  :portkey.cloudformation.ec2/affinity
  clojure.core/string?)
 (clojure.spec.alpha/def
  :portkey.cloudformation.ec2/host-id
  clojure.core/string?)
 (clojure.spec.alpha/def
  :portkey.cloudformation.ec2/placement
  (clojure.spec.alpha/keys
   :req
   []
   :opt
   [:portkey.cloudformation.ec2/group-name
    :portkey.cloudformation.ec2/tenancy
    :portkey.cloudformation.ec2/availability-zone
    :portkey.cloudformation.ec2/affinity
    :portkey.cloudformation.ec2/host-id])))
(do
 (clojure.spec.alpha/def
  :portkey.cloudformation.ec2/device-name
  clojure.core/string?)
 (clojure.spec.alpha/def
  :portkey.cloudformation.ec2/no-device
  clojure.core/string?)
 (clojure.spec.alpha/def
  :portkey.cloudformation.ec2/virtual-name
  clojure.core/string?)
 (clojure.spec.alpha/def
  :portkey.cloudformation.ec2/block-device-mapping
  (clojure.spec.alpha/keys
   :req
   [:portkey.cloudformation.ec2/device-name]
   :opt
   [:portkey.cloudformation.ec2/ebs
    :portkey.cloudformation.ec2/no-device
    :portkey.cloudformation.ec2/virtual-name])))
(do
 (clojure.spec.alpha/def
  :portkey.cloudformation.ec2/associate-public-ip-address
  clojure.core/boolean?)
 (clojure.spec.alpha/def
  :portkey.cloudformation.ec2/subnet-id
  clojure.core/string?)
 (clojure.spec.alpha/def
  :portkey.cloudformation.ec2/network-interface-id
  clojure.core/string?)
 (clojure.spec.alpha/def
  :portkey.cloudformation.ec2/device-index
  clojure.core/integer?)
 (clojure.spec.alpha/def
  :portkey.cloudformation.ec2/description
  clojure.core/string?)
 (clojure.spec.alpha/def
  :portkey.cloudformation.ec2/delete-on-termination
  clojure.core/boolean?)
 (clojure.spec.alpha/def
  :portkey.cloudformation.ec2/secondary-private-ip-address-count
  clojure.core/integer?)
 (clojure.spec.alpha/def
  :portkey.cloudformation.ec2/ipv6-address-count
  clojure.core/integer?)
 (clojure.spec.alpha/def
  :portkey.cloudformation.ec2/instance-network-interface-specification
  (clojure.spec.alpha/keys
   :req
   []
   :opt
   [:portkey.cloudformation.ec2/associate-public-ip-address
    :portkey.cloudformation.ec2/ipv6-addresses
    :portkey.cloudformation.ec2/subnet-id
    :portkey.cloudformation.ec2/network-interface-id
    :portkey.cloudformation.ec2/device-index
    :portkey.cloudformation.ec2/description
    :portkey.cloudformation.ec2/groups
    :portkey.cloudformation.ec2/delete-on-termination
    :portkey.cloudformation.ec2/private-ip-addresses
    :portkey.cloudformation.ec2/secondary-private-ip-address-count
    :portkey.cloudformation.ec2/ipv6-address-count])))
(do
 (clojure.spec.alpha/def
  :portkey.cloudformation.ec2/arn
  clojure.core/string?)
 (clojure.spec.alpha/def
  :portkey.cloudformation.ec2/iam-instance-profile-specification
  (clojure.spec.alpha/keys
   :req
   []
   :opt
   [:portkey.cloudformation.ec2/arn])))
(do
 (clojure.spec.alpha/def
  :portkey.cloudformation.ec2/no-device
  (clojure.spec.alpha/keys :req [] :opt [])))
(do
 (clojure.spec.alpha/def
  :portkey.cloudformation.ec2/resource-type
  clojure.core/string?)
 (clojure.spec.alpha/def
  :portkey.cloudformation.ec2/tag-specification
  (clojure.spec.alpha/keys
   :req
   []
   :opt
   [:portkey.cloudformation.ec2/resource-type
    :portkey.cloudformation.ec2/tags])))
(do
 (clojure.spec.alpha/def
  :portkey.cloudformation.ec2/pre-shared-key
  clojure.core/string?)
 (clojure.spec.alpha/def
  :portkey.cloudformation.ec2/tunnel-inside-cidr
  clojure.core/string?)
 (clojure.spec.alpha/def
  :portkey.cloudformation.ec2/vpn-tunnel-options-specification
  (clojure.spec.alpha/keys
   :req
   []
   :opt
   [:portkey.cloudformation.ec2/pre-shared-key
    :portkey.cloudformation.ec2/tunnel-inside-cidr])))
(do
 (clojure.spec.alpha/def
  :portkey.cloudformation.ec2/primary
  clojure.core/boolean?)
 (clojure.spec.alpha/def
  :portkey.cloudformation.ec2/private-ip-address
  clojure.core/string?)
 (clojure.spec.alpha/def
  :portkey.cloudformation.ec2/private-ip-address-specification
  (clojure.spec.alpha/keys
   :req
   [:portkey.cloudformation.ec2/primary
    :portkey.cloudformation.ec2/private-ip-address]
   :opt
   [])))
(do
 (clojure.spec.alpha/def
  :portkey.cloudformation.ec2/private-ip-address
  clojure.core/string?)
 (clojure.spec.alpha/def
  :portkey.cloudformation.ec2/primary
  clojure.core/boolean?)
 (clojure.spec.alpha/def
  :portkey.cloudformation.ec2/private-ip-add
  (clojure.spec.alpha/keys
   :req
   []
   :opt
   [:portkey.cloudformation.ec2/private-ip-address
    :portkey.cloudformation.ec2/primary])))
(do
 (clojure.spec.alpha/def
  :portkey.cloudformation.ec2/type
  clojure.core/string?)
 (clojure.spec.alpha/def
  :portkey.cloudformation.ec2/valid-from
  clojure.core/string?)
 (clojure.spec.alpha/def
  :portkey.cloudformation.ec2/excess-capacity-termination-policy
  clojure.core/string?)
 (clojure.spec.alpha/def
  :portkey.cloudformation.ec2/spot-price
  clojure.core/string?)
 (clojure.spec.alpha/def
  :portkey.cloudformation.ec2/allocation-strategy
  clojure.core/string?)
 (clojure.spec.alpha/def
  :portkey.cloudformation.ec2/iam-fleet-role
  clojure.core/string?)
 (clojure.spec.alpha/def
  :portkey.cloudformation.ec2/target-capacity
  clojure.core/integer?)
 (clojure.spec.alpha/def
  :portkey.cloudformation.ec2/terminate-instances-with-expiration
  clojure.core/boolean?)
 (clojure.spec.alpha/def
  :portkey.cloudformation.ec2/replace-unhealthy-instances
  clojure.core/boolean?)
 (clojure.spec.alpha/def
  :portkey.cloudformation.ec2/valid-until
  clojure.core/string?)
 (clojure.spec.alpha/def
  :portkey.cloudformation.ec2/spot-fleet-request-config-data
  (clojure.spec.alpha/keys
   :req
   [:portkey.cloudformation.ec2/iam-fleet-role
    :portkey.cloudformation.ec2/target-capacity]
   :opt
   [:portkey.cloudformation.ec2/type
    :portkey.cloudformation.ec2/valid-from
    :portkey.cloudformation.ec2/excess-capacity-termination-policy
    :portkey.cloudformation.ec2/spot-price
    :portkey.cloudformation.ec2/allocation-strategy
    :portkey.cloudformation.ec2/launch-template-configs
    :portkey.cloudformation.ec2/terminate-instances-with-expiration
    :portkey.cloudformation.ec2/launch-specifications
    :portkey.cloudformation.ec2/replace-unhealthy-instances
    :portkey.cloudformation.ec2/valid-until])))
(do
 (clojure.spec.alpha/def
  :portkey.cloudformation.ec2/spot-instance-type
  clojure.core/string?)
 (clojure.spec.alpha/def
  :portkey.cloudformation.ec2/instance-interruption-behavior
  clojure.core/string?)
 (clojure.spec.alpha/def
  :portkey.cloudformation.ec2/max-price
  clojure.core/string?)
 (clojure.spec.alpha/def
  :portkey.cloudformation.ec2/spot-options
  (clojure.spec.alpha/keys
   :req
   []
   :opt
   [:portkey.cloudformation.ec2/spot-instance-type
    :portkey.cloudformation.ec2/instance-interruption-behavior
    :portkey.cloudformation.ec2/max-price])))
(do
 (clojure.spec.alpha/def
  :portkey.cloudformation.ec2/cpu-credits
  clojure.core/string?)
 (clojure.spec.alpha/def
  :portkey.cloudformation.ec2/credit-specification
  (clojure.spec.alpha/keys
   :req
   []
   :opt
   [:portkey.cloudformation.ec2/cpu-credits])))
(do
 (clojure.spec.alpha/def
  :portkey.cloudformation.ec2/snapshot-id
  clojure.core/string?)
 (clojure.spec.alpha/def
  :portkey.cloudformation.ec2/volume-type
  clojure.core/string?)
 (clojure.spec.alpha/def
  :portkey.cloudformation.ec2/kms-key-id
  clojure.core/string?)
 (clojure.spec.alpha/def
  :portkey.cloudformation.ec2/encrypted
  clojure.core/boolean?)
 (clojure.spec.alpha/def
  :portkey.cloudformation.ec2/iops
  clojure.core/integer?)
 (clojure.spec.alpha/def
  :portkey.cloudformation.ec2/volume-size
  clojure.core/integer?)
 (clojure.spec.alpha/def
  :portkey.cloudformation.ec2/delete-on-termination
  clojure.core/boolean?)
 (clojure.spec.alpha/def
  :portkey.cloudformation.ec2/ebs
  (clojure.spec.alpha/keys
   :req
   []
   :opt
   [:portkey.cloudformation.ec2/snapshot-id
    :portkey.cloudformation.ec2/volume-type
    :portkey.cloudformation.ec2/kms-key-id
    :portkey.cloudformation.ec2/encrypted
    :portkey.cloudformation.ec2/iops
    :portkey.cloudformation.ec2/volume-size
    :portkey.cloudformation.ec2/delete-on-termination])))
(do
 (clojure.spec.alpha/def
  :portkey.cloudformation.ec2/no-device
  clojure.core/string?)
 (clojure.spec.alpha/def
  :portkey.cloudformation.ec2/virtual-name
  clojure.core/string?)
 (clojure.spec.alpha/def
  :portkey.cloudformation.ec2/device-name
  clojure.core/string?)
 (clojure.spec.alpha/def
  :portkey.cloudformation.ec2/block-device-mapping
  (clojure.spec.alpha/keys
   :req
   []
   :opt
   [:portkey.cloudformation.ec2/ebs
    :portkey.cloudformation.ec2/no-device
    :portkey.cloudformation.ec2/virtual-name
    :portkey.cloudformation.ec2/device-name])))
