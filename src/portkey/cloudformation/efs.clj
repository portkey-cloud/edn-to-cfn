(ns portkey.cloudformation.efs
  "AUTOGENERATED clojure.spec definitions"
  (:require [clojure.spec.alpha]
            [portkey.cloudformation]))

(do
 (clojure.core/defmethod
  portkey.cloudformation/resource-type-spec
  :portkey.cloudformation.efs/mount-target
  [___19567__auto__]
  (clojure.spec.alpha/keys
   :req
   [:portkey.cloudformation/id
    :portkey.cloudformation/type
    :portkey.cloudformation.efs/file-system-id
    :portkey.cloudformation.efs/security-groups
    :portkey.cloudformation.efs/subnet-id]
   :opt
   [:portkey.cloudformation.efs/ip-address]))
 (clojure.spec.alpha/def
  :portkey.cloudformation.efs/file-system-id
  (portkey.cloudformation/ref-or-spec clojure.core/string?))
 (clojure.spec.alpha/def
  :portkey.cloudformation.efs/ip-address
  (portkey.cloudformation/ref-or-spec clojure.core/string?))
 (clojure.spec.alpha/def
  :portkey.cloudformation.efs/subnet-id
  (portkey.cloudformation/ref-or-spec clojure.core/string?)))
(do
 (clojure.core/defmethod
  portkey.cloudformation/resource-type-spec
  :portkey.cloudformation.efs/file-system
  [___19567__auto__]
  (clojure.spec.alpha/keys
   :req
   [:portkey.cloudformation/id :portkey.cloudformation/type]
   :opt
   [:portkey.cloudformation.efs/encrypted
    :portkey.cloudformation.efs/file-system-tags
    :portkey.cloudformation.efs/kms-key-id
    :portkey.cloudformation.efs/performance-mode]))
 (clojure.spec.alpha/def
  :portkey.cloudformation.efs/encrypted
  (portkey.cloudformation/ref-or-spec clojure.core/boolean?))
 (clojure.spec.alpha/def
  :portkey.cloudformation.efs/kms-key-id
  (portkey.cloudformation/ref-or-spec clojure.core/string?))
 (clojure.spec.alpha/def
  :portkey.cloudformation.efs/performance-mode
  (portkey.cloudformation/ref-or-spec clojure.core/string?)))
(do
 (clojure.spec.alpha/def
  :portkey.cloudformation.efs/key
  (portkey.cloudformation/ref-or-spec clojure.core/string?))
 (clojure.spec.alpha/def
  :portkey.cloudformation.efs/value
  (portkey.cloudformation/ref-or-spec clojure.core/string?))
 (clojure.spec.alpha/def
  :portkey.cloudformation.efs/elastic-file-system-tag
  (clojure.spec.alpha/keys
   :req
   [:portkey.cloudformation.efs/key :portkey.cloudformation.efs/value]
   :opt
   [])))
