(ns portkey.cloudformation.auto-scaling
  "AUTOGENERATED clojure.spec definitions"
  (:require [clojure.spec.alpha]
            [portkey.cloudformation]))

(do
 (clojure.core/defmethod
  portkey.cloudformation/resource-type-spec
  :portkey.cloudformation.auto-scaling/scheduled-action
  [___15594__auto__]
  (clojure.spec.alpha/keys
   :req
   [:portkey.cloudformation.auto-scaling/auto-scaling-group-name]
   :opt
   [:portkey.cloudformation.auto-scaling/desired-capacity
    :portkey.cloudformation.auto-scaling/end-time
    :portkey.cloudformation.auto-scaling/max-size
    :portkey.cloudformation.auto-scaling/min-size
    :portkey.cloudformation.auto-scaling/recurrence
    :portkey.cloudformation.auto-scaling/start-time]))
 (clojure.spec.alpha/def
  :portkey.cloudformation.auto-scaling/auto-scaling-group-name
  clojure.core/string?)
 (clojure.spec.alpha/def
  :portkey.cloudformation.auto-scaling/desired-capacity
  clojure.core/integer?)
 (clojure.spec.alpha/def
  :portkey.cloudformation.auto-scaling/end-time
  clojure.core/string?)
 (clojure.spec.alpha/def
  :portkey.cloudformation.auto-scaling/max-size
  clojure.core/integer?)
 (clojure.spec.alpha/def
  :portkey.cloudformation.auto-scaling/min-size
  clojure.core/integer?)
 (clojure.spec.alpha/def
  :portkey.cloudformation.auto-scaling/recurrence
  clojure.core/string?)
 (clojure.spec.alpha/def
  :portkey.cloudformation.auto-scaling/start-time
  clojure.core/string?))
(do
 (clojure.core/defmethod
  portkey.cloudformation/resource-type-spec
  :portkey.cloudformation.auto-scaling/launch-configuration
  [___15594__auto__]
  (clojure.spec.alpha/keys
   :req
   [:portkey.cloudformation.auto-scaling/image-id
    :portkey.cloudformation.auto-scaling/instance-type]
   :opt
   [:portkey.cloudformation.auto-scaling/placement-tenancy
    :portkey.cloudformation.auto-scaling/kernel-id
    :portkey.cloudformation.auto-scaling/instance-id
    :portkey.cloudformation.auto-scaling/associate-public-ip-address
    :portkey.cloudformation.auto-scaling/instance-monitoring
    :portkey.cloudformation.auto-scaling/security-groups
    :portkey.cloudformation.auto-scaling/ebs-optimized
    :portkey.cloudformation.auto-scaling/classic-link-vpc-id
    :portkey.cloudformation.auto-scaling/key-name
    :portkey.cloudformation.auto-scaling/spot-price
    :portkey.cloudformation.auto-scaling/ram-disk-id
    :portkey.cloudformation.auto-scaling/classic-link-vpc-security-groups
    :portkey.cloudformation.auto-scaling/block-device-mappings
    :portkey.cloudformation.auto-scaling/user-data
    :portkey.cloudformation.auto-scaling/iam-instance-profile]))
 (clojure.spec.alpha/def
  :portkey.cloudformation.auto-scaling/placement-tenancy
  clojure.core/string?)
 (clojure.spec.alpha/def
  :portkey.cloudformation.auto-scaling/kernel-id
  clojure.core/string?)
 (clojure.spec.alpha/def
  :portkey.cloudformation.auto-scaling/instance-id
  clojure.core/string?)
 (clojure.spec.alpha/def
  :portkey.cloudformation.auto-scaling/associate-public-ip-address
  clojure.core/boolean?)
 (clojure.spec.alpha/def
  :portkey.cloudformation.auto-scaling/instance-monitoring
  clojure.core/boolean?)
 (clojure.spec.alpha/def
  :portkey.cloudformation.auto-scaling/image-id
  clojure.core/string?)
 (clojure.spec.alpha/def
  :portkey.cloudformation.auto-scaling/ebs-optimized
  clojure.core/boolean?)
 (clojure.spec.alpha/def
  :portkey.cloudformation.auto-scaling/instance-type
  clojure.core/string?)
 (clojure.spec.alpha/def
  :portkey.cloudformation.auto-scaling/classic-link-vpc-id
  clojure.core/string?)
 (clojure.spec.alpha/def
  :portkey.cloudformation.auto-scaling/key-name
  clojure.core/string?)
 (clojure.spec.alpha/def
  :portkey.cloudformation.auto-scaling/spot-price
  clojure.core/string?)
 (clojure.spec.alpha/def
  :portkey.cloudformation.auto-scaling/ram-disk-id
  clojure.core/string?)
 (clojure.spec.alpha/def
  :portkey.cloudformation.auto-scaling/user-data
  clojure.core/string?)
 (clojure.spec.alpha/def
  :portkey.cloudformation.auto-scaling/iam-instance-profile
  clojure.core/string?))
(do
 (clojure.core/defmethod
  portkey.cloudformation/resource-type-spec
  :portkey.cloudformation.auto-scaling/scaling-policy
  [___15594__auto__]
  (clojure.spec.alpha/keys
   :req
   [:portkey.cloudformation.auto-scaling/auto-scaling-group-name]
   :opt
   [:portkey.cloudformation.auto-scaling/min-adjustment-magnitude
    :portkey.cloudformation.auto-scaling/scaling-adjustment
    :portkey.cloudformation.auto-scaling/cooldown
    :portkey.cloudformation.auto-scaling/estimated-instance-warmup
    :portkey.cloudformation.auto-scaling/step-adjustments
    :portkey.cloudformation.auto-scaling/adjustment-type
    :portkey.cloudformation.auto-scaling/metric-aggregation-type
    :portkey.cloudformation.auto-scaling/target-tracking-configuration
    :portkey.cloudformation.auto-scaling/policy-type]))
 (clojure.spec.alpha/def
  :portkey.cloudformation.auto-scaling/auto-scaling-group-name
  clojure.core/string?)
 (clojure.spec.alpha/def
  :portkey.cloudformation.auto-scaling/min-adjustment-magnitude
  clojure.core/integer?)
 (clojure.spec.alpha/def
  :portkey.cloudformation.auto-scaling/scaling-adjustment
  clojure.core/integer?)
 (clojure.spec.alpha/def
  :portkey.cloudformation.auto-scaling/cooldown
  clojure.core/string?)
 (clojure.spec.alpha/def
  :portkey.cloudformation.auto-scaling/estimated-instance-warmup
  clojure.core/integer?)
 (clojure.spec.alpha/def
  :portkey.cloudformation.auto-scaling/adjustment-type
  clojure.core/string?)
 (clojure.spec.alpha/def
  :portkey.cloudformation.auto-scaling/metric-aggregation-type
  clojure.core/string?)
 (clojure.spec.alpha/def
  :portkey.cloudformation.auto-scaling/policy-type
  clojure.core/string?))
(do
 (clojure.core/defmethod
  portkey.cloudformation/resource-type-spec
  :portkey.cloudformation.auto-scaling/lifecycle-hook
  [___15594__auto__]
  (clojure.spec.alpha/keys
   :req
   [:portkey.cloudformation.auto-scaling/auto-scaling-group-name
    :portkey.cloudformation.auto-scaling/lifecycle-transition]
   :opt
   [:portkey.cloudformation.auto-scaling/default-result
    :portkey.cloudformation.auto-scaling/heartbeat-timeout
    :portkey.cloudformation.auto-scaling/lifecycle-hook-name
    :portkey.cloudformation.auto-scaling/notification-metadata
    :portkey.cloudformation.auto-scaling/notification-target-arn
    :portkey.cloudformation.auto-scaling/role-arn]))
 (clojure.spec.alpha/def
  :portkey.cloudformation.auto-scaling/auto-scaling-group-name
  clojure.core/string?)
 (clojure.spec.alpha/def
  :portkey.cloudformation.auto-scaling/default-result
  clojure.core/string?)
 (clojure.spec.alpha/def
  :portkey.cloudformation.auto-scaling/heartbeat-timeout
  clojure.core/integer?)
 (clojure.spec.alpha/def
  :portkey.cloudformation.auto-scaling/lifecycle-hook-name
  clojure.core/string?)
 (clojure.spec.alpha/def
  :portkey.cloudformation.auto-scaling/lifecycle-transition
  clojure.core/string?)
 (clojure.spec.alpha/def
  :portkey.cloudformation.auto-scaling/notification-metadata
  clojure.core/string?)
 (clojure.spec.alpha/def
  :portkey.cloudformation.auto-scaling/notification-target-arn
  clojure.core/string?)
 (clojure.spec.alpha/def
  :portkey.cloudformation.auto-scaling/role-arn
  clojure.core/string?))
(do
 (clojure.core/defmethod
  portkey.cloudformation/resource-type-spec
  :portkey.cloudformation.auto-scaling/auto-scaling-group
  [___15594__auto__]
  (clojure.spec.alpha/keys
   :req
   [:portkey.cloudformation.auto-scaling/min-size
    :portkey.cloudformation.auto-scaling/max-size]
   :opt
   [:portkey.cloudformation.auto-scaling/metrics-collection
    :portkey.cloudformation.auto-scaling/auto-scaling-group-name
    :portkey.cloudformation.auto-scaling/instance-id
    :portkey.cloudformation.auto-scaling/load-balancer-names
    :portkey.cloudformation.auto-scaling/notification-configurations
    :portkey.cloudformation.auto-scaling/vpc-zone-identifier
    :portkey.cloudformation.auto-scaling/tags
    :portkey.cloudformation.auto-scaling/cooldown
    :portkey.cloudformation.auto-scaling/lifecycle-hook-specification-list
    :portkey.cloudformation.auto-scaling/launch-configuration-name
    :portkey.cloudformation.auto-scaling/target-group-ar-ns
    :portkey.cloudformation.auto-scaling/health-check-type
    :portkey.cloudformation.auto-scaling/availability-zones
    :portkey.cloudformation.auto-scaling/termination-policies
    :portkey.cloudformation.auto-scaling/placement-group
    :portkey.cloudformation.auto-scaling/desired-capacity
    :portkey.cloudformation.auto-scaling/health-check-grace-period]))
 (clojure.spec.alpha/def
  :portkey.cloudformation.auto-scaling/auto-scaling-group-name
  clojure.core/string?)
 (clojure.spec.alpha/def
  :portkey.cloudformation.auto-scaling/instance-id
  clojure.core/string?)
 (clojure.spec.alpha/def
  :portkey.cloudformation.auto-scaling/cooldown
  clojure.core/string?)
 (clojure.spec.alpha/def
  :portkey.cloudformation.auto-scaling/launch-configuration-name
  clojure.core/string?)
 (clojure.spec.alpha/def
  :portkey.cloudformation.auto-scaling/health-check-type
  clojure.core/string?)
 (clojure.spec.alpha/def
  :portkey.cloudformation.auto-scaling/min-size
  clojure.core/string?)
 (clojure.spec.alpha/def
  :portkey.cloudformation.auto-scaling/max-size
  clojure.core/string?)
 (clojure.spec.alpha/def
  :portkey.cloudformation.auto-scaling/placement-group
  clojure.core/string?)
 (clojure.spec.alpha/def
  :portkey.cloudformation.auto-scaling/desired-capacity
  clojure.core/string?)
 (clojure.spec.alpha/def
  :portkey.cloudformation.auto-scaling/health-check-grace-period
  clojure.core/integer?))
(do
 (clojure.spec.alpha/def
  :portkey.cloudformation.auto-scaling/metric-name
  clojure.core/string?)
 (clojure.spec.alpha/def
  :portkey.cloudformation.auto-scaling/namespace
  clojure.core/string?)
 (clojure.spec.alpha/def
  :portkey.cloudformation.auto-scaling/statistic
  clojure.core/string?)
 (clojure.spec.alpha/def
  :portkey.cloudformation.auto-scaling/unit
  clojure.core/string?)
 (clojure.spec.alpha/def
  :portkey.cloudformation.auto-scaling/customized-metric-specification
  (clojure.spec.alpha/keys
   :req
   [:portkey.cloudformation.auto-scaling/metric-name
    :portkey.cloudformation.auto-scaling/namespace
    :portkey.cloudformation.auto-scaling/statistic]
   :opt
   [:portkey.cloudformation.auto-scaling/dimensions
    :portkey.cloudformation.auto-scaling/unit])))
(do
 (clojure.spec.alpha/def
  :portkey.cloudformation.auto-scaling/default-result
  clojure.core/string?)
 (clojure.spec.alpha/def
  :portkey.cloudformation.auto-scaling/heartbeat-timeout
  clojure.core/integer?)
 (clojure.spec.alpha/def
  :portkey.cloudformation.auto-scaling/lifecycle-hook-name
  clojure.core/string?)
 (clojure.spec.alpha/def
  :portkey.cloudformation.auto-scaling/lifecycle-transition
  clojure.core/string?)
 (clojure.spec.alpha/def
  :portkey.cloudformation.auto-scaling/notification-metadata
  clojure.core/string?)
 (clojure.spec.alpha/def
  :portkey.cloudformation.auto-scaling/notification-target-arn
  clojure.core/string?)
 (clojure.spec.alpha/def
  :portkey.cloudformation.auto-scaling/role-arn
  clojure.core/string?)
 (clojure.spec.alpha/def
  :portkey.cloudformation.auto-scaling/lifecycle-hook-specification
  (clojure.spec.alpha/keys
   :req
   [:portkey.cloudformation.auto-scaling/lifecycle-hook-name
    :portkey.cloudformation.auto-scaling/lifecycle-transition]
   :opt
   [:portkey.cloudformation.auto-scaling/default-result
    :portkey.cloudformation.auto-scaling/heartbeat-timeout
    :portkey.cloudformation.auto-scaling/notification-metadata
    :portkey.cloudformation.auto-scaling/notification-target-arn
    :portkey.cloudformation.auto-scaling/role-arn])))
(do
 (clojure.spec.alpha/def
  :portkey.cloudformation.auto-scaling/key
  clojure.core/string?)
 (clojure.spec.alpha/def
  :portkey.cloudformation.auto-scaling/propagate-at-launch
  clojure.core/boolean?)
 (clojure.spec.alpha/def
  :portkey.cloudformation.auto-scaling/value
  clojure.core/string?)
 (clojure.spec.alpha/def
  :portkey.cloudformation.auto-scaling/tag-property
  (clojure.spec.alpha/keys
   :req
   [:portkey.cloudformation.auto-scaling/key
    :portkey.cloudformation.auto-scaling/propagate-at-launch
    :portkey.cloudformation.auto-scaling/value]
   :opt
   [])))
(do
 (clojure.spec.alpha/def
  :portkey.cloudformation.auto-scaling/delete-on-termination
  clojure.core/boolean?)
 (clojure.spec.alpha/def
  :portkey.cloudformation.auto-scaling/encrypted
  clojure.core/boolean?)
 (clojure.spec.alpha/def
  :portkey.cloudformation.auto-scaling/iops
  clojure.core/integer?)
 (clojure.spec.alpha/def
  :portkey.cloudformation.auto-scaling/snapshot-id
  clojure.core/string?)
 (clojure.spec.alpha/def
  :portkey.cloudformation.auto-scaling/volume-size
  clojure.core/integer?)
 (clojure.spec.alpha/def
  :portkey.cloudformation.auto-scaling/volume-type
  clojure.core/string?)
 (clojure.spec.alpha/def
  :portkey.cloudformation.auto-scaling/block-device
  (clojure.spec.alpha/keys
   :req
   []
   :opt
   [:portkey.cloudformation.auto-scaling/delete-on-termination
    :portkey.cloudformation.auto-scaling/encrypted
    :portkey.cloudformation.auto-scaling/iops
    :portkey.cloudformation.auto-scaling/snapshot-id
    :portkey.cloudformation.auto-scaling/volume-size
    :portkey.cloudformation.auto-scaling/volume-type])))
(do
 (clojure.spec.alpha/def
  :portkey.cloudformation.auto-scaling/disable-scale-in
  clojure.core/boolean?)
 (clojure.spec.alpha/def
  :portkey.cloudformation.auto-scaling/target-value
  clojure.core/double?)
 (clojure.spec.alpha/def
  :portkey.cloudformation.auto-scaling/target-tracking-configuration
  (clojure.spec.alpha/keys
   :req
   [:portkey.cloudformation.auto-scaling/target-value]
   :opt
   [:portkey.cloudformation.auto-scaling/customized-metric-specification
    :portkey.cloudformation.auto-scaling/disable-scale-in
    :portkey.cloudformation.auto-scaling/predefined-metric-specification])))
(do
 (clojure.spec.alpha/def
  :portkey.cloudformation.auto-scaling/granularity
  clojure.core/string?)
 (clojure.spec.alpha/def
  :portkey.cloudformation.auto-scaling/metrics-collection
  (clojure.spec.alpha/keys
   :req
   [:portkey.cloudformation.auto-scaling/granularity]
   :opt
   [:portkey.cloudformation.auto-scaling/metrics])))
(do
 (clojure.spec.alpha/def
  :portkey.cloudformation.auto-scaling/predefined-metric-type
  clojure.core/string?)
 (clojure.spec.alpha/def
  :portkey.cloudformation.auto-scaling/resource-label
  clojure.core/string?)
 (clojure.spec.alpha/def
  :portkey.cloudformation.auto-scaling/predefined-metric-specification
  (clojure.spec.alpha/keys
   :req
   [:portkey.cloudformation.auto-scaling/predefined-metric-type]
   :opt
   [:portkey.cloudformation.auto-scaling/resource-label])))
(do
 (clojure.spec.alpha/def
  :portkey.cloudformation.auto-scaling/topic-arn
  clojure.core/string?)
 (clojure.spec.alpha/def
  :portkey.cloudformation.auto-scaling/notification-configuration
  (clojure.spec.alpha/keys
   :req
   [:portkey.cloudformation.auto-scaling/topic-arn]
   :opt
   [:portkey.cloudformation.auto-scaling/notification-types])))
(do
 (clojure.spec.alpha/def
  :portkey.cloudformation.auto-scaling/device-name
  clojure.core/string?)
 (clojure.spec.alpha/def
  :portkey.cloudformation.auto-scaling/no-device
  clojure.core/boolean?)
 (clojure.spec.alpha/def
  :portkey.cloudformation.auto-scaling/virtual-name
  clojure.core/string?)
 (clojure.spec.alpha/def
  :portkey.cloudformation.auto-scaling/block-device-mapping
  (clojure.spec.alpha/keys
   :req
   [:portkey.cloudformation.auto-scaling/device-name]
   :opt
   [:portkey.cloudformation.auto-scaling/ebs
    :portkey.cloudformation.auto-scaling/no-device
    :portkey.cloudformation.auto-scaling/virtual-name])))
(do
 (clojure.spec.alpha/def
  :portkey.cloudformation.auto-scaling/name
  clojure.core/string?)
 (clojure.spec.alpha/def
  :portkey.cloudformation.auto-scaling/value
  clojure.core/string?)
 (clojure.spec.alpha/def
  :portkey.cloudformation.auto-scaling/metric-dimension
  (clojure.spec.alpha/keys
   :req
   [:portkey.cloudformation.auto-scaling/name
    :portkey.cloudformation.auto-scaling/value]
   :opt
   [])))
(do
 (clojure.spec.alpha/def
  :portkey.cloudformation.auto-scaling/metric-interval-lower-bound
  clojure.core/double?)
 (clojure.spec.alpha/def
  :portkey.cloudformation.auto-scaling/metric-interval-upper-bound
  clojure.core/double?)
 (clojure.spec.alpha/def
  :portkey.cloudformation.auto-scaling/scaling-adjustment
  clojure.core/integer?)
 (clojure.spec.alpha/def
  :portkey.cloudformation.auto-scaling/step-adjustment
  (clojure.spec.alpha/keys
   :req
   [:portkey.cloudformation.auto-scaling/scaling-adjustment]
   :opt
   [:portkey.cloudformation.auto-scaling/metric-interval-lower-bound
    :portkey.cloudformation.auto-scaling/metric-interval-upper-bound])))
