(ns portkey.cloudformation.ssm
  "AUTOGENERATED clojure.spec definitions"
  (:require [clojure.spec.alpha]
            [portkey.cloudformation]))

(do
 (clojure.core/defmethod
  portkey.cloudformation/resource-type-spec
  :portkey.cloudformation.ssm/parameter
  [___15594__auto__]
  (clojure.spec.alpha/keys
   :req
   [:portkey.cloudformation.ssm/type :portkey.cloudformation.ssm/value]
   :opt
   [:portkey.cloudformation.ssm/description
    :portkey.cloudformation.ssm/allowed-pattern
    :portkey.cloudformation.ssm/name]))
 (clojure.spec.alpha/def
  :portkey.cloudformation.ssm/type
  clojure.core/string?)
 (clojure.spec.alpha/def
  :portkey.cloudformation.ssm/description
  clojure.core/string?)
 (clojure.spec.alpha/def
  :portkey.cloudformation.ssm/allowed-pattern
  clojure.core/string?)
 (clojure.spec.alpha/def
  :portkey.cloudformation.ssm/value
  clojure.core/string?)
 (clojure.spec.alpha/def
  :portkey.cloudformation.ssm/name
  clojure.core/string?))
(do
 (clojure.core/defmethod
  portkey.cloudformation/resource-type-spec
  :portkey.cloudformation.ssm/association
  [___15594__auto__]
  (clojure.spec.alpha/keys
   :req
   [:portkey.cloudformation.ssm/name]
   :opt
   [:portkey.cloudformation.ssm/association-name
    :portkey.cloudformation.ssm/document-version
    :portkey.cloudformation.ssm/instance-id
    :portkey.cloudformation.ssm/parameters
    :portkey.cloudformation.ssm/schedule-expression
    :portkey.cloudformation.ssm/targets]))
 (clojure.spec.alpha/def
  :portkey.cloudformation.ssm/association-name
  clojure.core/string?)
 (clojure.spec.alpha/def
  :portkey.cloudformation.ssm/document-version
  clojure.core/string?)
 (clojure.spec.alpha/def
  :portkey.cloudformation.ssm/instance-id
  clojure.core/string?)
 (clojure.spec.alpha/def
  :portkey.cloudformation.ssm/name
  clojure.core/string?)
 (clojure.spec.alpha/def
  :portkey.cloudformation.ssm/schedule-expression
  clojure.core/string?))
(do
 (clojure.core/defmethod
  portkey.cloudformation/resource-type-spec
  :portkey.cloudformation.ssm/document
  [___15594__auto__]
  (clojure.spec.alpha/keys
   :req
   [:portkey.cloudformation.ssm/content]
   :opt
   [:portkey.cloudformation.ssm/document-type
    :portkey.cloudformation.ssm/tags]))
 (clojure.spec.alpha/def
  :portkey.cloudformation.ssm/content
  clojure.core/any?)
 (clojure.spec.alpha/def
  :portkey.cloudformation.ssm/document-type
  clojure.core/string?))
(do
 (clojure.core/defmethod
  portkey.cloudformation/resource-type-spec
  :portkey.cloudformation.ssm/maintenance-window-task
  [___15594__auto__]
  (clojure.spec.alpha/keys
   :req
   [:portkey.cloudformation.ssm/service-role-arn
    :portkey.cloudformation.ssm/priority
    :portkey.cloudformation.ssm/max-concurrency
    :portkey.cloudformation.ssm/task-arn
    :portkey.cloudformation.ssm/max-errors
    :portkey.cloudformation.ssm/targets
    :portkey.cloudformation.ssm/task-type]
   :opt
   [:portkey.cloudformation.ssm/window-id
    :portkey.cloudformation.ssm/logging-info
    :portkey.cloudformation.ssm/description
    :portkey.cloudformation.ssm/task-parameters
    :portkey.cloudformation.ssm/name
    :portkey.cloudformation.ssm/task-invocation-parameters]))
 (clojure.spec.alpha/def
  :portkey.cloudformation.ssm/service-role-arn
  clojure.core/string?)
 (clojure.spec.alpha/def
  :portkey.cloudformation.ssm/window-id
  clojure.core/string?)
 (clojure.spec.alpha/def
  :portkey.cloudformation.ssm/priority
  clojure.core/integer?)
 (clojure.spec.alpha/def
  :portkey.cloudformation.ssm/max-concurrency
  clojure.core/string?)
 (clojure.spec.alpha/def
  :portkey.cloudformation.ssm/task-arn
  clojure.core/string?)
 (clojure.spec.alpha/def
  :portkey.cloudformation.ssm/max-errors
  clojure.core/string?)
 (clojure.spec.alpha/def
  :portkey.cloudformation.ssm/description
  clojure.core/string?)
 (clojure.spec.alpha/def
  :portkey.cloudformation.ssm/task-type
  clojure.core/string?)
 (clojure.spec.alpha/def
  :portkey.cloudformation.ssm/task-parameters
  clojure.core/any?)
 (clojure.spec.alpha/def
  :portkey.cloudformation.ssm/name
  clojure.core/string?))
(do
 (clojure.core/defmethod
  portkey.cloudformation/resource-type-spec
  :portkey.cloudformation.ssm/patch-baseline
  [___15594__auto__]
  (clojure.spec.alpha/keys
   :req
   [:portkey.cloudformation.ssm/name]
   :opt
   [:portkey.cloudformation.ssm/global-filters
    :portkey.cloudformation.ssm/approved-patches
    :portkey.cloudformation.ssm/description
    :portkey.cloudformation.ssm/approved-patches-enable-non-security
    :portkey.cloudformation.ssm/patch-groups
    :portkey.cloudformation.ssm/approval-rules
    :portkey.cloudformation.ssm/approved-patches-compliance-level
    :portkey.cloudformation.ssm/sources
    :portkey.cloudformation.ssm/operating-system
    :portkey.cloudformation.ssm/rejected-patches]))
 (clojure.spec.alpha/def
  :portkey.cloudformation.ssm/description
  clojure.core/string?)
 (clojure.spec.alpha/def
  :portkey.cloudformation.ssm/approved-patches-enable-non-security
  clojure.core/boolean?)
 (clojure.spec.alpha/def
  :portkey.cloudformation.ssm/approved-patches-compliance-level
  clojure.core/string?)
 (clojure.spec.alpha/def
  :portkey.cloudformation.ssm/name
  clojure.core/string?)
 (clojure.spec.alpha/def
  :portkey.cloudformation.ssm/operating-system
  clojure.core/string?))
(do
 (clojure.spec.alpha/def
  :portkey.cloudformation.ssm/key
  clojure.core/string?)
 (clojure.spec.alpha/def
  :portkey.cloudformation.ssm/target
  (clojure.spec.alpha/keys
   :req
   [:portkey.cloudformation.ssm/key]
   :opt
   [:portkey.cloudformation.ssm/values])))
(do
 (clojure.spec.alpha/def
  :portkey.cloudformation.ssm/key
  clojure.core/string?)
 (clojure.spec.alpha/def
  :portkey.cloudformation.ssm/patch-filter
  (clojure.spec.alpha/keys
   :req
   []
   :opt
   [:portkey.cloudformation.ssm/values
    :portkey.cloudformation.ssm/key])))
(do
 (clojure.spec.alpha/def
  :portkey.cloudformation.ssm/parameter-values
  (clojure.spec.alpha/keys
   :req
   [:portkey.cloudformation.ssm/parameter-values]
   :opt
   [])))
(do
 (clojure.spec.alpha/def
  :portkey.cloudformation.ssm/configuration
  clojure.core/string?)
 (clojure.spec.alpha/def
  :portkey.cloudformation.ssm/name
  clojure.core/string?)
 (clojure.spec.alpha/def
  :portkey.cloudformation.ssm/patch-source
  (clojure.spec.alpha/keys
   :req
   []
   :opt
   [:portkey.cloudformation.ssm/products
    :portkey.cloudformation.ssm/configuration
    :portkey.cloudformation.ssm/name])))
(do
 (clojure.spec.alpha/def
  :portkey.cloudformation.ssm/key
  clojure.core/string?)
 (clojure.spec.alpha/def
  :portkey.cloudformation.ssm/target
  (clojure.spec.alpha/keys
   :req
   [:portkey.cloudformation.ssm/key :portkey.cloudformation.ssm/values]
   :opt
   [])))
(do
 (clojure.spec.alpha/def
  :portkey.cloudformation.ssm/s3-bucket
  clojure.core/string?)
 (clojure.spec.alpha/def
  :portkey.cloudformation.ssm/region
  clojure.core/string?)
 (clojure.spec.alpha/def
  :portkey.cloudformation.ssm/s3-prefix
  clojure.core/string?)
 (clojure.spec.alpha/def
  :portkey.cloudformation.ssm/logging-info
  (clojure.spec.alpha/keys
   :req
   [:portkey.cloudformation.ssm/s3-bucket
    :portkey.cloudformation.ssm/region]
   :opt
   [:portkey.cloudformation.ssm/s3-prefix])))
(do
 (clojure.spec.alpha/def
  :portkey.cloudformation.ssm/client-context
  clojure.core/string?)
 (clojure.spec.alpha/def
  :portkey.cloudformation.ssm/qualifier
  clojure.core/string?)
 (clojure.spec.alpha/def
  :portkey.cloudformation.ssm/payload
  clojure.core/string?)
 (clojure.spec.alpha/def
  :portkey.cloudformation.ssm/maintenance-window-lambda-parameters
  (clojure.spec.alpha/keys
   :req
   []
   :opt
   [:portkey.cloudformation.ssm/client-context
    :portkey.cloudformation.ssm/qualifier
    :portkey.cloudformation.ssm/payload])))
(do
 (clojure.spec.alpha/def
  :portkey.cloudformation.ssm/rule-group
  (clojure.spec.alpha/keys
   :req
   []
   :opt
   [:portkey.cloudformation.ssm/patch-rules])))
(do
 (clojure.spec.alpha/def
  :portkey.cloudformation.ssm/service-role-arn
  clojure.core/string?)
 (clojure.spec.alpha/def
  :portkey.cloudformation.ssm/comment
  clojure.core/string?)
 (clojure.spec.alpha/def
  :portkey.cloudformation.ssm/timeout-seconds
  clojure.core/integer?)
 (clojure.spec.alpha/def
  :portkey.cloudformation.ssm/parameters
  clojure.core/any?)
 (clojure.spec.alpha/def
  :portkey.cloudformation.ssm/output-s3-bucket-name
  clojure.core/string?)
 (clojure.spec.alpha/def
  :portkey.cloudformation.ssm/document-hash
  clojure.core/string?)
 (clojure.spec.alpha/def
  :portkey.cloudformation.ssm/output-s3-key-prefix
  clojure.core/string?)
 (clojure.spec.alpha/def
  :portkey.cloudformation.ssm/document-hash-type
  clojure.core/string?)
 (clojure.spec.alpha/def
  :portkey.cloudformation.ssm/maintenance-window-run-command-parameters
  (clojure.spec.alpha/keys
   :req
   []
   :opt
   [:portkey.cloudformation.ssm/service-role-arn
    :portkey.cloudformation.ssm/comment
    :portkey.cloudformation.ssm/timeout-seconds
    :portkey.cloudformation.ssm/parameters
    :portkey.cloudformation.ssm/output-s3-bucket-name
    :portkey.cloudformation.ssm/notification-config
    :portkey.cloudformation.ssm/document-hash
    :portkey.cloudformation.ssm/output-s3-key-prefix
    :portkey.cloudformation.ssm/document-hash-type])))
(do
 (clojure.spec.alpha/def
  :portkey.cloudformation.ssm/patch-filter-group
  (clojure.spec.alpha/keys
   :req
   []
   :opt
   [:portkey.cloudformation.ssm/patch-filters])))
(do
 (clojure.spec.alpha/def
  :portkey.cloudformation.ssm/enable-non-security
  clojure.core/boolean?)
 (clojure.spec.alpha/def
  :portkey.cloudformation.ssm/approve-after-days
  clojure.core/integer?)
 (clojure.spec.alpha/def
  :portkey.cloudformation.ssm/compliance-level
  clojure.core/string?)
 (clojure.spec.alpha/def
  :portkey.cloudformation.ssm/rule
  (clojure.spec.alpha/keys
   :req
   []
   :opt
   [:portkey.cloudformation.ssm/enable-non-security
    :portkey.cloudformation.ssm/patch-filter-group
    :portkey.cloudformation.ssm/approve-after-days
    :portkey.cloudformation.ssm/compliance-level])))
(do
 (clojure.spec.alpha/def
  :portkey.cloudformation.ssm/notification-arn
  clojure.core/string?)
 (clojure.spec.alpha/def
  :portkey.cloudformation.ssm/notification-type
  clojure.core/string?)
 (clojure.spec.alpha/def
  :portkey.cloudformation.ssm/notification-config
  (clojure.spec.alpha/keys
   :req
   [:portkey.cloudformation.ssm/notification-arn]
   :opt
   [:portkey.cloudformation.ssm/notification-type
    :portkey.cloudformation.ssm/notification-events])))
(do
 (clojure.spec.alpha/def
  :portkey.cloudformation.ssm/parameters
  clojure.core/any?)
 (clojure.spec.alpha/def
  :portkey.cloudformation.ssm/document-version
  clojure.core/string?)
 (clojure.spec.alpha/def
  :portkey.cloudformation.ssm/maintenance-window-automation-parameters
  (clojure.spec.alpha/keys
   :req
   []
   :opt
   [:portkey.cloudformation.ssm/parameters
    :portkey.cloudformation.ssm/document-version])))
(do
 (clojure.spec.alpha/def
  :portkey.cloudformation.ssm/input
  clojure.core/string?)
 (clojure.spec.alpha/def
  :portkey.cloudformation.ssm/name
  clojure.core/string?)
 (clojure.spec.alpha/def
  :portkey.cloudformation.ssm/maintenance-window-step-functions-parameters
  (clojure.spec.alpha/keys
   :req
   []
   :opt
   [:portkey.cloudformation.ssm/input
    :portkey.cloudformation.ssm/name])))
(do
 (clojure.spec.alpha/def
  :portkey.cloudformation.ssm/task-invocation-parameters
  (clojure.spec.alpha/keys
   :req
   []
   :opt
   [:portkey.cloudformation.ssm/maintenance-window-run-command-parameters
    :portkey.cloudformation.ssm/maintenance-window-automation-parameters
    :portkey.cloudformation.ssm/maintenance-window-step-functions-parameters
    :portkey.cloudformation.ssm/maintenance-window-lambda-parameters])))
