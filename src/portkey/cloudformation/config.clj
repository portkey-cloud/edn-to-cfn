(ns portkey.cloudformation.config
  "AUTOGENERATED clojure.spec definitions"
  (:require [clojure.spec.alpha]
            [portkey.cloudformation]))

(do
 (clojure.core/defmethod
  portkey.cloudformation/resource-type-spec
  :portkey.cloudformation.config/configuration-recorder
  [___19567__auto__]
  (clojure.spec.alpha/keys
   :req
   [:portkey.cloudformation/id
    :portkey.cloudformation/type
    :portkey.cloudformation.config/role-arn]
   :opt
   [:portkey.cloudformation.config/name
    :portkey.cloudformation.config/recording-group]))
 (clojure.spec.alpha/def
  :portkey.cloudformation.config/name
  (portkey.cloudformation/ref-or-spec clojure.core/string?))
 (clojure.spec.alpha/def
  :portkey.cloudformation.config/role-arn
  (portkey.cloudformation/ref-or-spec clojure.core/string?)))
(do
 (clojure.core/defmethod
  portkey.cloudformation/resource-type-spec
  :portkey.cloudformation.config/config-rule
  [___19567__auto__]
  (clojure.spec.alpha/keys
   :req
   [:portkey.cloudformation/id
    :portkey.cloudformation/type
    :portkey.cloudformation.config/source]
   :opt
   [:portkey.cloudformation.config/config-rule-name
    :portkey.cloudformation.config/description
    :portkey.cloudformation.config/input-parameters
    :portkey.cloudformation.config/maximum-execution-frequency
    :portkey.cloudformation.config/scope]))
 (clojure.spec.alpha/def
  :portkey.cloudformation.config/config-rule-name
  (portkey.cloudformation/ref-or-spec clojure.core/string?))
 (clojure.spec.alpha/def
  :portkey.cloudformation.config/description
  (portkey.cloudformation/ref-or-spec clojure.core/string?))
 (clojure.spec.alpha/def
  :portkey.cloudformation.config/input-parameters
  (portkey.cloudformation/ref-or-spec clojure.core/any?))
 (clojure.spec.alpha/def
  :portkey.cloudformation.config/maximum-execution-frequency
  (portkey.cloudformation/ref-or-spec clojure.core/string?)))
(do
 (clojure.core/defmethod
  portkey.cloudformation/resource-type-spec
  :portkey.cloudformation.config/delivery-channel
  [___19567__auto__]
  (clojure.spec.alpha/keys
   :req
   [:portkey.cloudformation/id
    :portkey.cloudformation/type
    :portkey.cloudformation.config/s3-bucket-name]
   :opt
   [:portkey.cloudformation.config/config-snapshot-delivery-properties
    :portkey.cloudformation.config/name
    :portkey.cloudformation.config/s3-key-prefix
    :portkey.cloudformation.config/sns-topic-arn]))
 (clojure.spec.alpha/def
  :portkey.cloudformation.config/name
  (portkey.cloudformation/ref-or-spec clojure.core/string?))
 (clojure.spec.alpha/def
  :portkey.cloudformation.config/s3-bucket-name
  (portkey.cloudformation/ref-or-spec clojure.core/string?))
 (clojure.spec.alpha/def
  :portkey.cloudformation.config/s3-key-prefix
  (portkey.cloudformation/ref-or-spec clojure.core/string?))
 (clojure.spec.alpha/def
  :portkey.cloudformation.config/sns-topic-arn
  (portkey.cloudformation/ref-or-spec clojure.core/string?)))
(do
 (clojure.spec.alpha/def
  :portkey.cloudformation.config/compliance-resource-id
  (portkey.cloudformation/ref-or-spec clojure.core/string?))
 (clojure.spec.alpha/def
  :portkey.cloudformation.config/tag-key
  (portkey.cloudformation/ref-or-spec clojure.core/string?))
 (clojure.spec.alpha/def
  :portkey.cloudformation.config/tag-value
  (portkey.cloudformation/ref-or-spec clojure.core/string?))
 (clojure.spec.alpha/def
  :portkey.cloudformation.config/scope
  (clojure.spec.alpha/keys
   :req
   []
   :opt
   [:portkey.cloudformation.config/compliance-resource-id
    :portkey.cloudformation.config/compliance-resource-types
    :portkey.cloudformation.config/tag-key
    :portkey.cloudformation.config/tag-value])))
(do
 (clojure.spec.alpha/def
  :portkey.cloudformation.config/event-source
  (portkey.cloudformation/ref-or-spec clojure.core/string?))
 (clojure.spec.alpha/def
  :portkey.cloudformation.config/maximum-execution-frequency
  (portkey.cloudformation/ref-or-spec clojure.core/string?))
 (clojure.spec.alpha/def
  :portkey.cloudformation.config/message-type
  (portkey.cloudformation/ref-or-spec clojure.core/string?))
 (clojure.spec.alpha/def
  :portkey.cloudformation.config/source-detail
  (clojure.spec.alpha/keys
   :req
   [:portkey.cloudformation.config/event-source
    :portkey.cloudformation.config/message-type]
   :opt
   [:portkey.cloudformation.config/maximum-execution-frequency])))
(do
 (clojure.spec.alpha/def
  :portkey.cloudformation.config/owner
  (portkey.cloudformation/ref-or-spec clojure.core/string?))
 (clojure.spec.alpha/def
  :portkey.cloudformation.config/source-identifier
  (portkey.cloudformation/ref-or-spec clojure.core/string?))
 (clojure.spec.alpha/def
  :portkey.cloudformation.config/source
  (clojure.spec.alpha/keys
   :req
   [:portkey.cloudformation.config/owner
    :portkey.cloudformation.config/source-identifier]
   :opt
   [:portkey.cloudformation.config/source-details])))
(do
 (clojure.spec.alpha/def
  :portkey.cloudformation.config/delivery-frequency
  (portkey.cloudformation/ref-or-spec clojure.core/string?))
 (clojure.spec.alpha/def
  :portkey.cloudformation.config/config-snapshot-delivery-properties
  (clojure.spec.alpha/keys
   :req
   []
   :opt
   [:portkey.cloudformation.config/delivery-frequency])))
(do
 (clojure.spec.alpha/def
  :portkey.cloudformation.config/all-supported
  (portkey.cloudformation/ref-or-spec clojure.core/boolean?))
 (clojure.spec.alpha/def
  :portkey.cloudformation.config/include-global-resource-types
  (portkey.cloudformation/ref-or-spec clojure.core/boolean?))
 (clojure.spec.alpha/def
  :portkey.cloudformation.config/recording-group
  (clojure.spec.alpha/keys
   :req
   []
   :opt
   [:portkey.cloudformation.config/all-supported
    :portkey.cloudformation.config/include-global-resource-types
    :portkey.cloudformation.config/resource-types])))
