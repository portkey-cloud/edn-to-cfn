(ns portkey.cloudformation.waf
  "AUTOGENERATED clojure.spec definitions"
  (:require [clojure.spec.alpha]
            [portkey.cloudformation]))

(do
 (clojure.core/defmethod
  portkey.cloudformation/resource-type-spec
  :portkey.cloudformation.waf/web-acl
  [___15594__auto__]
  (clojure.spec.alpha/keys
   :req
   [:portkey.cloudformation.waf/default-action
    :portkey.cloudformation.waf/metric-name
    :portkey.cloudformation.waf/name]
   :opt
   [:portkey.cloudformation.waf/rules]))
 (clojure.spec.alpha/def
  :portkey.cloudformation.waf/metric-name
  clojure.core/string?)
 (clojure.spec.alpha/def
  :portkey.cloudformation.waf/name
  clojure.core/string?))
(do
 (clojure.core/defmethod
  portkey.cloudformation/resource-type-spec
  :portkey.cloudformation.waf/rule
  [___15594__auto__]
  (clojure.spec.alpha/keys
   :req
   [:portkey.cloudformation.waf/metric-name
    :portkey.cloudformation.waf/name]
   :opt
   [:portkey.cloudformation.waf/predicates]))
 (clojure.spec.alpha/def
  :portkey.cloudformation.waf/metric-name
  clojure.core/string?)
 (clojure.spec.alpha/def
  :portkey.cloudformation.waf/name
  clojure.core/string?))
(do
 (clojure.core/defmethod
  portkey.cloudformation/resource-type-spec
  :portkey.cloudformation.waf/size-constraint-set
  [___15594__auto__]
  (clojure.spec.alpha/keys
   :req
   [:portkey.cloudformation.waf/name
    :portkey.cloudformation.waf/size-constraints]
   :opt
   []))
 (clojure.spec.alpha/def
  :portkey.cloudformation.waf/name
  clojure.core/string?))
(do
 (clojure.core/defmethod
  portkey.cloudformation/resource-type-spec
  :portkey.cloudformation.waf/ip-set
  [___15594__auto__]
  (clojure.spec.alpha/keys
   :req
   [:portkey.cloudformation.waf/name]
   :opt
   [:portkey.cloudformation.waf/ip-set-descriptors]))
 (clojure.spec.alpha/def
  :portkey.cloudformation.waf/name
  clojure.core/string?))
(do
 (clojure.core/defmethod
  portkey.cloudformation/resource-type-spec
  :portkey.cloudformation.waf/byte-match-set
  [___15594__auto__]
  (clojure.spec.alpha/keys
   :req
   [:portkey.cloudformation.waf/name]
   :opt
   [:portkey.cloudformation.waf/byte-match-tuples]))
 (clojure.spec.alpha/def
  :portkey.cloudformation.waf/name
  clojure.core/string?))
(do
 (clojure.core/defmethod
  portkey.cloudformation/resource-type-spec
  :portkey.cloudformation.waf/xss-match-set
  [___15594__auto__]
  (clojure.spec.alpha/keys
   :req
   [:portkey.cloudformation.waf/name
    :portkey.cloudformation.waf/xss-match-tuples]
   :opt
   []))
 (clojure.spec.alpha/def
  :portkey.cloudformation.waf/name
  clojure.core/string?))
(do
 (clojure.core/defmethod
  portkey.cloudformation/resource-type-spec
  :portkey.cloudformation.waf/sql-injection-match-set
  [___15594__auto__]
  (clojure.spec.alpha/keys
   :req
   [:portkey.cloudformation.waf/name]
   :opt
   [:portkey.cloudformation.waf/sql-injection-match-tuples]))
 (clojure.spec.alpha/def
  :portkey.cloudformation.waf/name
  clojure.core/string?))
(do
 (clojure.spec.alpha/def
  :portkey.cloudformation.waf/text-transformation
  clojure.core/string?)
 (clojure.spec.alpha/def
  :portkey.cloudformation.waf/sql-injection-match-tuple
  (clojure.spec.alpha/keys
   :req
   [:portkey.cloudformation.waf/field-to-match
    :portkey.cloudformation.waf/text-transformation]
   :opt
   [])))
(do
 (clojure.spec.alpha/def
  :portkey.cloudformation.waf/type
  clojure.core/string?)
 (clojure.spec.alpha/def
  :portkey.cloudformation.waf/value
  clojure.core/string?)
 (clojure.spec.alpha/def
  :portkey.cloudformation.waf/ip-set-descriptor
  (clojure.spec.alpha/keys
   :req
   [:portkey.cloudformation.waf/type :portkey.cloudformation.waf/value]
   :opt
   [])))
(do
 (clojure.spec.alpha/def
  :portkey.cloudformation.waf/comparison-operator
  clojure.core/string?)
 (clojure.spec.alpha/def
  :portkey.cloudformation.waf/size
  clojure.core/integer?)
 (clojure.spec.alpha/def
  :portkey.cloudformation.waf/text-transformation
  clojure.core/string?)
 (clojure.spec.alpha/def
  :portkey.cloudformation.waf/size-constraint
  (clojure.spec.alpha/keys
   :req
   [:portkey.cloudformation.waf/comparison-operator
    :portkey.cloudformation.waf/field-to-match
    :portkey.cloudformation.waf/size
    :portkey.cloudformation.waf/text-transformation]
   :opt
   [])))
(do
 (clojure.spec.alpha/def
  :portkey.cloudformation.waf/priority
  clojure.core/integer?)
 (clojure.spec.alpha/def
  :portkey.cloudformation.waf/rule-id
  clojure.core/string?)
 (clojure.spec.alpha/def
  :portkey.cloudformation.waf/activated-rule
  (clojure.spec.alpha/keys
   :req
   [:portkey.cloudformation.waf/action
    :portkey.cloudformation.waf/priority
    :portkey.cloudformation.waf/rule-id]
   :opt
   [])))
(do
 (clojure.spec.alpha/def
  :portkey.cloudformation.waf/text-transformation
  clojure.core/string?)
 (clojure.spec.alpha/def
  :portkey.cloudformation.waf/xss-match-tuple
  (clojure.spec.alpha/keys
   :req
   [:portkey.cloudformation.waf/field-to-match
    :portkey.cloudformation.waf/text-transformation]
   :opt
   [])))
(do
 (clojure.spec.alpha/def
  :portkey.cloudformation.waf/positional-constraint
  clojure.core/string?)
 (clojure.spec.alpha/def
  :portkey.cloudformation.waf/target-string
  clojure.core/string?)
 (clojure.spec.alpha/def
  :portkey.cloudformation.waf/target-string-base64
  clojure.core/string?)
 (clojure.spec.alpha/def
  :portkey.cloudformation.waf/text-transformation
  clojure.core/string?)
 (clojure.spec.alpha/def
  :portkey.cloudformation.waf/byte-match-tuple
  (clojure.spec.alpha/keys
   :req
   [:portkey.cloudformation.waf/field-to-match
    :portkey.cloudformation.waf/positional-constraint
    :portkey.cloudformation.waf/text-transformation]
   :opt
   [:portkey.cloudformation.waf/target-string
    :portkey.cloudformation.waf/target-string-base64])))
(do
 (clojure.spec.alpha/def
  :portkey.cloudformation.waf/data-id
  clojure.core/string?)
 (clojure.spec.alpha/def
  :portkey.cloudformation.waf/negated
  clojure.core/boolean?)
 (clojure.spec.alpha/def
  :portkey.cloudformation.waf/type
  clojure.core/string?)
 (clojure.spec.alpha/def
  :portkey.cloudformation.waf/predicate
  (clojure.spec.alpha/keys
   :req
   [:portkey.cloudformation.waf/data-id
    :portkey.cloudformation.waf/negated
    :portkey.cloudformation.waf/type]
   :opt
   [])))
(do
 (clojure.spec.alpha/def
  :portkey.cloudformation.waf/data
  clojure.core/string?)
 (clojure.spec.alpha/def
  :portkey.cloudformation.waf/type
  clojure.core/string?)
 (clojure.spec.alpha/def
  :portkey.cloudformation.waf/field-to-match
  (clojure.spec.alpha/keys
   :req
   [:portkey.cloudformation.waf/type]
   :opt
   [:portkey.cloudformation.waf/data])))
(do
 (clojure.spec.alpha/def
  :portkey.cloudformation.waf/type
  clojure.core/string?)
 (clojure.spec.alpha/def
  :portkey.cloudformation.waf/waf-action
  (clojure.spec.alpha/keys
   :req
   [:portkey.cloudformation.waf/type]
   :opt
   [])))
(do
 (clojure.spec.alpha/def
  :portkey.cloudformation.waf/data
  clojure.core/string?)
 (clojure.spec.alpha/def
  :portkey.cloudformation.waf/type
  clojure.core/string?)
 (clojure.spec.alpha/def
  :portkey.cloudformation.waf/field-to-match
  (clojure.spec.alpha/keys
   :req
   [:portkey.cloudformation.waf/type]
   :opt
   [:portkey.cloudformation.waf/data])))
(do
 (clojure.spec.alpha/def
  :portkey.cloudformation.waf/data
  clojure.core/string?)
 (clojure.spec.alpha/def
  :portkey.cloudformation.waf/type
  clojure.core/string?)
 (clojure.spec.alpha/def
  :portkey.cloudformation.waf/field-to-match
  (clojure.spec.alpha/keys
   :req
   [:portkey.cloudformation.waf/type]
   :opt
   [:portkey.cloudformation.waf/data])))
(do
 (clojure.spec.alpha/def
  :portkey.cloudformation.waf/data
  clojure.core/string?)
 (clojure.spec.alpha/def
  :portkey.cloudformation.waf/type
  clojure.core/string?)
 (clojure.spec.alpha/def
  :portkey.cloudformation.waf/field-to-match
  (clojure.spec.alpha/keys
   :req
   [:portkey.cloudformation.waf/type]
   :opt
   [:portkey.cloudformation.waf/data])))
